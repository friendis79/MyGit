
ex14_5_professor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000028c  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080012e  0080012e  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a01  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000869  00000000  00000000  00000e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d0  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000460  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020b  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000021bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	6a c0       	rjmp	.+212    	; 0x14e <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 33       	cpi	r26, 0x3A	; 58
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ba d0       	rcall	.+372    	; 0x238 <main>
  c4:	e1 c0       	rjmp	.+450    	; 0x288 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <timer0_init>:
}

void timer0_init()
{
	// CTC mode setting
	TCCR0 |= (1 << WGM01) | (0 << WGM00);
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  ce:	12 be       	out	0x32, r1	; 50
	OCR0 = 36;
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	81 bf       	out	0x31, r24	; 49
	
	// OCIE (Output Compare Match Interrupt Enable)
	TIMSK |= (1 << OCIE0);
  d4:	87 b7       	in	r24, 0x37	; 55
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	87 bf       	out	0x37, r24	; 55
	
	// Prescale = 1024
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);
  da:	83 b7       	in	r24, 0x33	; 51
  dc:	87 60       	ori	r24, 0x07	; 7
  de:	83 bf       	out	0x33, r24	; 51
  e0:	08 95       	ret

000000e2 <__vector_15>:
}

ISR (TIMER0_COMP_vect)	// 2.5ms마다 Segment의 값 변경
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	SegIdx++;
  f0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <SegIdx>
  f4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <SegIdx+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <SegIdx+0x1>
  fe:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <SegIdx>
	if (SegIdx == 4) SegIdx = 0;
 102:	04 97       	sbiw	r24, 0x04	; 4
 104:	21 f4       	brne	.+8      	; 0x10e <__vector_15+0x2c>
 106:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <SegIdx+0x1>
 10a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <SegIdx>
	SegChangeFlag = 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <SegChangeFlag+0x1>
 116:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <SegChangeFlag>
}
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <Init_USART1>:

void Init_USART1()
{
	UCSR1B |= (1 << RXCIE); // RXCIE bit (7번)을 1로 바꿈
 128:	ea e9       	ldi	r30, 0x9A	; 154
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN) | (1 << TXEN); // RXEN, TXEN 설정
 132:	80 81       	ld	r24, Z
 134:	88 61       	ori	r24, 0x18	; 24
 136:	80 83       	st	Z, r24
	UBRR1L = 95; // Baud Rate 맞게 설정
 138:	8f e5       	ldi	r24, 0x5F	; 95
 13a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 13e:	08 95       	ret

00000140 <putchar_USART1>:
}

void putchar_USART1(char data)
{
	while(1) {
		if (UCSR1A & (1 << UDRE)) { // UDRE 확인
 140:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 144:	95 ff       	sbrs	r25, 5
 146:	fc cf       	rjmp	.-8      	; 0x140 <putchar_USART1>
			UDR1 = data;
 148:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 14c:	08 95       	ret

0000014e <__vector_30>:
int SegIdx = 0;
int SegChangeFlag = 0;
int RXNUM[4] = {0, }; // 입력 받은 4자리 숫자를 임시 저장할 배열

ISR(USART1_RX_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	0b b6       	in	r0, 0x3b	; 59
 15a:	0f 92       	push	r0
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	cf 93       	push	r28
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
	char rx_data;
	rx_data = UDR1;
 176:	c0 91 9c 00 	lds	r28, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	putchar_USART1(rx_data);
 17a:	8c 2f       	mov	r24, r28
 17c:	e1 df       	rcall	.-62     	; 0x140 <putchar_USART1>
	if (rx_data == '\r') {
 17e:	cd 30       	cpi	r28, 0x0D	; 13
 180:	19 f4       	brne	.+6      	; 0x188 <__vector_30+0x3a>
		putchar_USART1('\n');
 182:	8a e0       	ldi	r24, 0x0A	; 10
 184:	dd df       	rcall	.-70     	; 0x140 <putchar_USART1>
 186:	17 c0       	rjmp	.+46     	; 0x1b6 <__vector_30+0x68>
	}
	else if ((rx_data >= '0') && (rx_data <= '9')) {
 188:	80 ed       	ldi	r24, 0xD0	; 208
 18a:	8c 0f       	add	r24, r28
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	98 f4       	brcc	.+38     	; 0x1b6 <__vector_30+0x68>
		// 숫자 입력되면 한 칸 씩 좌로 이동
		RXNUM[3] = RXNUM[2];
 190:	ee e2       	ldi	r30, 0x2E	; 46
 192:	f1 e0       	ldi	r31, 0x01	; 1
 194:	84 81       	ldd	r24, Z+4	; 0x04
 196:	95 81       	ldd	r25, Z+5	; 0x05
 198:	97 83       	std	Z+7, r25	; 0x07
 19a:	86 83       	std	Z+6, r24	; 0x06
		RXNUM[2] = RXNUM[1];
 19c:	82 81       	ldd	r24, Z+2	; 0x02
 19e:	93 81       	ldd	r25, Z+3	; 0x03
 1a0:	95 83       	std	Z+5, r25	; 0x05
 1a2:	84 83       	std	Z+4, r24	; 0x04
		RXNUM[1] = RXNUM[0];
 1a4:	80 81       	ld	r24, Z
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	93 83       	std	Z+3, r25	; 0x03
 1aa:	82 83       	std	Z+2, r24	; 0x02
		RXNUM[0] = rx_data - '0';  // 새 숫자는 제일 우측에
 1ac:	8c 2f       	mov	r24, r28
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	c0 97       	sbiw	r24, 0x30	; 48
 1b2:	91 83       	std	Z+1, r25	; 0x01
 1b4:	80 83       	st	Z, r24
	}
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	cf 91       	pop	r28
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0b be       	out	0x3b, r0	; 59
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <puts_USART1>:
		}
	}
}

void puts_USART1(char *str)
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
	while (*str != 0) {
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <puts_USART1+0xc>
		putchar_USART1(*str);
 1e6:	ac df       	rcall	.-168    	; 0x140 <putchar_USART1>
		str++;
 1e8:	21 96       	adiw	r28, 0x01	; 1
	}
}

void puts_USART1(char *str)
{
	while (*str != 0) {
 1ea:	88 81       	ld	r24, Y
 1ec:	81 11       	cpse	r24, r1
 1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <puts_USART1+0x8>
		putchar_USART1(*str);
		str++;
	}
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <FND_Display>:

void FND_Display(int idx, int number, int dot)
{
	if (idx == 0)		PORTE = 0x10;
 1f6:	00 97       	sbiw	r24, 0x00	; 0
 1f8:	19 f4       	brne	.+6      	; 0x200 <FND_Display+0xa>
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	83 b9       	out	0x03, r24	; 3
 1fe:	10 c0       	rjmp	.+32     	; 0x220 <FND_Display+0x2a>
	else if (idx == 1)	PORTE = 0x20;
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	91 05       	cpc	r25, r1
 204:	19 f4       	brne	.+6      	; 0x20c <FND_Display+0x16>
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	83 b9       	out	0x03, r24	; 3
 20a:	0a c0       	rjmp	.+20     	; 0x220 <FND_Display+0x2a>
	else if (idx == 2)	PORTE = 0x40;
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	91 05       	cpc	r25, r1
 210:	19 f4       	brne	.+6      	; 0x218 <FND_Display+0x22>
 212:	80 e4       	ldi	r24, 0x40	; 64
 214:	83 b9       	out	0x03, r24	; 3
 216:	04 c0       	rjmp	.+8      	; 0x220 <FND_Display+0x2a>
	else if (idx == 3)	PORTE = 0x80;
 218:	03 97       	sbiw	r24, 0x03	; 3
 21a:	11 f4       	brne	.+4      	; 0x220 <FND_Display+0x2a>
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	83 b9       	out	0x03, r24	; 3

	PORTB = Port_char[number];
 220:	fb 01       	movw	r30, r22
 222:	e0 50       	subi	r30, 0x00	; 0
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	80 81       	ld	r24, Z
 228:	88 bb       	out	0x18, r24	; 24
	
	if (dot == 1)
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	51 05       	cpc	r21, r1
 22e:	19 f4       	brne	.+6      	; 0x236 <FND_Display+0x40>
	PORTB = PORTB & 0x7f;
 230:	88 b3       	in	r24, 0x18	; 24
 232:	8f 77       	andi	r24, 0x7F	; 127
 234:	88 bb       	out	0x18, r24	; 24
 236:	08 95       	ret

00000238 <main>:
	}
}

int main(void)
{
	DDRB = 0xff;
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff;
 23c:	82 b9       	out	0x02, r24	; 2
	
	PORTB = 0xff;
 23e:	88 bb       	out	0x18, r24	; 24
	PORTE = 0x80;
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	83 b9       	out	0x03, r24	; 3
	
	// TImer, UART 초기화 및 Interrupt 활성
	Init_USART1();
 244:	71 df       	rcall	.-286    	; 0x128 <Init_USART1>
	timer0_init();
 246:	40 df       	rcall	.-384    	; 0xc8 <timer0_init>
 248:	78 94       	sei
	sei(); // UART와 Interrupt 다 포함해서 만들기 위해 사용
 24a:	81 e1       	ldi	r24, 0x11	; 17

	puts_USART1("7 Segment Control Program \r\n");
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	c7 df       	rcall	.-114    	; 0x1de <puts_USART1>
 250:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <SegChangeFlag>
	
	while (1)
	{
		if(SegChangeFlag) {
 254:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <SegChangeFlag+0x1>
 258:	89 2b       	or	r24, r25
 25a:	d1 f3       	breq	.-12     	; 0x250 <main+0x18>
 25c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <SegIdx>
			FND_Display(SegIdx, RXNUM[3-SegIdx], 0);
 260:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <SegIdx+0x1>
 264:	e3 e0       	ldi	r30, 0x03	; 3
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	e8 1b       	sub	r30, r24
 26a:	f9 0b       	sbc	r31, r25
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	e2 5d       	subi	r30, 0xD2	; 210
 272:	fe 4f       	sbci	r31, 0xFE	; 254
 274:	60 81       	ld	r22, Z
 276:	71 81       	ldd	r23, Z+1	; 0x01
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	bc df       	rcall	.-136    	; 0x1f6 <FND_Display>
 27e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <SegChangeFlag+0x1>
			SegChangeFlag = 0;
 282:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <SegChangeFlag>
 286:	e4 cf       	rjmp	.-56     	; 0x250 <main+0x18>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
