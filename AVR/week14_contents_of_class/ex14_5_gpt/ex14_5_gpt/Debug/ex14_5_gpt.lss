
ex14_5_gpt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000306  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080011a  0080011a  000003b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3c  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000881  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040a  00000000  00000000  00001735  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000233  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000022d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	6a c0       	rjmp	.+212    	; 0x14e <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e0       	ldi	r30, 0x06	; 6
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 33       	cpi	r26, 0x30	; 48
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fa d0       	rcall	.+500    	; 0x2b8 <main>
  c4:	1e c1       	rjmp	.+572    	; 0x302 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <timer0_init>:

// 타이머0 초기화 함수
void timer0_init()
{
	// CTC (Clear Timer on Compare Match) 모드 설정
	TCCR0 |= (1 << WGM01) | (0 << WGM00);
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0; // 타이머 카운터 초기화
  ce:	12 be       	out	0x32, r1	; 50
	OCR0 = 36; // 출력 비교 레지스터 설정 (타이머가 이 값에 도달하면 비교 인터럽트 발생)
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	81 bf       	out	0x31, r24	; 49
	
	// 출력 비교 일치 인터럽트 활성화
	TIMSK |= (1 << OCIE0);
  d4:	87 b7       	in	r24, 0x37	; 55
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	87 bf       	out	0x37, r24	; 55
	
	// 프리스케일러 설정 (1024)
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);
  da:	83 b7       	in	r24, 0x33	; 51
  dc:	87 60       	ori	r24, 0x07	; 7
  de:	83 bf       	out	0x33, r24	; 51
  e0:	08 95       	ret

000000e2 <__vector_15>:
}

// 타이머0 비교 일치 인터럽트 서비스 루틴
ISR (TIMER0_COMP_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	SegIdx++; // 세그먼트 인덱스를 증가
  f0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <SegIdx>
  f4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <SegIdx+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <SegIdx+0x1>
  fe:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <SegIdx>
	if (SegIdx == 4) SegIdx = 0; // 인덱스가 4가 되면 0으로 리셋
 102:	04 97       	sbiw	r24, 0x04	; 4
 104:	21 f4       	brne	.+8      	; 0x10e <__vector_15+0x2c>
 106:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <SegIdx+0x1>
 10a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <SegIdx>
	SegChangeFlag = 1; // 세그먼트 변경 플래그 설정
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <SegChangeFlag+0x1>
 116:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <SegChangeFlag>
}
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <Init_USART1>:

// USART1 초기화 함수
void Init_USART1()
{
	UCSR1B |= (1 << RXCIE); // RXCIE 비트 (수신 완료 인터럽트 활성화)
 128:	ea e9       	ldi	r30, 0x9A	; 154
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN) | (1 << TXEN); // RXEN, TXEN 설정 (수신, 송신 활성화)
 132:	80 81       	ld	r24, Z
 134:	88 61       	ori	r24, 0x18	; 24
 136:	80 83       	st	Z, r24
	UBRR1L = 95; // Baud Rate 설정 (9600bps 기준)
 138:	8f e5       	ldi	r24, 0x5F	; 95
 13a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 13e:	08 95       	ret

00000140 <putchar_USART1>:

// USART1 송신 함수 (한 문자)
void putchar_USART1(char data)
{
	while(1) {
		if (UCSR1A & (1 << UDRE)) { // UDRE 비트 확인 (송신 버퍼가 비어있는지 확인)
 140:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 144:	95 ff       	sbrs	r25, 5
 146:	fc cf       	rjmp	.-8      	; 0x140 <putchar_USART1>
			UDR1 = data; // 송신 데이터를 UDR1 레지스터에 저장
 148:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 14c:	08 95       	ret

0000014e <__vector_30>:
int RXNUM[4] = {0, }; // UART로 입력받은 4자리 숫자를 임시 저장할 배열
int RXCNT = 0; // 입력받은 숫자의 개수 카운트

// UART1 수신 인터럽트 서비스 루틴
ISR(USART1_RX_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	0b b6       	in	r0, 0x3b	; 59
 15a:	0f 92       	push	r0
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	cf 93       	push	r28
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
	char rx_data; // 수신된 데이터를 저장할 변수
	rx_data = UDR1; // UDR1 레지스터에서 수신 데이터를 읽음
 176:	c0 91 9c 00 	lds	r28, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	putchar_USART1(rx_data); // 에코(수신된 데이터를 다시 송신)
 17a:	8c 2f       	mov	r24, r28
 17c:	e1 df       	rcall	.-62     	; 0x140 <putchar_USART1>

	if (rx_data == '\r'){ // 수신된 데이터가 캐리지 리턴(엔터키)인 경우
 17e:	cd 30       	cpi	r28, 0x0D	; 13
 180:	81 f5       	brne	.+96     	; 0x1e2 <__vector_30+0x94>
 182:	23 c0       	rjmp	.+70     	; 0x1ca <__vector_30+0x7c>
		for (int i = 0; i < 4; i++) {
			if (i < RXCNT) {
 184:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 188:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 18c:	28 17       	cp	r18, r24
 18e:	39 07       	cpc	r19, r25
 190:	94 f4       	brge	.+36     	; 0x1b6 <__vector_30+0x68>
				SegNumber[i] = RXNUM[RXCNT - 1 - i]; // 오른쪽에서 왼쪽으로 숫자를 채움
 192:	fc 01       	movw	r30, r24
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	e2 1b       	sub	r30, r18
 198:	f3 0b       	sbc	r31, r19
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	e4 5e       	subi	r30, 0xE4	; 228
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
 1a2:	80 81       	ld	r24, Z
 1a4:	91 81       	ldd	r25, Z+1	; 0x01
 1a6:	f9 01       	movw	r30, r18
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	ec 5d       	subi	r30, 0xDC	; 220
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	91 83       	std	Z+1, r25	; 0x01
 1b2:	80 83       	st	Z, r24
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <__vector_30+0x76>
			}
			else {
				SegNumber[i] = 0; // 나머지 자리는 0으로 채움
 1b6:	f9 01       	movw	r30, r18
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	ec 5d       	subi	r30, 0xDC	; 220
 1be:	fe 4f       	sbci	r31, 0xFE	; 254
 1c0:	11 82       	std	Z+1, r1	; 0x01
 1c2:	10 82       	st	Z, r1
	char rx_data; // 수신된 데이터를 저장할 변수
	rx_data = UDR1; // UDR1 레지스터에서 수신 데이터를 읽음
	putchar_USART1(rx_data); // 에코(수신된 데이터를 다시 송신)

	if (rx_data == '\r'){ // 수신된 데이터가 캐리지 리턴(엔터키)인 경우
		for (int i = 0; i < 4; i++) {
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <__vector_30+0x80>
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	24 30       	cpi	r18, 0x04	; 4
 1d0:	31 05       	cpc	r19, r1
 1d2:	c4 f2       	brlt	.-80     	; 0x184 <__vector_30+0x36>
			}
			else {
				SegNumber[i] = 0; // 나머지 자리는 0으로 채움
			}
		}
		RXCNT = 0; // 입력 카운트를 리셋
 1d4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 1d8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
		putchar_USART1('\n'); // 줄 바꿈 문자를 송신
 1dc:	8a e0       	ldi	r24, 0x0A	; 10
 1de:	b0 df       	rcall	.-160    	; 0x140 <putchar_USART1>
 1e0:	2a c0       	rjmp	.+84     	; 0x236 <__vector_30+0xe8>
	}
	else if ((rx_data >= '0') & (rx_data <= '9')) { // 수신된 데이터가 숫자인 경우
 1e2:	80 ed       	ldi	r24, 0xD0	; 208
 1e4:	8c 0f       	add	r24, r28
 1e6:	8a 30       	cpi	r24, 0x0A	; 10
 1e8:	c0 f4       	brcc	.+48     	; 0x21a <__vector_30+0xcc>
		if (RXCNT < 4) { // 입력받은 숫자가 4개 미만인 경우
 1ea:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 1ee:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 1f2:	24 30       	cpi	r18, 0x04	; 4
 1f4:	31 05       	cpc	r19, r1
 1f6:	fc f4       	brge	.+62     	; 0x236 <__vector_30+0xe8>
			RXNUM[RXCNT] = rx_data - '0'; // 숫자를 RXNUM 배열에 저장
 1f8:	8c 2f       	mov	r24, r28
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	c0 97       	sbiw	r24, 0x30	; 48
 1fe:	f9 01       	movw	r30, r18
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	e4 5e       	subi	r30, 0xE4	; 228
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	91 83       	std	Z+1, r25	; 0x01
 20a:	80 83       	st	Z, r24
			RXCNT++; // 입력 카운트를 증가
 20c:	2f 5f       	subi	r18, 0xFF	; 255
 20e:	3f 4f       	sbci	r19, 0xFF	; 255
 210:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__data_end+0x1>
 214:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
 218:	0e c0       	rjmp	.+28     	; 0x236 <__vector_30+0xe8>
		}
	}
	else if (rx_data == 'q') { // 수신된 데이터가 'q'인 경우
 21a:	c1 37       	cpi	r28, 0x71	; 113
 21c:	61 f4       	brne	.+24     	; 0x236 <__vector_30+0xe8>
		RXNUM[RXCNT] = 45; // RXNUM 배열에 45를 저장
 21e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__data_end>
 222:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__data_end+0x1>
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	e4 5e       	subi	r30, 0xE4	; 228
 22c:	fe 4f       	sbci	r31, 0xFE	; 254
 22e:	8d e2       	ldi	r24, 0x2D	; 45
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	91 83       	std	Z+1, r25	; 0x01
 234:	80 83       	st	Z, r24
	}
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	cf 91       	pop	r28
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0b be       	out	0x3b, r0	; 59
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <puts_USART1>:
	}
}

// USART1 송신 함수 (문자열)
void puts_USART1(char *str)
{
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
	while (*str != 0) { // 문자열의 끝을 만날 때까지
 264:	02 c0       	rjmp	.+4      	; 0x26a <puts_USART1+0xc>
		putchar_USART1(*str); // 한 문자씩 송신
 266:	6c df       	rcall	.-296    	; 0x140 <putchar_USART1>
		str++; // 다음 문자로 이동
 268:	21 96       	adiw	r28, 0x01	; 1
}

// USART1 송신 함수 (문자열)
void puts_USART1(char *str)
{
	while (*str != 0) { // 문자열의 끝을 만날 때까지
 26a:	88 81       	ld	r24, Y
 26c:	81 11       	cpse	r24, r1
 26e:	fb cf       	rjmp	.-10     	; 0x266 <puts_USART1+0x8>
		putchar_USART1(*str); // 한 문자씩 송신
		str++; // 다음 문자로 이동
	}
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <FND_Display>:

// FND에 숫자 표시 함수
void FND_Display(int idx, int number, int dot)
{
	if (idx == 0)        PORTE = 0x10; // 첫 번째 세그먼트 선택
 276:	00 97       	sbiw	r24, 0x00	; 0
 278:	19 f4       	brne	.+6      	; 0x280 <FND_Display+0xa>
 27a:	80 e1       	ldi	r24, 0x10	; 16
 27c:	83 b9       	out	0x03, r24	; 3
 27e:	10 c0       	rjmp	.+32     	; 0x2a0 <FND_Display+0x2a>
	else if (idx == 1)   PORTE = 0x20; // 두 번째 세그먼트 선택
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	91 05       	cpc	r25, r1
 284:	19 f4       	brne	.+6      	; 0x28c <FND_Display+0x16>
 286:	80 e2       	ldi	r24, 0x20	; 32
 288:	83 b9       	out	0x03, r24	; 3
 28a:	0a c0       	rjmp	.+20     	; 0x2a0 <FND_Display+0x2a>
	else if (idx == 2)   PORTE = 0x40; // 세 번째 세그먼트 선택
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	91 05       	cpc	r25, r1
 290:	19 f4       	brne	.+6      	; 0x298 <FND_Display+0x22>
 292:	80 e4       	ldi	r24, 0x40	; 64
 294:	83 b9       	out	0x03, r24	; 3
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <FND_Display+0x2a>
	else if (idx == 3)   PORTE = 0x80; // 네 번째 세그먼트 선택
 298:	03 97       	sbiw	r24, 0x03	; 3
 29a:	11 f4       	brne	.+4      	; 0x2a0 <FND_Display+0x2a>
 29c:	80 e8       	ldi	r24, 0x80	; 128
 29e:	83 b9       	out	0x03, r24	; 3

	PORTB = Port_char[number]; // 숫자에 해당하는 7세그먼트 코드 출력
 2a0:	fb 01       	movw	r30, r22
 2a2:	e0 50       	subi	r30, 0x00	; 0
 2a4:	ff 4f       	sbci	r31, 0xFF	; 255
 2a6:	80 81       	ld	r24, Z
 2a8:	88 bb       	out	0x18, r24	; 24
	
	if (dot == 1)        PORTB = PORTB & 0x7f; // 점 표시 (dot 플래그가 설정된 경우)
 2aa:	41 30       	cpi	r20, 0x01	; 1
 2ac:	51 05       	cpc	r21, r1
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <FND_Display+0x40>
 2b0:	88 b3       	in	r24, 0x18	; 24
 2b2:	8f 77       	andi	r24, 0x7F	; 127
 2b4:	88 bb       	out	0x18, r24	; 24
 2b6:	08 95       	ret

000002b8 <main>:
	}
}

int main(void)
{
	DDRB = 0xff; // 포트 B를 출력으로 설정
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff; // 포트 E를 출력으로 설정
 2bc:	82 b9       	out	0x02, r24	; 2
	
	PORTB = 0xff; // 포트 B를 초기화 (모든 세그먼트를 끔)
 2be:	88 bb       	out	0x18, r24	; 24
	PORTE = 0x80; // 포트 E를 초기화 (첫 번째 세그먼트를 켬)
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	83 b9       	out	0x03, r24	; 3
	
	Init_USART1(); // USART1 초기화
 2c4:	31 df       	rcall	.-414    	; 0x128 <Init_USART1>
	timer0_init(); // 타이머0 초기화
 2c6:	00 df       	rcall	.-512    	; 0xc8 <timer0_init>
 2c8:	78 94       	sei
	sei(); // 글로벌 인터럽트 활성화
 2ca:	81 e1       	ldi	r24, 0x11	; 17

	puts_USART1("Start \r\n"); // "Start \r\n" 메시지 송신
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	c7 df       	rcall	.-114    	; 0x25e <puts_USART1>
 2d0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <SegChangeFlag>
	
	while (1)
	{
		if(SegChangeFlag) { // 세그먼트 변경 플래그가 설정된 경우
 2d4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <SegChangeFlag+0x1>
 2d8:	89 2b       	or	r24, r25
 2da:	d1 f3       	breq	.-12     	; 0x2d0 <main+0x18>
 2dc:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <SegIdx>
			FND_Display(SegIdx, SegNumber[SegIdx], 0); // 현재 세그먼트에 숫자를 표시
 2e0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <SegIdx+0x1>
 2e4:	fc 01       	movw	r30, r24
 2e6:	ee 0f       	add	r30, r30
 2e8:	ff 1f       	adc	r31, r31
 2ea:	ec 5d       	subi	r30, 0xDC	; 220
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	60 81       	ld	r22, Z
 2f0:	71 81       	ldd	r23, Z+1	; 0x01
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	bf df       	rcall	.-130    	; 0x276 <FND_Display>
 2f8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <SegChangeFlag+0x1>
			SegChangeFlag = 0; // 세그먼트 변경 플래그를 리셋
 2fc:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <SegChangeFlag>
 300:	e7 cf       	rjmp	.-50     	; 0x2d0 <main+0x18>

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
