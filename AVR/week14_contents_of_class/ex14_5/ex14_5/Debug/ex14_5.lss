
ex14_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000316  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000316  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800130  00800130  000003da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4f  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000899  00000000  00000000  00000eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000405  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000233  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000231f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	6a c0       	rjmp	.+212    	; 0x14e <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 33       	cpi	r26, 0x30	; 48
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e3       	ldi	r26, 0x30	; 48
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 34       	cpi	r26, 0x46	; 70
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d1       	rcall	.+516    	; 0x2c8 <main>
  c4:	26 c1       	rjmp	.+588    	; 0x312 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <timer0_init>:
}

void timer0_init()
{
	// CTC mode setting
	TCCR0 |= (1 << WGM01) | (0 << WGM00);
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  ce:	12 be       	out	0x32, r1	; 50
	OCR0 = 36;
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	81 bf       	out	0x31, r24	; 49
	
	// OCIE (Output Compare Match Interrupt Enable)
	TIMSK |= (1 << OCIE0);
  d4:	87 b7       	in	r24, 0x37	; 55
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	87 bf       	out	0x37, r24	; 55
	
	// Prescale = 1024
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);
  da:	83 b7       	in	r24, 0x33	; 51
  dc:	87 60       	ori	r24, 0x07	; 7
  de:	83 bf       	out	0x33, r24	; 51
  e0:	08 95       	ret

000000e2 <__vector_15>:
}

ISR (TIMER0_COMP_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	SegIdx++;
  f0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <SegIdx>
  f4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <SegIdx+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <SegIdx+0x1>
  fe:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <SegIdx>
	if (SegIdx == 4) SegIdx = 0;
 102:	04 97       	sbiw	r24, 0x04	; 4
 104:	21 f4       	brne	.+8      	; 0x10e <__vector_15+0x2c>
 106:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <SegIdx+0x1>
 10a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <SegIdx>
	SegChangeFlag = 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <SegChangeFlag+0x1>
 116:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <SegChangeFlag>
}
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <Init_USART1>:

void Init_USART1()
{
	UCSR1B |= (1 << RXCIE); // RXCIE bit (7번)을 1로 바꿈
 128:	ea e9       	ldi	r30, 0x9A	; 154
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN) | (1 << TXEN); // RXEN, TXEN 설정
 132:	80 81       	ld	r24, Z
 134:	88 61       	ori	r24, 0x18	; 24
 136:	80 83       	st	Z, r24
	UBRR1L = 95; // Baud Rate 맞게 설정
 138:	8f e5       	ldi	r24, 0x5F	; 95
 13a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 13e:	08 95       	ret

00000140 <putchar_USART1>:
}

void putchar_USART1(char data)
{
	while(1) {
		if (UCSR1A & (1 << UDRE)) { // UDRE 확인
 140:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 144:	95 ff       	sbrs	r25, 5
 146:	fc cf       	rjmp	.-8      	; 0x140 <putchar_USART1>
			UDR1 = data;
 148:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 14c:	08 95       	ret

0000014e <__vector_30>:
int SegNumber[4] = {0, }; // 4자리 숫자를 저장할 배열
int RXNUM[4]; // 입력 받은 4자리 숫자를 임시 저장할 배열
int RXCNT = 0; // 입력받은 숫자의 카운트

ISR(USART1_RX_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	0b b6       	in	r0, 0x3b	; 59
 15a:	0f 92       	push	r0
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	cf 93       	push	r28
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
	char rx_data;
	rx_data = UDR1;
 176:	c0 91 9c 00 	lds	r28, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	putchar_USART1(rx_data);
 17a:	8c 2f       	mov	r24, r28
 17c:	e1 df       	rcall	.-62     	; 0x140 <putchar_USART1>
	if (rx_data == '\r'){
 17e:	cd 30       	cpi	r28, 0x0D	; 13
 180:	c1 f5       	brne	.+112    	; 0x1f2 <__vector_30+0xa4>
 182:	2b c0       	rjmp	.+86     	; 0x1da <__vector_30+0x8c>
		for (int i = 0; i < 4; i++) {
			if (i < RXCNT) {
 184:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 188:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 18c:	28 17       	cp	r18, r24
 18e:	39 07       	cpc	r19, r25
 190:	bc f4       	brge	.+46     	; 0x1c0 <__vector_30+0x72>
				SegNumber[3 - i] = RXNUM[RXCNT - 1 - i]; // 오른쪽에서 왼쪽으로 숫자를 채움
 192:	e3 e0       	ldi	r30, 0x03	; 3
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	af 01       	movw	r20, r30
 198:	42 1b       	sub	r20, r18
 19a:	53 0b       	sbc	r21, r19
 19c:	fc 01       	movw	r30, r24
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	e2 1b       	sub	r30, r18
 1a2:	f3 0b       	sbc	r31, r19
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	e2 5c       	subi	r30, 0xC2	; 194
 1aa:	fe 4f       	sbci	r31, 0xFE	; 254
 1ac:	80 81       	ld	r24, Z
 1ae:	91 81       	ldd	r25, Z+1	; 0x01
 1b0:	fa 01       	movw	r30, r20
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	ee 5c       	subi	r30, 0xCE	; 206
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	91 83       	std	Z+1, r25	; 0x01
 1bc:	80 83       	st	Z, r24
 1be:	0a c0       	rjmp	.+20     	; 0x1d4 <__vector_30+0x86>
			}
			else {
				SegNumber[3 - i] = 0; // 나머지 자리는 0으로 채움
 1c0:	e3 e0       	ldi	r30, 0x03	; 3
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	e2 1b       	sub	r30, r18
 1c6:	f3 0b       	sbc	r31, r19
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	ee 5c       	subi	r30, 0xCE	; 206
 1ce:	fe 4f       	sbci	r31, 0xFE	; 254
 1d0:	11 82       	std	Z+1, r1	; 0x01
 1d2:	10 82       	st	Z, r1
{
	char rx_data;
	rx_data = UDR1;
	putchar_USART1(rx_data);
	if (rx_data == '\r'){
		for (int i = 0; i < 4; i++) {
 1d4:	2f 5f       	subi	r18, 0xFF	; 255
 1d6:	3f 4f       	sbci	r19, 0xFF	; 255
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <__vector_30+0x90>
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	24 30       	cpi	r18, 0x04	; 4
 1e0:	31 05       	cpc	r19, r1
 1e2:	84 f2       	brlt	.-96     	; 0x184 <__vector_30+0x36>
			}
			else {
				SegNumber[3 - i] = 0; // 나머지 자리는 0으로 채움
			}
		}
		RXCNT = 0;
 1e4:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__data_end+0x1>
 1e8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
		putchar_USART1('\n');
 1ec:	8a e0       	ldi	r24, 0x0A	; 10
 1ee:	a8 df       	rcall	.-176    	; 0x140 <putchar_USART1>
 1f0:	2a c0       	rjmp	.+84     	; 0x246 <__vector_30+0xf8>
	}
	else if ((rx_data >= '0') & (rx_data <= '9')) {
 1f2:	80 ed       	ldi	r24, 0xD0	; 208
 1f4:	8c 0f       	add	r24, r28
 1f6:	8a 30       	cpi	r24, 0x0A	; 10
 1f8:	c0 f4       	brcc	.+48     	; 0x22a <__vector_30+0xdc>
		if (RXCNT < 4) {
 1fa:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
 1fe:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <__data_end+0x1>
 202:	24 30       	cpi	r18, 0x04	; 4
 204:	31 05       	cpc	r19, r1
 206:	fc f4       	brge	.+62     	; 0x246 <__vector_30+0xf8>
			RXNUM[RXCNT] = rx_data - '0';
 208:	8c 2f       	mov	r24, r28
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	c0 97       	sbiw	r24, 0x30	; 48
 20e:	f9 01       	movw	r30, r18
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	e2 5c       	subi	r30, 0xC2	; 194
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	91 83       	std	Z+1, r25	; 0x01
 21a:	80 83       	st	Z, r24
			RXCNT++;
 21c:	2f 5f       	subi	r18, 0xFF	; 255
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
 220:	30 93 31 01 	sts	0x0131, r19	; 0x800131 <__data_end+0x1>
 224:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__data_end>
 228:	0e c0       	rjmp	.+28     	; 0x246 <__vector_30+0xf8>
		}
	}
	else if (rx_data == 'q') {
 22a:	c1 37       	cpi	r28, 0x71	; 113
 22c:	61 f4       	brne	.+24     	; 0x246 <__vector_30+0xf8>
		RXNUM[RXCNT] = 45;
 22e:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__data_end>
 232:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <__data_end+0x1>
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	e2 5c       	subi	r30, 0xC2	; 194
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	8d e2       	ldi	r24, 0x2D	; 45
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	91 83       	std	Z+1, r25	; 0x01
 244:	80 83       	st	Z, r24
	}
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	cf 91       	pop	r28
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0b be       	out	0x3b, r0	; 59
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <puts_USART1>:
		}
	}
}

void puts_USART1(char *str)
{
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ec 01       	movw	r28, r24
	while (*str != 0) {
 274:	02 c0       	rjmp	.+4      	; 0x27a <puts_USART1+0xc>
		putchar_USART1(*str);
 276:	64 df       	rcall	.-312    	; 0x140 <putchar_USART1>
		str++;
 278:	21 96       	adiw	r28, 0x01	; 1
	}
}

void puts_USART1(char *str)
{
	while (*str != 0) {
 27a:	88 81       	ld	r24, Y
 27c:	81 11       	cpse	r24, r1
 27e:	fb cf       	rjmp	.-10     	; 0x276 <puts_USART1+0x8>
		putchar_USART1(*str);
		str++;
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <FND_Display>:

void FND_Display(int idx, int number, int dot)
{
	if (idx == 0)		PORTE = 0x10;
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	19 f4       	brne	.+6      	; 0x290 <FND_Display+0xa>
 28a:	80 e1       	ldi	r24, 0x10	; 16
 28c:	83 b9       	out	0x03, r24	; 3
 28e:	10 c0       	rjmp	.+32     	; 0x2b0 <FND_Display+0x2a>
	else if (idx == 1)	PORTE = 0x20;
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	91 05       	cpc	r25, r1
 294:	19 f4       	brne	.+6      	; 0x29c <FND_Display+0x16>
 296:	80 e2       	ldi	r24, 0x20	; 32
 298:	83 b9       	out	0x03, r24	; 3
 29a:	0a c0       	rjmp	.+20     	; 0x2b0 <FND_Display+0x2a>
	else if (idx == 2)	PORTE = 0x40;
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	91 05       	cpc	r25, r1
 2a0:	19 f4       	brne	.+6      	; 0x2a8 <FND_Display+0x22>
 2a2:	80 e4       	ldi	r24, 0x40	; 64
 2a4:	83 b9       	out	0x03, r24	; 3
 2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <FND_Display+0x2a>
	else if (idx == 3)	PORTE = 0x80;
 2a8:	03 97       	sbiw	r24, 0x03	; 3
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <FND_Display+0x2a>
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	83 b9       	out	0x03, r24	; 3

	PORTB = Port_char[number];
 2b0:	fb 01       	movw	r30, r22
 2b2:	e0 50       	subi	r30, 0x00	; 0
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	80 81       	ld	r24, Z
 2b8:	88 bb       	out	0x18, r24	; 24
	
	if (dot == 1)
 2ba:	41 30       	cpi	r20, 0x01	; 1
 2bc:	51 05       	cpc	r21, r1
 2be:	19 f4       	brne	.+6      	; 0x2c6 <FND_Display+0x40>
	PORTB = PORTB & 0x7f;
 2c0:	88 b3       	in	r24, 0x18	; 24
 2c2:	8f 77       	andi	r24, 0x7F	; 127
 2c4:	88 bb       	out	0x18, r24	; 24
 2c6:	08 95       	ret

000002c8 <main>:
	}
}

int main(void)
{
	DDRB = 0xff;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff;
 2cc:	82 b9       	out	0x02, r24	; 2
	
	PORTB = 0xff;
 2ce:	88 bb       	out	0x18, r24	; 24
	PORTE = 0x80;
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	83 b9       	out	0x03, r24	; 3
	
	Init_USART1();
 2d4:	29 df       	rcall	.-430    	; 0x128 <Init_USART1>
	timer0_init();
 2d6:	f8 de       	rcall	.-528    	; 0xc8 <timer0_init>
 2d8:	78 94       	sei
	sei(); // UART나 Interrupt 다 포함해서 만들기 위해 사용
 2da:	81 e1       	ldi	r24, 0x11	; 17

	puts_USART1("\r\n7 Segment Control Program \r\n");
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	c7 df       	rcall	.-114    	; 0x26e <puts_USART1>
 2e0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <SegChangeFlag>
	
	while (1)
	{
		if(SegChangeFlag) {
 2e4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <SegChangeFlag+0x1>
 2e8:	89 2b       	or	r24, r25
 2ea:	d1 f3       	breq	.-12     	; 0x2e0 <main+0x18>
 2ec:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <SegIdx>
			FND_Display(SegIdx, SegNumber[SegIdx], 0);
 2f0:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <SegIdx+0x1>
 2f4:	fc 01       	movw	r30, r24
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	ee 5c       	subi	r30, 0xCE	; 206
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	60 81       	ld	r22, Z
 300:	71 81       	ldd	r23, Z+1	; 0x01
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	bf df       	rcall	.-130    	; 0x286 <FND_Display>
 308:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <SegChangeFlag+0x1>
			SegChangeFlag = 0;
 30c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <SegChangeFlag>
 310:	e7 cf       	rjmp	.-50     	; 0x2e0 <main+0x18>

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
