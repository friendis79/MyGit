
final_test_sample1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  000003e4  00000478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800234  00800234  000005ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e30  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093f  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e3  00000000  00000000  00001de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050d  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000367  00000000  00000000  00002909  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	59 c0       	rjmp	.+178    	; 0x12c <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ee       	ldi	r30, 0xE4	; 228
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 33       	cpi	r26, 0x34	; 52
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a4 e3       	ldi	r26, 0x34	; 52
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 34       	cpi	r26, 0x41	; 65
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	28 d1       	rcall	.+592    	; 0x314 <main>
  c4:	8d c1       	rjmp	.+794    	; 0x3e0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <MakeSound>:
	}
}

void MakeSound(int period)
{
	int duty = period >> 1; // 50% 듀티 사이클
  c8:	9c 01       	movw	r18, r24
  ca:	35 95       	asr	r19
  cc:	27 95       	ror	r18
	OCR1A = period; // Set compare match value
  ce:	9b bd       	out	0x2b, r25	; 43
  d0:	8a bd       	out	0x2a, r24	; 42
	OCR1B = duty; // Set duty cycle
  d2:	39 bd       	out	0x29, r19	; 41
  d4:	28 bd       	out	0x28, r18	; 40
	TCCR1A |= (1 << COM1A0) | (1 << COM1B1); // Connect OC1A pin
  d6:	8f b5       	in	r24, 0x2f	; 47
  d8:	80 66       	ori	r24, 0x60	; 96
  da:	8f bd       	out	0x2f, r24	; 47
  dc:	08 95       	ret

000000de <StopSound>:
}

void StopSound()
{
	TCCR1A &= ~((1 << COM1A0) | (1 << COM1B1)); // Disconnect OC1A pin
  de:	8f b5       	in	r24, 0x2f	; 47
  e0:	8f 79       	andi	r24, 0x9F	; 159
  e2:	8f bd       	out	0x2f, r24	; 47
  e4:	08 95       	ret

000000e6 <Init_USART1>:

void Init_USART1()
{
	// Set baud rate
	uint16_t ubrr = (F_CPU / 16 / 9600) - 1;
	UBRR1H = (unsigned char)(ubrr >> 8);
  e6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char)ubrr;
  ea:	8f e5       	ldi	r24, 0x5F	; 95
  ec:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

	UCSR1B = (1 << RXEN1) | (1 << TXEN1); // Enable receiver and transmitter
  f0:	ea e9       	ldi	r30, 0x9A	; 154
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	88 e1       	ldi	r24, 0x18	; 24
  f6:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXCIE1); // RX Complete Interrupt Enable
  f8:	80 81       	ld	r24, Z
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	80 83       	st	Z, r24
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); // Set frame: 8data, 1 stop
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 104:	08 95       	ret

00000106 <putchar_USART1>:
}

void putchar_USART1(char data)
{
	while (!(UCSR1A & (1 << UDRE1))); // Wait until buffer is empty
 106:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 10a:	95 ff       	sbrs	r25, 5
 10c:	fc cf       	rjmp	.-8      	; 0x106 <putchar_USART1>
	UDR1 = data; // Transmit data
 10e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 112:	08 95       	ret

00000114 <puts_USART1>:
}

void puts_USART1(const char *str)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
	while (*str) {
 11a:	02 c0       	rjmp	.+4      	; 0x120 <puts_USART1+0xc>
		putchar_USART1(*str);
 11c:	f4 df       	rcall	.-24     	; 0x106 <putchar_USART1>
		str++;
 11e:	21 96       	adiw	r28, 0x01	; 1
	UDR1 = data; // Transmit data
}

void puts_USART1(const char *str)
{
	while (*str) {
 120:	88 81       	ld	r24, Y
 122:	81 11       	cpse	r24, r1
 124:	fb cf       	rjmp	.-10     	; 0x11c <puts_USART1+0x8>
		putchar_USART1(*str);
		str++;
	}
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <__vector_30>:
volatile int music_mode = 1; // 현재 음악 모드 (1, 2, 3 중 하나)
char rx_buffer[10]; // UART 입력 버퍼
volatile uint8_t rx_index = 0; // 버퍼 인덱스

ISR(USART1_RX_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	0b b6       	in	r0, 0x3b	; 59
 138:	0f 92       	push	r0
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	cf 93       	push	r28
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	char rx_data = UDR1;
 154:	c0 91 9c 00 	lds	r28, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	putchar_USART1(rx_data); // Echo back received data for debugging
 158:	8c 2f       	mov	r24, r28
 15a:	d5 df       	rcall	.-86     	; 0x106 <putchar_USART1>

	if (rx_data == '\r' || rx_data == '\n') { // 엔터키 수신
 15c:	cd 30       	cpi	r28, 0x0D	; 13
 15e:	19 f0       	breq	.+6      	; 0x166 <__vector_30+0x3a>
 160:	ca 30       	cpi	r28, 0x0A	; 10
 162:	09 f0       	breq	.+2      	; 0x166 <__vector_30+0x3a>
 164:	5b c0       	rjmp	.+182    	; 0x21c <__vector_30+0xf0>
		rx_buffer[rx_index] = '\0'; // 문자열 종료
 166:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <__data_end>
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e9 5c       	subi	r30, 0xC9	; 201
 16e:	fd 4f       	sbci	r31, 0xFD	; 253
 170:	10 82       	st	Z, r1
		rx_index = 0; // 버퍼 인덱스 초기화
 172:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <__data_end>

		if (strcmp(rx_buffer, "s") == 0) { // 음악 시작 명령어 수신
 176:	6a ec       	ldi	r22, 0xCA	; 202
 178:	71 e0       	ldi	r23, 0x01	; 1
 17a:	87 e3       	ldi	r24, 0x37	; 55
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	27 d1       	rcall	.+590    	; 0x3ce <strcmp>
 180:	89 2b       	or	r24, r25
 182:	51 f4       	brne	.+20     	; 0x198 <__vector_30+0x6c>
			music_flag = 1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <music_flag+0x1>
 18c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <music_flag>
			puts_USART1("Music started\r\n");
 190:	8c ec       	ldi	r24, 0xCC	; 204
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	bf df       	rcall	.-130    	; 0x114 <puts_USART1>
 196:	52 c0       	rjmp	.+164    	; 0x23c <__vector_30+0x110>
			} else if (strcmp(rx_buffer, "e") == 0) { // 음악 종료 명령어 수신
 198:	6c ed       	ldi	r22, 0xDC	; 220
 19a:	71 e0       	ldi	r23, 0x01	; 1
 19c:	87 e3       	ldi	r24, 0x37	; 55
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	16 d1       	rcall	.+556    	; 0x3ce <strcmp>
 1a2:	89 2b       	or	r24, r25
 1a4:	41 f4       	brne	.+16     	; 0x1b6 <__vector_30+0x8a>
			music_flag = 0;
 1a6:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <music_flag+0x1>
 1aa:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <music_flag>
			puts_USART1("Music stopped\r\n");
 1ae:	8e ed       	ldi	r24, 0xDE	; 222
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	b0 df       	rcall	.-160    	; 0x114 <puts_USART1>
			} else if (strcmp(rx_buffer, "1") == 0) { // 모드 1 설정
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__vector_30+0x110>
 1b6:	6e ee       	ldi	r22, 0xEE	; 238
 1b8:	71 e0       	ldi	r23, 0x01	; 1
 1ba:	87 e3       	ldi	r24, 0x37	; 55
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	07 d1       	rcall	.+526    	; 0x3ce <strcmp>
 1c0:	89 2b       	or	r24, r25
 1c2:	51 f4       	brne	.+20     	; 0x1d8 <__vector_30+0xac>
			music_mode = 1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			puts_USART1("Mode 1 selected\r\n");
 1d0:	80 ef       	ldi	r24, 0xF0	; 240
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	9f df       	rcall	.-194    	; 0x114 <puts_USART1>
			} else if (strcmp(rx_buffer, "2") == 0) { // 모드 2 설정
 1d6:	32 c0       	rjmp	.+100    	; 0x23c <__vector_30+0x110>
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	72 e0       	ldi	r23, 0x02	; 2
 1dc:	87 e3       	ldi	r24, 0x37	; 55
 1de:	92 e0       	ldi	r25, 0x02	; 2
 1e0:	f6 d0       	rcall	.+492    	; 0x3ce <strcmp>
 1e2:	89 2b       	or	r24, r25
 1e4:	51 f4       	brne	.+20     	; 0x1fa <__vector_30+0xce>
			music_mode = 2;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			puts_USART1("Mode 2 selected\r\n");
 1f2:	84 e0       	ldi	r24, 0x04	; 4
 1f4:	92 e0       	ldi	r25, 0x02	; 2
 1f6:	8e df       	rcall	.-228    	; 0x114 <puts_USART1>
			} else if (strcmp(rx_buffer, "3") == 0) { // 모드 3 설정
 1f8:	21 c0       	rjmp	.+66     	; 0x23c <__vector_30+0x110>
 1fa:	66 e1       	ldi	r22, 0x16	; 22
 1fc:	72 e0       	ldi	r23, 0x02	; 2
 1fe:	87 e3       	ldi	r24, 0x37	; 55
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	e5 d0       	rcall	.+458    	; 0x3ce <strcmp>
 204:	89 2b       	or	r24, r25
			music_mode = 3;
 206:	d1 f4       	brne	.+52     	; 0x23c <__vector_30+0x110>
 208:	83 e0       	ldi	r24, 0x03	; 3
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 210:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			puts_USART1("Mode 3 selected\r\n");
 214:	88 e1       	ldi	r24, 0x18	; 24
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	7d df       	rcall	.-262    	; 0x114 <puts_USART1>
 21a:	10 c0       	rjmp	.+32     	; 0x23c <__vector_30+0x110>
		}
		} else {
		rx_buffer[rx_index++] = rx_data; // 버퍼에 데이터 추가
 21c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <__data_end>
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	8e 0f       	add	r24, r30
 224:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <__data_end>
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	e9 5c       	subi	r30, 0xC9	; 201
 22c:	fd 4f       	sbci	r31, 0xFD	; 253
 22e:	c0 83       	st	Z, r28
		if (rx_index >= sizeof(rx_buffer)) rx_index = 0; // 버퍼 오버플로우 방지
 230:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__data_end>
 234:	8a 30       	cpi	r24, 0x0A	; 10
 236:	10 f0       	brcs	.+4      	; 0x23c <__vector_30+0x110>
 238:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <__data_end>
	}
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	cf 91       	pop	r28
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0b be       	out	0x3b, r0	; 59
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <myDelay_us>:
		str++;
	}
}

void myDelay_us(unsigned long int delay)
{
 264:	ab 01       	movw	r20, r22
 266:	bc 01       	movw	r22, r24
	unsigned long int i;
	for (i = 0; i < delay; i++) _delay_us(1);
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	dc 01       	movw	r26, r24
 26e:	06 c0       	rjmp	.+12     	; 0x27c <myDelay_us+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	25 e0       	ldi	r18, 0x05	; 5
 272:	2a 95       	dec	r18
 274:	f1 f7       	brne	.-4      	; 0x272 <myDelay_us+0xe>
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	a1 1d       	adc	r26, r1
 27a:	b1 1d       	adc	r27, r1
 27c:	84 17       	cp	r24, r20
 27e:	95 07       	cpc	r25, r21
 280:	a6 07       	cpc	r26, r22
 282:	b7 07       	cpc	r27, r23
 284:	a8 f3       	brcs	.-22     	; 0x270 <myDelay_us+0xc>
 286:	08 95       	ret

00000288 <PlayMusic>:
		}
	}
}

void PlayMusic(int *notes, int *durs, int len)
{
 288:	af 92       	push	r10
 28a:	bf 92       	push	r11
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	5c 01       	movw	r10, r24
 29e:	6b 01       	movw	r12, r22
 2a0:	7a 01       	movw	r14, r20
	for (int i = 0; i < len; i++) {
 2a2:	00 e0       	ldi	r16, 0x00	; 0
 2a4:	10 e0       	ldi	r17, 0x00	; 0
 2a6:	28 c0       	rjmp	.+80     	; 0x2f8 <PlayMusic+0x70>
		if (!music_flag) break;
 2a8:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <music_flag>
 2ac:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <music_flag+0x1>
 2b0:	89 2b       	or	r24, r25
 2b2:	29 f1       	breq	.+74     	; 0x2fe <PlayMusic+0x76>
		unsigned long int duration = BASE_T / (unsigned long int)durs[i];
 2b4:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <BASE_T>
 2b8:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <BASE_T+0x1>
 2bc:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <BASE_T+0x2>
 2c0:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <BASE_T+0x3>
 2c4:	e8 01       	movw	r28, r16
 2c6:	cc 0f       	add	r28, r28
 2c8:	dd 1f       	adc	r29, r29
 2ca:	f6 01       	movw	r30, r12
 2cc:	ec 0f       	add	r30, r28
 2ce:	fd 1f       	adc	r31, r29
 2d0:	20 81       	ld	r18, Z
 2d2:	31 81       	ldd	r19, Z+1	; 0x01
 2d4:	03 2e       	mov	r0, r19
 2d6:	00 0c       	add	r0, r0
 2d8:	44 0b       	sbc	r20, r20
 2da:	55 0b       	sbc	r21, r21
 2dc:	56 d0       	rcall	.+172    	; 0x38a <__udivmodsi4>
		if (notes[i] != 0) MakeSound(notes[i]);
 2de:	ca 0d       	add	r28, r10
 2e0:	db 1d       	adc	r29, r11
 2e2:	88 81       	ld	r24, Y
 2e4:	99 81       	ldd	r25, Y+1	; 0x01
 2e6:	00 97       	sbiw	r24, 0x00	; 0
 2e8:	11 f0       	breq	.+4      	; 0x2ee <PlayMusic+0x66>
 2ea:	ee de       	rcall	.-548    	; 0xc8 <MakeSound>
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <PlayMusic+0x6c>
		else myDelay_us(duration);
 2ee:	ca 01       	movw	r24, r20
 2f0:	b9 01       	movw	r22, r18
 2f2:	b8 df       	rcall	.-144    	; 0x264 <myDelay_us>
	}
}

void PlayMusic(int *notes, int *durs, int len)
{
	for (int i = 0; i < len; i++) {
 2f4:	0f 5f       	subi	r16, 0xFF	; 255
 2f6:	1f 4f       	sbci	r17, 0xFF	; 255
 2f8:	0e 15       	cp	r16, r14
 2fa:	1f 05       	cpc	r17, r15
 2fc:	ac f2       	brlt	.-86     	; 0x2a8 <PlayMusic+0x20>
		if (!music_flag) break;
		unsigned long int duration = BASE_T / (unsigned long int)durs[i];
		if (notes[i] != 0) MakeSound(notes[i]);
		else myDelay_us(duration);
	}
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	df 90       	pop	r13
 30c:	cf 90       	pop	r12
 30e:	bf 90       	pop	r11
 310:	af 90       	pop	r10
 312:	08 95       	ret

00000314 <main>:
	}
}

int main(void)
{
	DDRG = 0xff; // PORTG를 출력으로 설정
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRD = 0x00; // PORTD를 입력으로 설정
 31a:	11 ba       	out	0x11, r1	; 17

	// Timer 1 설정
	TCCR1A = (1 << COM1A0); // Toggle OC1A on Compare Match
 31c:	80 e4       	ldi	r24, 0x40	; 64
 31e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM12) | (1 << CS10); // CTC mode, no prescaling
 320:	89 e0       	ldi	r24, 0x09	; 9
 322:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0; // Compare Match 값 초기화
 324:	1b bc       	out	0x2b, r1	; 43
 326:	1a bc       	out	0x2a, r1	; 42

	Init_USART1();
 328:	de de       	rcall	.-580    	; 0xe6 <Init_USART1>
	sei(); // 전체 인터럽트를 활성화
 32a:	78 94       	sei

	puts_USART1("Start \r\n");
 32c:	8a e2       	ldi	r24, 0x2A	; 42
 32e:	92 e0       	ldi	r25, 0x02	; 2
 330:	f1 de       	rcall	.-542    	; 0x114 <puts_USART1>

	while (1)
	{
		if (music_flag) {
 332:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <music_flag>
 336:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <music_flag+0x1>
 33a:	89 2b       	or	r24, r25
 33c:	21 f1       	breq	.+72     	; 0x386 <main+0x72>
			switch (music_mode) {
 33e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 342:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	91 05       	cpc	r25, r1
 34a:	69 f0       	breq	.+26     	; 0x366 <main+0x52>
 34c:	83 30       	cpi	r24, 0x03	; 3
 34e:	91 05       	cpc	r25, r1
 350:	91 f0       	breq	.+36     	; 0x376 <main+0x62>
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	71 f7       	brne	.-36     	; 0x332 <main+0x1e>
				case 1:
				PlayMusic(NOTE1, DUR1, sizeof(NOTE1) / sizeof(int));
 356:	4a e1       	ldi	r20, 0x1A	; 26
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	6e e5       	ldi	r22, 0x5E	; 94
 35c:	71 e0       	ldi	r23, 0x01	; 1
 35e:	82 e9       	ldi	r24, 0x92	; 146
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	92 df       	rcall	.-220    	; 0x288 <PlayMusic>
				break;
 364:	e6 cf       	rjmp	.-52     	; 0x332 <main+0x1e>
				case 2:
				PlayMusic(NOTE2, DUR2, sizeof(NOTE2) / sizeof(int));
 366:	49 e0       	ldi	r20, 0x09	; 9
 368:	50 e0       	ldi	r21, 0x00	; 0
 36a:	6a e3       	ldi	r22, 0x3A	; 58
 36c:	71 e0       	ldi	r23, 0x01	; 1
 36e:	8c e4       	ldi	r24, 0x4C	; 76
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	8a df       	rcall	.-236    	; 0x288 <PlayMusic>
				break;
 374:	de cf       	rjmp	.-68     	; 0x332 <main+0x1e>
				case 3:
				PlayMusic(NOTE3, DUR3, sizeof(NOTE3) / sizeof(int));
 376:	4e e0       	ldi	r20, 0x0E	; 14
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	71 e0       	ldi	r23, 0x01	; 1
 37e:	8e e1       	ldi	r24, 0x1E	; 30
 380:	91 e0       	ldi	r25, 0x01	; 1
				break;
 382:	82 df       	rcall	.-252    	; 0x288 <PlayMusic>
			}
			} else {
			StopSound(); // 음악 멈추기
 384:	d6 cf       	rjmp	.-84     	; 0x332 <main+0x1e>
 386:	ab de       	rcall	.-682    	; 0xde <StopSound>
 388:	d4 cf       	rjmp	.-88     	; 0x332 <main+0x1e>

0000038a <__udivmodsi4>:
 38a:	a1 e2       	ldi	r26, 0x21	; 33
 38c:	1a 2e       	mov	r1, r26
 38e:	aa 1b       	sub	r26, r26
 390:	bb 1b       	sub	r27, r27
 392:	fd 01       	movw	r30, r26
 394:	0d c0       	rjmp	.+26     	; 0x3b0 <__udivmodsi4_ep>

00000396 <__udivmodsi4_loop>:
 396:	aa 1f       	adc	r26, r26
 398:	bb 1f       	adc	r27, r27
 39a:	ee 1f       	adc	r30, r30
 39c:	ff 1f       	adc	r31, r31
 39e:	a2 17       	cp	r26, r18
 3a0:	b3 07       	cpc	r27, r19
 3a2:	e4 07       	cpc	r30, r20
 3a4:	f5 07       	cpc	r31, r21
 3a6:	20 f0       	brcs	.+8      	; 0x3b0 <__udivmodsi4_ep>
 3a8:	a2 1b       	sub	r26, r18
 3aa:	b3 0b       	sbc	r27, r19
 3ac:	e4 0b       	sbc	r30, r20
 3ae:	f5 0b       	sbc	r31, r21

000003b0 <__udivmodsi4_ep>:
 3b0:	66 1f       	adc	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	88 1f       	adc	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	1a 94       	dec	r1
 3ba:	69 f7       	brne	.-38     	; 0x396 <__udivmodsi4_loop>
 3bc:	60 95       	com	r22
 3be:	70 95       	com	r23
 3c0:	80 95       	com	r24
 3c2:	90 95       	com	r25
 3c4:	9b 01       	movw	r18, r22
 3c6:	ac 01       	movw	r20, r24
 3c8:	bd 01       	movw	r22, r26
 3ca:	cf 01       	movw	r24, r30
 3cc:	08 95       	ret

000003ce <strcmp>:
 3ce:	fb 01       	movw	r30, r22
 3d0:	dc 01       	movw	r26, r24
 3d2:	8d 91       	ld	r24, X+
 3d4:	01 90       	ld	r0, Z+
 3d6:	80 19       	sub	r24, r0
 3d8:	01 10       	cpse	r0, r1
 3da:	d9 f3       	breq	.-10     	; 0x3d2 <strcmp+0x4>
 3dc:	99 0b       	sbc	r25, r25
 3de:	08 95       	ret

000003e0 <_exit>:
 3e0:	f8 94       	cli

000003e2 <__stop_program>:
 3e2:	ff cf       	rjmp	.-2      	; 0x3e2 <__stop_program>
