
final3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000178  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091d  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000837  00000000  00000000  00000be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c9  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e0  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000142  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__vector_30>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 33       	cpi	r26, 0x34	; 52
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e d0       	rcall	.+28     	; 0xd0 <main>
  b4:	5f c0       	rjmp	.+190    	; 0x174 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <Init_USART1>:
}

// USART1 초기화 함수
void Init_USART1()
{
	UCSR1B |= (1 << RXCIE); // RXCIE 비트 (수신 완료 인터럽트 활성화)
  b8:	ea e9       	ldi	r30, 0x9A	; 154
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN) | (1 << TXEN); // RXEN, TXEN 설정 (수신, 송신 활성화)
  c2:	80 81       	ld	r24, Z
  c4:	88 61       	ori	r24, 0x18	; 24
  c6:	80 83       	st	Z, r24
	UBRR1L = 95; // Baud Rate 설정 (9600bps 기준)
  c8:	8f e5       	ldi	r24, 0x5F	; 95
  ca:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  ce:	08 95       	ret

000000d0 <main>:
}


int main(void)
{
	DDRG = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRB = 0xff; // 포트 B를 출력으로 설정
  d6:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff; // 포트 E를 출력으로 설정
  d8:	82 b9       	out	0x02, r24	; 2
	
	Init_USART1(); // USART1 초기화
  da:	ee df       	rcall	.-36     	; 0xb8 <Init_USART1>
	sei(); // 글로벌 인터럽트 활성화
  dc:	78 94       	sei
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0xe>

000000e0 <putchar_USART1>:

// USART1 송신 함수 (한 문자)
void putchar_USART1(char data)
{
	while(1) {
		if (UCSR1A & (1 << UDRE)) { // UDRE 비트 확인 (송신 버퍼가 비어있는지 확인)
  e0:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  e4:	95 ff       	sbrs	r25, 5
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <putchar_USART1>
			UDR1 = data; // 송신 데이터를 UDR1 레지스터에 저장
  e8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  ec:	08 95       	ret

000000ee <puts_USART1>:
	}
}

// USART1 송신 함수 (문자열)
void puts_USART1(char *str)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	while (*str != 0) { // 문자열의 끝을 만날 때까지
  f4:	02 c0       	rjmp	.+4      	; 0xfa <puts_USART1+0xc>
		putchar_USART1(*str); // 한 문자씩 송신
  f6:	f4 df       	rcall	.-24     	; 0xe0 <putchar_USART1>
		str++; // 다음 문자로 이동
  f8:	21 96       	adiw	r28, 0x01	; 1
}

// USART1 송신 함수 (문자열)
void puts_USART1(char *str)
{
	while (*str != 0) { // 문자열의 끝을 만날 때까지
  fa:	88 81       	ld	r24, Y
  fc:	81 11       	cpse	r24, r1
  fe:	fb cf       	rjmp	.-10     	; 0xf6 <puts_USART1+0x8>
		putchar_USART1(*str); // 한 문자씩 송신
		str++; // 다음 문자로 이동
	}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <__vector_30>:
void putchar_USART1(char data);
void puts_USART1(char *str);

// UART1 수신 인터럽트 서비스 루틴
ISR(USART1_RX_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	0b b6       	in	r0, 0x3b	; 59
 112:	0f 92       	push	r0
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	cf 93       	push	r28
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	char rx_data; // 수신된 데이터를 저장할 변수
	rx_data = UDR1; // UDR1 레지스터에서 수신 데이터를 읽음
 12e:	c0 91 9c 00 	lds	r28, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	putchar_USART1(rx_data); // 에코(수신된 데이터를 다시 송신)
 132:	8c 2f       	mov	r24, r28
 134:	d5 df       	rcall	.-86     	; 0xe0 <putchar_USART1>

	if (rx_data == '\r'){ // 수신된 데이터가 캐리지 리턴(엔터키)인 경우
 136:	cd 30       	cpi	r28, 0x0D	; 13
 138:	49 f4       	brne	.+18     	; 0x14c <__vector_30+0x46>
		puts_USART1("\r\n #################### \r\n");
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	d7 df       	rcall	.-82     	; 0xee <puts_USART1>
		puts_USART1("\r\n ##ATmega128 Ready \r\n");
 140:	8b e1       	ldi	r24, 0x1B	; 27
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	d4 df       	rcall	.-88     	; 0xee <puts_USART1>
		puts_USART1("\r\n #################### \r\n");
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	d1 df       	rcall	.-94     	; 0xee <puts_USART1>
 14c:	ff 91       	pop	r31
	}
}
 14e:	ef 91       	pop	r30
 150:	cf 91       	pop	r28
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0b be       	out	0x3b, r0	; 59
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
