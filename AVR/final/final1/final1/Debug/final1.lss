
final1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000236  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b0f  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d0  00000000  00000000  00000ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000442  00000000  00000000  00001777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046d  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000299  00000000  00000000  00002129  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000023c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	63 c0       	rjmp	.+198    	; 0x140 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	81 d0       	rcall	.+258    	; 0x1c6 <main>
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <myDelay_us>:
int PushButtonDet(int number)
{
	if (((~PIND >> number) & 0x1) == 1)		return 1;
	
	else                                    return 0;
}
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <myDelay_us+0x10>
  ce:	45 e0       	ldi	r20, 0x05	; 5
  d0:	4a 95       	dec	r20
  d2:	f1 f7       	brne	.-4      	; 0xd0 <myDelay_us+0x8>
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	28 17       	cp	r18, r24
  da:	39 07       	cpc	r19, r25
  dc:	c0 f3       	brcs	.-16     	; 0xce <myDelay_us+0x6>
  de:	e5 e6       	ldi	r30, 0x65	; 101
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <MakeSound>:
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	8c 01       	movw	r16, r24
  f4:	15 95       	asr	r17
  f6:	07 95       	ror	r16
  f8:	c5 e6       	ldi	r28, 0x65	; 101
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	88 81       	ld	r24, Y
  fe:	80 61       	ori	r24, 0x10	; 16
 100:	88 83       	st	Y, r24
 102:	c8 01       	movw	r24, r16
 104:	e1 df       	rcall	.-62     	; 0xc8 <myDelay_us>
 106:	88 81       	ld	r24, Y
 108:	8f 7e       	andi	r24, 0xEF	; 239
 10a:	88 83       	st	Y, r24
 10c:	c8 01       	movw	r24, r16
 10e:	dc df       	rcall	.-72     	; 0xc8 <myDelay_us>
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	08 95       	ret

0000011a <Init_USART1>:

// USART1 초기화 함수
void Init_USART1()
{
	UCSR1B |= (1 << RXCIE); // RXCIE 비트 (수신 완료 인터럽트 활성화)
 11a:	ea e9       	ldi	r30, 0x9A	; 154
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 68       	ori	r24, 0x80	; 128
 122:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN) | (1 << TXEN); // RXEN, TXEN 설정 (수신, 송신 활성화)
 124:	80 81       	ld	r24, Z
 126:	88 61       	ori	r24, 0x18	; 24
 128:	80 83       	st	Z, r24
	UBRR1L = 95; // Baud Rate 설정 (9600bps 기준)
 12a:	8f e5       	ldi	r24, 0x5F	; 95
 12c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 130:	08 95       	ret

00000132 <putchar_USART1>:

// USART1 송신 함수 (한 문자)
void putchar_USART1(char data)
{
	while(1) {
		if (UCSR1A & (1 << UDRE)) { // UDRE 비트 확인 (송신 버퍼가 비어있는지 확인)
 132:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 136:	95 ff       	sbrs	r25, 5
 138:	fc cf       	rjmp	.-8      	; 0x132 <putchar_USART1>
			UDR1 = data; // 송신 데이터를 UDR1 레지스터에 저장
 13a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 13e:	08 95       	ret

00000140 <__vector_30>:
// 전역 변수 선언
char RXNUM = 0; // 입력받은 숫자

// UART1 수신 인터럽트 서비스 루틴
ISR(USART1_RX_vect)
{	
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	0b b6       	in	r0, 0x3b	; 59
 14c:	0f 92       	push	r0
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	cf 93       	push	r28
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	char rx_data; // 수신된 데이터를 저장할 변수
	rx_data = UDR1; // UDR1 레지스터에서 수신 데이터를 읽음
 168:	c0 91 9c 00 	lds	r28, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	putchar_USART1(rx_data); // 에코(수신된 데이터를 다시 송신)
 16c:	8c 2f       	mov	r24, r28
 16e:	e1 df       	rcall	.-62     	; 0x132 <putchar_USART1>

	if (rx_data == '\r'){ // 수신된 데이터가 캐리지 리턴(엔터키)인 경우
 170:	cd 30       	cpi	r28, 0x0D	; 13
 172:	19 f4       	brne	.+6      	; 0x17a <__vector_30+0x3a>
		putchar_USART1('\n'); // 줄 바꿈 문자를 송신
 174:	8a e0       	ldi	r24, 0x0A	; 10
 176:	dd df       	rcall	.-70     	; 0x132 <putchar_USART1>
 178:	06 c0       	rjmp	.+12     	; 0x186 <__vector_30+0x46>
	}
	
	else if ((rx_data >= '1') & (rx_data <= '7')) { // 수신된 데이터가 숫자인 경우
 17a:	8f ec       	ldi	r24, 0xCF	; 207
 17c:	8c 0f       	add	r24, r28
 17e:	87 30       	cpi	r24, 0x07	; 7
 180:	10 f4       	brcc	.+4      	; 0x186 <__vector_30+0x46>
		RXNUM = rx_data;
 182:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <__data_end>
		}
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	cf 91       	pop	r28
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0b be       	out	0x3b, r0	; 59
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <puts_USART1>:
	}
}

// USART1 송신 함수 (문자열)
void puts_USART1(char *str)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
	while (*str != 0) { // 문자열의 끝을 만날 때까지
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <puts_USART1+0xc>
		putchar_USART1(*str); // 한 문자씩 송신
 1b6:	bd df       	rcall	.-134    	; 0x132 <putchar_USART1>
		str++; // 다음 문자로 이동
 1b8:	21 96       	adiw	r28, 0x01	; 1
}

// USART1 송신 함수 (문자열)
void puts_USART1(char *str)
{
	while (*str != 0) { // 문자열의 끝을 만날 때까지
 1ba:	88 81       	ld	r24, Y
 1bc:	81 11       	cpse	r24, r1
 1be:	fb cf       	rjmp	.-10     	; 0x1b6 <puts_USART1+0x8>
		putchar_USART1(*str); // 한 문자씩 송신
		str++; // 다음 문자로 이동
	}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <main>:
}


int main(void)
{
	DDRG = 0xff;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRB = 0xff; // 포트 B를 출력으로 설정
 1cc:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff; // 포트 E를 출력으로 설정
 1ce:	82 b9       	out	0x02, r24	; 2
	
	Init_USART1(); // USART1 초기화
 1d0:	a4 df       	rcall	.-184    	; 0x11a <Init_USART1>
	sei(); // 글로벌 인터럽트 활성화
 1d2:	78 94       	sei
	
	puts_USART1("Start \r\n"); // "Start \r\n" 메시지 송신
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	ea df       	rcall	.-44     	; 0x1ae <puts_USART1>

	/* Replace with your application code */
	while (1)
	{
		if(RXNUM == '1')		MakeSound(DO);
 1da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1de:	81 33       	cpi	r24, 0x31	; 49
 1e0:	21 f4       	brne	.+8      	; 0x1ea <main+0x24>
 1e2:	89 ee       	ldi	r24, 0xE9	; 233
 1e4:	9e e0       	ldi	r25, 0x0E	; 14
 1e6:	81 df       	rcall	.-254    	; 0xea <MakeSound>
 1e8:	f8 cf       	rjmp	.-16     	; 0x1da <main+0x14>
		else if(RXNUM == '2')	MakeSound(RE);
 1ea:	82 33       	cpi	r24, 0x32	; 50
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <main+0x30>
 1ee:	89 e4       	ldi	r24, 0x49	; 73
 1f0:	9d e0       	ldi	r25, 0x0D	; 13
 1f2:	7b df       	rcall	.-266    	; 0xea <MakeSound>
 1f4:	f2 cf       	rjmp	.-28     	; 0x1da <main+0x14>
		else if(RXNUM == '3')	MakeSound(MI);
 1f6:	83 33       	cpi	r24, 0x33	; 51
 1f8:	21 f4       	brne	.+8      	; 0x202 <main+0x3c>
 1fa:	86 ed       	ldi	r24, 0xD6	; 214
 1fc:	9b e0       	ldi	r25, 0x0B	; 11
 1fe:	75 df       	rcall	.-278    	; 0xea <MakeSound>
		else if(RXNUM == '4')	MakeSound(FA);
 200:	ec cf       	rjmp	.-40     	; 0x1da <main+0x14>
 202:	84 33       	cpi	r24, 0x34	; 52
 204:	21 f4       	brne	.+8      	; 0x20e <main+0x48>
 206:	81 e3       	ldi	r24, 0x31	; 49
 208:	9b e0       	ldi	r25, 0x0B	; 11
 20a:	6f df       	rcall	.-290    	; 0xea <MakeSound>
		else if(RXNUM == '5')	MakeSound(SOL);
 20c:	e6 cf       	rjmp	.-52     	; 0x1da <main+0x14>
 20e:	85 33       	cpi	r24, 0x35	; 53
 210:	21 f4       	brne	.+8      	; 0x21a <main+0x54>
 212:	87 ef       	ldi	r24, 0xF7	; 247
 214:	99 e0       	ldi	r25, 0x09	; 9
 216:	69 df       	rcall	.-302    	; 0xea <MakeSound>
		else if(RXNUM == '6')	MakeSound(LA);
 218:	e0 cf       	rjmp	.-64     	; 0x1da <main+0x14>
 21a:	86 33       	cpi	r24, 0x36	; 54
 21c:	21 f4       	brne	.+8      	; 0x226 <main+0x60>
 21e:	81 ee       	ldi	r24, 0xE1	; 225
 220:	98 e0       	ldi	r25, 0x08	; 8
 222:	63 df       	rcall	.-314    	; 0xea <MakeSound>
		else if(RXNUM == '7')	MakeSound(SI);
 224:	da cf       	rjmp	.-76     	; 0x1da <main+0x14>
 226:	87 33       	cpi	r24, 0x37	; 55
 228:	c1 f6       	brne	.-80     	; 0x1da <main+0x14>
 22a:	88 ee       	ldi	r24, 0xE8	; 232
 22c:	97 e0       	ldi	r25, 0x07	; 7
 22e:	5d df       	rcall	.-326    	; 0xea <MakeSound>
 230:	d4 cf       	rjmp	.-88     	; 0x1da <main+0x14>

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
