
final2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000400  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000400  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800138  00800138  000004cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca4  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f8  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ec  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00002020  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000464  00000000  00000000  00002605  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002a69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	0b c1       	rjmp	.+534    	; 0x290 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 33       	cpi	r26, 0x38	; 56
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e3       	ldi	r26, 0x38	; 56
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 35       	cpi	r26, 0x50	; 80
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	73 d0       	rcall	.+230    	; 0x1aa <main>
  c4:	9b c1       	rjmp	.+822    	; 0x3fc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <timer0_init>:

// 타이머0 초기화 함수
void timer0_init()
{
	// CTC (Clear Timer on Compare Match) 모드 설정
	TCCR0 |= (1 << WGM01) | (0 << WGM00);
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0; // 타이머 카운터 초기화
  ce:	12 be       	out	0x32, r1	; 50
	OCR0 = 36; // 출력 비교 레지스터 설정 (타이머가 이 값에 도달하면 비교 인터럽트 발생)
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	81 bf       	out	0x31, r24	; 49
	
	// 출력 비교 일치 인터럽트 활성화
	TIMSK |= (1 << OCIE0);
  d4:	87 b7       	in	r24, 0x37	; 55
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	87 bf       	out	0x37, r24	; 55
	
	// 프리스케일러 설정 (1024)
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);
  da:	83 b7       	in	r24, 0x33	; 51
  dc:	87 60       	ori	r24, 0x07	; 7
  de:	83 bf       	out	0x33, r24	; 51
  e0:	08 95       	ret

000000e2 <__vector_15>:
}

// 타이머0 비교 일치 인터럽트 서비스 루틴
ISR (TIMER0_COMP_vect) // 2.5ms 마다 호출 ※ ISR에서는 최소한의 작업만 할 것
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	SegIdx++;
  f0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <SegIdx>
  f4:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <SegIdx+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <SegIdx+0x1>
  fe:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <SegIdx>
	if (SegIdx == 4)	SegIdx = 0;
 102:	04 97       	sbiw	r24, 0x04	; 4
 104:	21 f4       	brne	.+8      	; 0x10e <__vector_15+0x2c>
 106:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <SegIdx+0x1>
 10a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <SegIdx>
	
	// FND_Display(SegIdx, SegIdx, 0);	// CPU를 덜 부하시키는 방법 1 -> 그닥 효율적이진 않음
	
	SegChangeFlag = 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <SegChangeFlag+0x1>
 116:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <SegChangeFlag>
}
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <Init_USART1>:

// USART1 초기화 함수
void Init_USART1()
{
	UCSR1B |= (1 << RXCIE); // RXCIE 비트 (수신 완료 인터럽트 활성화)
 128:	ea e9       	ldi	r30, 0x9A	; 154
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN) | (1 << TXEN); // RXEN, TXEN 설정 (수신, 송신 활성화)
 132:	80 81       	ld	r24, Z
 134:	88 61       	ori	r24, 0x18	; 24
 136:	80 83       	st	Z, r24
	UBRR1L = 95; // Baud Rate 설정 (9600bps 기준)
 138:	8f e5       	ldi	r24, 0x5F	; 95
 13a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 13e:	08 95       	ret

00000140 <putchar_USART1>:

// USART1 송신 함수 (한 문자)
void putchar_USART1(char data)
{
	while(1) {
		if (UCSR1A & (1 << UDRE)) { // UDRE 비트 확인 (송신 버퍼가 비어있는지 확인)
 140:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 144:	95 ff       	sbrs	r25, 5
 146:	fc cf       	rjmp	.-8      	; 0x140 <putchar_USART1>
			UDR1 = data; // 송신 데이터를 UDR1 레지스터에 저장
 148:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 14c:	08 95       	ret

0000014e <puts_USART1>:
	}
}

// USART1 송신 함수 (문자열)
void puts_USART1(char *str)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	ec 01       	movw	r28, r24
	while (*str != 0) { // 문자열의 끝을 만날 때까지
 154:	02 c0       	rjmp	.+4      	; 0x15a <puts_USART1+0xc>
		putchar_USART1(*str); // 한 문자씩 송신
 156:	f4 df       	rcall	.-24     	; 0x140 <putchar_USART1>
		str++; // 다음 문자로 이동
 158:	21 96       	adiw	r28, 0x01	; 1
}

// USART1 송신 함수 (문자열)
void puts_USART1(char *str)
{
	while (*str != 0) { // 문자열의 끝을 만날 때까지
 15a:	88 81       	ld	r24, Y
 15c:	81 11       	cpse	r24, r1
 15e:	fb cf       	rjmp	.-10     	; 0x156 <puts_USART1+0x8>
		putchar_USART1(*str); // 한 문자씩 송신
		str++; // 다음 문자로 이동
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <FND_Display>:

void FND_Display(int idx, int number, int dot){
	if (idx == 3)		PORTE = 0x10;
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	91 05       	cpc	r25, r1
 16a:	19 f4       	brne	.+6      	; 0x172 <FND_Display+0xc>
 16c:	80 e1       	ldi	r24, 0x10	; 16
 16e:	83 b9       	out	0x03, r24	; 3
 170:	10 c0       	rjmp	.+32     	; 0x192 <FND_Display+0x2c>
	else if (idx == 2)	PORTE = 0x20;
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	91 05       	cpc	r25, r1
 176:	19 f4       	brne	.+6      	; 0x17e <FND_Display+0x18>
 178:	80 e2       	ldi	r24, 0x20	; 32
 17a:	83 b9       	out	0x03, r24	; 3
 17c:	0a c0       	rjmp	.+20     	; 0x192 <FND_Display+0x2c>
	else if (idx == 1)	PORTE = 0x40;
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 05       	cpc	r25, r1
 182:	19 f4       	brne	.+6      	; 0x18a <FND_Display+0x24>
 184:	80 e4       	ldi	r24, 0x40	; 64
 186:	83 b9       	out	0x03, r24	; 3
 188:	04 c0       	rjmp	.+8      	; 0x192 <FND_Display+0x2c>
	else if (idx == 0)	PORTE = 0x80;
 18a:	89 2b       	or	r24, r25
 18c:	11 f4       	brne	.+4      	; 0x192 <FND_Display+0x2c>
 18e:	80 e8       	ldi	r24, 0x80	; 128
 190:	83 b9       	out	0x03, r24	; 3
	
	PORTB = Port_char[number];
 192:	fb 01       	movw	r30, r22
 194:	e0 50       	subi	r30, 0x00	; 0
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	80 81       	ld	r24, Z
 19a:	88 bb       	out	0x18, r24	; 24
	
	if (dot == 1)		PORTB = PORTB & 0x7f;
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	51 05       	cpc	r21, r1
 1a0:	19 f4       	brne	.+6      	; 0x1a8 <FND_Display+0x42>
 1a2:	88 b3       	in	r24, 0x18	; 24
 1a4:	8f 77       	andi	r24, 0x7F	; 127
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	08 95       	ret

000001aa <main>:
}


int main(void)
{
	DDRB = 0xff;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff;
 1ae:	82 b9       	out	0x02, r24	; 2
	
	PORTB = 0xff;
 1b0:	88 bb       	out	0x18, r24	; 24
	PORTE = 0x80;
 1b2:	80 e8       	ldi	r24, 0x80	; 128
 1b4:	83 b9       	out	0x03, r24	; 3
	
	Init_USART1();
 1b6:	b8 df       	rcall	.-144    	; 0x128 <Init_USART1>
	timer0_init();
 1b8:	87 df       	rcall	.-242    	; 0xc8 <timer0_init>
 1ba:	78 94       	sei
	sei(); // UART나 Interrupt 다 포함해서 만들기 위해 사용
 1bc:	81 e1       	ldi	r24, 0x11	; 17

	puts_USART1("\r\n Timer Program \r\n");
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	c6 df       	rcall	.-116    	; 0x14e <puts_USART1>
 1c2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SegChangeFlag>
	
	while (1)
	{
		if(SegChangeFlag) { // 세그먼트 변경 플래그가 설정된 경우
 1c6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SegChangeFlag+0x1>
 1ca:	89 2b       	or	r24, r25
 1cc:	d1 f3       	breq	.-12     	; 0x1c2 <main+0x18>
 1ce:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <SegIdx>
			FND_Display(SegIdx, SegNumber[SegIdx], 0); // 현재 세그먼트에 숫자를 표시
 1d2:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <SegIdx+0x1>
 1d6:	fc 01       	movw	r30, r24
 1d8:	ee 0f       	add	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	ec 5b       	subi	r30, 0xBC	; 188
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	60 81       	ld	r22, Z
 1e2:	71 81       	ldd	r23, Z+1	; 0x01
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	be df       	rcall	.-132    	; 0x166 <FND_Display>
 1ea:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <SegChangeFlag+0x1>
			SegChangeFlag = 0; // 세그먼트 변경 플래그를 리셋
 1ee:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <SegChangeFlag>
 1f2:	e7 cf       	rjmp	.-50     	; 0x1c2 <main+0x18>

000001f4 <FND_Timer>:
 1f4:	ef 92       	push	r14
	PORTB = Port_char[number];
	
	if (dot == 1)		PORTB = PORTB & 0x7f;
}

void FND_Timer(int time){
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
	int buffer = 0;
	
	FND_Display(0, time / 1000, 0);
 200:	68 ee       	ldi	r22, 0xE8	; 232
 202:	73 e0       	ldi	r23, 0x03	; 3
 204:	d4 d0       	rcall	.+424    	; 0x3ae <__divmodhi4>
 206:	ec 01       	movw	r28, r24
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	aa df       	rcall	.-172    	; 0x166 <FND_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	93 e2       	ldi	r25, 0x23	; 35
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <FND_Timer+0x22>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <FND_Timer+0x28>
 21c:	00 00       	nop
	buffer= time%1000;
	_delay_ms(2.5);
	
	FND_Display(1, buffer / 100, 0);
 21e:	04 e6       	ldi	r16, 0x64	; 100
 220:	10 e0       	ldi	r17, 0x00	; 0
 222:	ce 01       	movw	r24, r28
 224:	b8 01       	movw	r22, r16
 226:	c3 d0       	rcall	.+390    	; 0x3ae <__divmodhi4>
 228:	7c 01       	movw	r14, r24
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	99 df       	rcall	.-206    	; 0x166 <FND_Display>
 234:	ef ef       	ldi	r30, 0xFF	; 255
 236:	f3 e2       	ldi	r31, 0x23	; 35
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <FND_Timer+0x44>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <FND_Timer+0x4a>
 23e:	00 00       	nop
	buffer= buffer%100;
	_delay_ms(2.5);
	
	FND_Display(2, buffer / 10 , 1);
 240:	ca e0       	ldi	r28, 0x0A	; 10
 242:	d0 e0       	ldi	r29, 0x00	; 0
 244:	c7 01       	movw	r24, r14
 246:	be 01       	movw	r22, r28
 248:	b2 d0       	rcall	.+356    	; 0x3ae <__divmodhi4>
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	90 e0       	ldi	r25, 0x00	; 0
	buffer= buffer%100;
 252:	89 df       	rcall	.-238    	; 0x166 <FND_Display>
 254:	c7 01       	movw	r24, r14
 256:	b8 01       	movw	r22, r16
 258:	aa d0       	rcall	.+340    	; 0x3ae <__divmodhi4>
 25a:	ef ef       	ldi	r30, 0xFF	; 255
 25c:	f3 e2       	ldi	r31, 0x23	; 35
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <FND_Timer+0x6a>
 262:	00 c0       	rjmp	.+0      	; 0x264 <FND_Timer+0x70>
	_delay_ms(2.5);
	
	FND_Display(3, buffer % 10, 0);
 264:	00 00       	nop
 266:	be 01       	movw	r22, r28
 268:	a2 d0       	rcall	.+324    	; 0x3ae <__divmodhi4>
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	bc 01       	movw	r22, r24
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	78 df       	rcall	.-272    	; 0x166 <FND_Display>
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	93 e2       	ldi	r25, 0x23	; 35
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <FND_Timer+0x86>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <FND_Timer+0x8c>
 280:	00 00       	nop
	_delay_ms(2.5);
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	ef 90       	pop	r14
 28e:	08 95       	ret

00000290 <__vector_30>:
int RXCNT = 0; // 입력받은 숫자의 개수 카운트
int time_count = 0;

// UART1 수신 인터럽트 서비스 루틴
ISR(USART1_RX_vect)
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	0b b6       	in	r0, 0x3b	; 59
 29c:	0f 92       	push	r0
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	cf 93       	push	r28
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	char rx_data; // 수신된 데이터를 저장할 변수
	rx_data = UDR1; // UDR1 레지스터에서 수신 데이터를 읽음
 2b8:	c0 91 9c 00 	lds	r28, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	putchar_USART1(rx_data); // 에코(수신된 데이터를 다시 송신)
 2bc:	8c 2f       	mov	r24, r28
 2be:	40 df       	rcall	.-384    	; 0x140 <putchar_USART1>

	if (rx_data == '\r'){ // 수신된 데이터가 엔터키인 경우
 2c0:	cd 30       	cpi	r28, 0x0D	; 13
 2c2:	81 f5       	brne	.+96     	; 0x324 <__vector_30+0x94>
 2c4:	23 c0       	rjmp	.+70     	; 0x30c <__vector_30+0x7c>
		for (int i = 0; i < 4; i++) {
			if (i < RXCNT) {
 2c6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <RXCNT>
 2ca:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <RXCNT+0x1>
 2ce:	28 17       	cp	r18, r24
 2d0:	39 07       	cpc	r19, r25
 2d2:	94 f4       	brge	.+36     	; 0x2f8 <__vector_30+0x68>
				SegNumber[i] = RXNUM[RXCNT - 1- i]; // 오른쪽에서 왼쪽으로 숫자를 채움
 2d4:	fc 01       	movw	r30, r24
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	e2 1b       	sub	r30, r18
 2da:	f3 0b       	sbc	r31, r19
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	e4 5c       	subi	r30, 0xC4	; 196
 2e2:	fe 4f       	sbci	r31, 0xFE	; 254
 2e4:	80 81       	ld	r24, Z
 2e6:	91 81       	ldd	r25, Z+1	; 0x01
 2e8:	f9 01       	movw	r30, r18
 2ea:	ee 0f       	add	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	ec 5b       	subi	r30, 0xBC	; 188
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	91 83       	std	Z+1, r25	; 0x01
 2f4:	80 83       	st	Z, r24
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <__vector_30+0x76>
			}
			else {
				SegNumber[i] = 0; // 나머지 자리는 0으로 채움
 2f8:	f9 01       	movw	r30, r18
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	ec 5b       	subi	r30, 0xBC	; 188
 300:	fe 4f       	sbci	r31, 0xFE	; 254
 302:	11 82       	std	Z+1, r1	; 0x01
 304:	10 82       	st	Z, r1
	char rx_data; // 수신된 데이터를 저장할 변수
	rx_data = UDR1; // UDR1 레지스터에서 수신 데이터를 읽음
	putchar_USART1(rx_data); // 에코(수신된 데이터를 다시 송신)

	if (rx_data == '\r'){ // 수신된 데이터가 엔터키인 경우
		for (int i = 0; i < 4; i++) {
 306:	2f 5f       	subi	r18, 0xFF	; 255
 308:	3f 4f       	sbci	r19, 0xFF	; 255
 30a:	02 c0       	rjmp	.+4      	; 0x310 <__vector_30+0x80>
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	24 30       	cpi	r18, 0x04	; 4
 312:	31 05       	cpc	r19, r1
 314:	c4 f2       	brlt	.-80     	; 0x2c6 <__vector_30+0x36>
			}
			else {
				SegNumber[i] = 0; // 나머지 자리는 0으로 채움
			}
		}
		RXCNT = 0; // 입력 카운트를 리셋
 316:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <RXCNT+0x1>
 31a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <RXCNT>
		putchar_USART1('\n'); // 줄 바꿈 문자를 송신
 31e:	8a e0       	ldi	r24, 0x0A	; 10
 320:	0f df       	rcall	.-482    	; 0x140 <putchar_USART1>
 322:	31 c0       	rjmp	.+98     	; 0x386 <__vector_30+0xf6>
	}
	else if ((rx_data >= '0') & (rx_data <= '9')) { // 수신된 데이터가 숫자인 경우
 324:	80 ed       	ldi	r24, 0xD0	; 208
 326:	8c 0f       	add	r24, r28
 328:	8a 30       	cpi	r24, 0x0A	; 10
 32a:	c0 f4       	brcc	.+48     	; 0x35c <__vector_30+0xcc>
		if (RXCNT < 4) { // 입력받은 숫자가 4개 미만인 경우
 32c:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <RXCNT>
 330:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <RXCNT+0x1>
 334:	24 30       	cpi	r18, 0x04	; 4
 336:	31 05       	cpc	r19, r1
 338:	34 f5       	brge	.+76     	; 0x386 <__vector_30+0xf6>
			RXNUM[RXCNT] = rx_data - '0'; // 숫자를 RXNUM 배열에 저장
 33a:	8c 2f       	mov	r24, r28
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	c0 97       	sbiw	r24, 0x30	; 48
 340:	f9 01       	movw	r30, r18
 342:	ee 0f       	add	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	e4 5c       	subi	r30, 0xC4	; 196
 348:	fe 4f       	sbci	r31, 0xFE	; 254
 34a:	91 83       	std	Z+1, r25	; 0x01
 34c:	80 83       	st	Z, r24
			RXCNT++; // 입력 카운트를 증가
 34e:	2f 5f       	subi	r18, 0xFF	; 255
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <RXCNT+0x1>
 356:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <RXCNT>
 35a:	15 c0       	rjmp	.+42     	; 0x386 <__vector_30+0xf6>
		}
	}
	else if (rx_data == 'S') { // 수신된 데이터가 'S'인 경우
 35c:	c3 35       	cpi	r28, 0x53	; 83
 35e:	71 f4       	brne	.+28     	; 0x37c <__vector_30+0xec>
		if (time_count > 0)				FND_Timer(time_count);
 360:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 364:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
 368:	18 16       	cp	r1, r24
 36a:	19 06       	cpc	r1, r25
 36c:	14 f4       	brge	.+4      	; 0x372 <__vector_30+0xe2>
 36e:	42 df       	rcall	.-380    	; 0x1f4 <FND_Timer>
 370:	0a c0       	rjmp	.+20     	; 0x386 <__vector_30+0xf6>
		else if (time_count = 0)		puts_USART1("\r\n Not Ready \r\n");
 372:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <__data_end+0x1>
 376:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
 37a:	05 c0       	rjmp	.+10     	; 0x386 <__vector_30+0xf6>
	}
	else if (rx_data == 'P') {
 37c:	c0 35       	cpi	r28, 0x50	; 80
		puts_USART1("\r\n Timer Pause \r\n");
 37e:	19 f4       	brne	.+6      	; 0x386 <__vector_30+0xf6>
 380:	85 e2       	ldi	r24, 0x25	; 37
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	e4 de       	rcall	.-568    	; 0x14e <puts_USART1>
	}
}
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	cf 91       	pop	r28
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	7f 91       	pop	r23
 396:	6f 91       	pop	r22
 398:	5f 91       	pop	r21
 39a:	4f 91       	pop	r20
 39c:	3f 91       	pop	r19
 39e:	2f 91       	pop	r18
 3a0:	0f 90       	pop	r0
 3a2:	0b be       	out	0x3b, r0	; 59
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__divmodhi4>:
 3ae:	97 fb       	bst	r25, 7
 3b0:	07 2e       	mov	r0, r23
 3b2:	16 f4       	brtc	.+4      	; 0x3b8 <__divmodhi4+0xa>
 3b4:	00 94       	com	r0
 3b6:	06 d0       	rcall	.+12     	; 0x3c4 <__divmodhi4_neg1>
 3b8:	77 fd       	sbrc	r23, 7
 3ba:	08 d0       	rcall	.+16     	; 0x3cc <__divmodhi4_neg2>
 3bc:	0b d0       	rcall	.+22     	; 0x3d4 <__udivmodhi4>
 3be:	07 fc       	sbrc	r0, 7
 3c0:	05 d0       	rcall	.+10     	; 0x3cc <__divmodhi4_neg2>
 3c2:	3e f4       	brtc	.+14     	; 0x3d2 <__divmodhi4_exit>

000003c4 <__divmodhi4_neg1>:
 3c4:	90 95       	com	r25
 3c6:	81 95       	neg	r24
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	08 95       	ret

000003cc <__divmodhi4_neg2>:
 3cc:	70 95       	com	r23
 3ce:	61 95       	neg	r22
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255

000003d2 <__divmodhi4_exit>:
 3d2:	08 95       	ret

000003d4 <__udivmodhi4>:
 3d4:	aa 1b       	sub	r26, r26
 3d6:	bb 1b       	sub	r27, r27
 3d8:	51 e1       	ldi	r21, 0x11	; 17
 3da:	07 c0       	rjmp	.+14     	; 0x3ea <__udivmodhi4_ep>

000003dc <__udivmodhi4_loop>:
 3dc:	aa 1f       	adc	r26, r26
 3de:	bb 1f       	adc	r27, r27
 3e0:	a6 17       	cp	r26, r22
 3e2:	b7 07       	cpc	r27, r23
 3e4:	10 f0       	brcs	.+4      	; 0x3ea <__udivmodhi4_ep>
 3e6:	a6 1b       	sub	r26, r22
 3e8:	b7 0b       	sbc	r27, r23

000003ea <__udivmodhi4_ep>:
 3ea:	88 1f       	adc	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	5a 95       	dec	r21
 3f0:	a9 f7       	brne	.-22     	; 0x3dc <__udivmodhi4_loop>
 3f2:	80 95       	com	r24
 3f4:	90 95       	com	r25
 3f6:	bc 01       	movw	r22, r24
 3f8:	cd 01       	movw	r24, r26
 3fa:	08 95       	ret

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
