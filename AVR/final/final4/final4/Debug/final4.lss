
final4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000232  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b91  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e4  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ac  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000295  00000000  00000000  00002013  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	72 d0       	rcall	.+228    	; 0x198 <main>
  b4:	bc c0       	rjmp	.+376    	; 0x22e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <PushButtonDet>:
	}
}

int PushButtonDet(int number)
{
	if (((~PIND >> number) & 0x1) == 1) // 비트 연산자 (~) : 0000 0000 -> 1111 1111
  b8:	20 b3       	in	r18, 0x10	; 16
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	20 95       	com	r18
  be:	30 95       	com	r19
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <PushButtonDet+0xe>
  c2:	35 95       	asr	r19
  c4:	27 95       	ror	r18
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <PushButtonDet+0xa>
  ca:	c9 01       	movw	r24, r18
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	99 27       	eor	r25, r25
  d0:	20 ff       	sbrs	r18, 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <PushButtonDet+0x20>
	return 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
	
	else
	return 0;
}
  d8:	08 95       	ret

000000da <FND_Display>:
}

// FND에 숫자 표시 함수
void FND_Display(int idx, int number, int dot)
{
	if (idx == 0)        PORTE = 0x10; // 첫 번째 세그먼트 선택
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	19 f4       	brne	.+6      	; 0xe4 <FND_Display+0xa>
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	83 b9       	out	0x03, r24	; 3
  e2:	10 c0       	rjmp	.+32     	; 0x104 <FND_Display+0x2a>
	else if (idx == 1)   PORTE = 0x20; // 두 번째 세그먼트 선택
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 05       	cpc	r25, r1
  e8:	19 f4       	brne	.+6      	; 0xf0 <FND_Display+0x16>
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	83 b9       	out	0x03, r24	; 3
  ee:	0a c0       	rjmp	.+20     	; 0x104 <FND_Display+0x2a>
	else if (idx == 2)   PORTE = 0x40; // 세 번째 세그먼트 선택
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	91 05       	cpc	r25, r1
  f4:	19 f4       	brne	.+6      	; 0xfc <FND_Display+0x22>
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	83 b9       	out	0x03, r24	; 3
  fa:	04 c0       	rjmp	.+8      	; 0x104 <FND_Display+0x2a>
	else if (idx == 3)   PORTE = 0x80; // 네 번째 세그먼트 선택
  fc:	03 97       	sbiw	r24, 0x03	; 3
  fe:	11 f4       	brne	.+4      	; 0x104 <FND_Display+0x2a>
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	83 b9       	out	0x03, r24	; 3

	PORTB = Port_char[number]; // 숫자에 해당하는 7세그먼트 코드 출력
 104:	fb 01       	movw	r30, r22
 106:	e0 50       	subi	r30, 0x00	; 0
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	80 81       	ld	r24, Z
 10c:	88 bb       	out	0x18, r24	; 24
	
	if (dot == 1)        PORTB = PORTB & 0x7f; // 점 표시 (dot 플래그가 설정된 경우)
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	51 05       	cpc	r21, r1
 112:	19 f4       	brne	.+6      	; 0x11a <FND_Display+0x40>
 114:	88 b3       	in	r24, 0x18	; 24
 116:	8f 77       	andi	r24, 0x7F	; 127
 118:	88 bb       	out	0x18, r24	; 24
 11a:	08 95       	ret

0000011c <FND_cnt>:
	else
	return 0;
}

void FND_cnt(int cnt)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
	int buffer = 0;
	
	FND_Display(0, cnt / 1000, 0);
 122:	68 ee       	ldi	r22, 0xE8	; 232
 124:	73 e0       	ldi	r23, 0x03	; 3
 126:	5c d0       	rcall	.+184    	; 0x1e0 <__divmodhi4>
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	d4 df       	rcall	.-88     	; 0xda <FND_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	93 e2       	ldi	r25, 0x23	; 35
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <FND_cnt+0x1a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <FND_cnt+0x20>
 13c:	00 00       	nop
	buffer = cnt;
	_delay_ms(2.5);
	
	FND_Display(1, buffer / 100, 0);
 13e:	ce 01       	movw	r24, r28
 140:	64 e6       	ldi	r22, 0x64	; 100
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	4d d0       	rcall	.+154    	; 0x1e0 <__divmodhi4>
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	c5 df       	rcall	.-118    	; 0xda <FND_Display>
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	93 e2       	ldi	r25, 0x23	; 35
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <FND_cnt+0x38>
 158:	00 c0       	rjmp	.+0      	; 0x15a <FND_cnt+0x3e>
	buffer = cnt;
	_delay_ms(2.5);
	
	FND_Display(2, buffer / 10, 0);
 15a:	00 00       	nop
 15c:	ce 01       	movw	r24, r28
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	3e d0       	rcall	.+124    	; 0x1e0 <__divmodhi4>
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	b6 df       	rcall	.-148    	; 0xda <FND_Display>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	93 e2       	ldi	r25, 0x23	; 35
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <FND_cnt+0x56>
 176:	00 c0       	rjmp	.+0      	; 0x178 <FND_cnt+0x5c>
	buffer = cnt;
	_delay_ms(2.5);
	
	FND_Display(3, buffer, 0);
 178:	00 00       	nop
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	be 01       	movw	r22, r28
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	aa df       	rcall	.-172    	; 0xda <FND_Display>
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	93 e2       	ldi	r25, 0x23	; 35
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <FND_cnt+0x6e>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <FND_cnt+0x74>
 190:	00 00       	nop
	_delay_ms(2.5);
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <main>:
void FND_Display(int idx, int number, int dot);
void FND_cnt(int cnt);

int main(void)
{
	DDRB = 0xff; // 포트 B를 출력으로 설정
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff; // 포트 E를 출력으로 설정
 19c:	82 b9       	out	0x02, r24	; 2
	
	PORTB = 0xff; // 포트 B를 초기화 (모든 세그먼트를 끔)
 19e:	88 bb       	out	0x18, r24	; 24
	PORTE = 0x80; // 포트 E를 초기화 (첫 번째 세그먼트를 켬)
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	83 b9       	out	0x03, r24	; 3
	
	int cnt = 0;
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (1)
	{
		if(PushButtonDet(0)) {
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	85 df       	rcall	.-246    	; 0xb8 <PushButtonDet>
 1ae:	89 2b       	or	r24, r25
 1b0:	21 f0       	breq	.+8      	; 0x1ba <main+0x22>
			cnt++;
 1b2:	21 96       	adiw	r28, 0x01	; 1
			FND_cnt(cnt);
 1b4:	ce 01       	movw	r24, r28
 1b6:	b2 df       	rcall	.-156    	; 0x11c <FND_cnt>
 1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <main+0x3c>
		}
		else if (PushButtonDet(1)) {
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	7c df       	rcall	.-264    	; 0xb8 <PushButtonDet>
 1c0:	89 2b       	or	r24, r25
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <main+0x38>
			cnt = 0;
			FND_cnt(cnt);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	a9 df       	rcall	.-174    	; 0x11c <FND_cnt>
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
		if(PushButtonDet(0)) {
			cnt++;
			FND_cnt(cnt);
		}
		else if (PushButtonDet(1)) {
			cnt = 0;
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <main+0x3c>
			FND_cnt(cnt);
		}
		else FND_cnt(cnt);
 1d0:	ce 01       	movw	r24, r28
 1d2:	a4 df       	rcall	.-184    	; 0x11c <FND_cnt>
 1d4:	86 e6       	ldi	r24, 0x66	; 102
 1d6:	9e e0       	ldi	r25, 0x0E	; 14
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x40>
 1dc:	00 00       	nop
 1de:	e4 cf       	rjmp	.-56     	; 0x1a8 <main+0x10>

000001e0 <__divmodhi4>:
 1e0:	97 fb       	bst	r25, 7
 1e2:	07 2e       	mov	r0, r23
 1e4:	16 f4       	brtc	.+4      	; 0x1ea <__divmodhi4+0xa>
 1e6:	00 94       	com	r0
 1e8:	06 d0       	rcall	.+12     	; 0x1f6 <__divmodhi4_neg1>
 1ea:	77 fd       	sbrc	r23, 7
 1ec:	08 d0       	rcall	.+16     	; 0x1fe <__divmodhi4_neg2>
 1ee:	0b d0       	rcall	.+22     	; 0x206 <__udivmodhi4>
 1f0:	07 fc       	sbrc	r0, 7
 1f2:	05 d0       	rcall	.+10     	; 0x1fe <__divmodhi4_neg2>
 1f4:	3e f4       	brtc	.+14     	; 0x204 <__divmodhi4_exit>

000001f6 <__divmodhi4_neg1>:
 1f6:	90 95       	com	r25
 1f8:	81 95       	neg	r24
 1fa:	9f 4f       	sbci	r25, 0xFF	; 255
 1fc:	08 95       	ret

000001fe <__divmodhi4_neg2>:
 1fe:	70 95       	com	r23
 200:	61 95       	neg	r22
 202:	7f 4f       	sbci	r23, 0xFF	; 255

00000204 <__divmodhi4_exit>:
 204:	08 95       	ret

00000206 <__udivmodhi4>:
 206:	aa 1b       	sub	r26, r26
 208:	bb 1b       	sub	r27, r27
 20a:	51 e1       	ldi	r21, 0x11	; 17
 20c:	07 c0       	rjmp	.+14     	; 0x21c <__udivmodhi4_ep>

0000020e <__udivmodhi4_loop>:
 20e:	aa 1f       	adc	r26, r26
 210:	bb 1f       	adc	r27, r27
 212:	a6 17       	cp	r26, r22
 214:	b7 07       	cpc	r27, r23
 216:	10 f0       	brcs	.+4      	; 0x21c <__udivmodhi4_ep>
 218:	a6 1b       	sub	r26, r22
 21a:	b7 0b       	sbc	r27, r23

0000021c <__udivmodhi4_ep>:
 21c:	88 1f       	adc	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	5a 95       	dec	r21
 222:	a9 f7       	brne	.-22     	; 0x20e <__udivmodhi4_loop>
 224:	80 95       	com	r24
 226:	90 95       	com	r25
 228:	bc 01       	movw	r22, r24
 22a:	cd 01       	movw	r24, r26
 22c:	08 95       	ret

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
