
ex11_5_professor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d4  00800100  00000250  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ce5  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000893  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000463  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000454  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027d  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000025ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 3d       	cpi	r26, 0xD4	; 212
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	41 d0       	rcall	.+130    	; 0x136 <main>
  b4:	cb c0       	rjmp	.+406    	; 0x24c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <Init_USART1>:
	}
}

void Init_USART1()
{
	UCSR1B |= 0b00011000;
  b8:	ea e9       	ldi	r30, 0x9A	; 154
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 61       	ori	r24, 0x18	; 24
  c0:	80 83       	st	Z, r24
	UBRR1L = 95;    // Baud Rate에 맞게 설정
  c2:	8f e5       	ldi	r24, 0x5F	; 95
  c4:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  c8:	08 95       	ret

000000ca <putchar_USART1>:
}

void putchar_USART1(char data)
{
	while(1){
		if (UCSR1A & (1 << UDRE1)){
  ca:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  ce:	95 ff       	sbrs	r25, 5
  d0:	fc cf       	rjmp	.-8      	; 0xca <putchar_USART1>
			UDR1 = data;
  d2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  d6:	08 95       	ret

000000d8 <puts_USART1>:
		}
	}
}

void puts_USART1(char *str)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ec 01       	movw	r28, r24
	while (*str != 0){
  de:	02 c0       	rjmp	.+4      	; 0xe4 <puts_USART1+0xc>
		putchar_USART1(*str);
  e0:	f4 df       	rcall	.-24     	; 0xca <putchar_USART1>
		str++;
  e2:	21 96       	adiw	r28, 0x01	; 1
	}
}

void puts_USART1(char *str)
{
	while (*str != 0){
  e4:	88 81       	ld	r24, Y
  e6:	81 11       	cpse	r24, r1
  e8:	fb cf       	rjmp	.-10     	; 0xe0 <puts_USART1+0x8>
		putchar_USART1(*str);
		str++;
	}
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <getchar_USART1>:

unsigned char getchar_USART1()
{
	while(1){
		if (UCSR1A & 0x80){
  f0:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  f4:	88 23       	and	r24, r24
  f6:	e4 f7       	brge	.-8      	; 0xf0 <getchar_USART1>
			return (UDR1);
  f8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
		}
	}
}
  fc:	08 95       	ret

000000fe <LEDOnOff>:

void LEDOnOff (int number, int onoff)
{
	char led_state;
	led_state = ~PORTB;
  fe:	98 b3       	in	r25, 0x18	; 24
 100:	90 95       	com	r25
	
	if (onoff == 1){
 102:	61 30       	cpi	r22, 0x01	; 1
 104:	71 05       	cpc	r23, r1
 106:	59 f4       	brne	.+22     	; 0x11e <LEDOnOff+0x20>
		led_state = led_state | (1 << number);
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <LEDOnOff+0x14>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	8a 95       	dec	r24
 114:	e2 f7       	brpl	.-8      	; 0x10e <LEDOnOff+0x10>
 116:	92 2b       	or	r25, r18
		PORTB = ~led_state;
 118:	90 95       	com	r25
 11a:	98 bb       	out	0x18, r25	; 24
 11c:	08 95       	ret
	}
	
	else{
		led_state = led_state & ~(1 << number);
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <LEDOnOff+0x2a>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	8a 95       	dec	r24
 12a:	e2 f7       	brpl	.-8      	; 0x124 <LEDOnOff+0x26>
 12c:	20 95       	com	r18
 12e:	92 23       	and	r25, r18
		PORTB = ~led_state;
 130:	90 95       	com	r25
 132:	98 bb       	out	0x18, r25	; 24
 134:	08 95       	ret

00000136 <main>:
unsigned char getchar_USART1();
void LEDOnOff(int number, int onoff);
void process_command(char *command);

int main(void)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	2a 97       	sbiw	r28, 0x0a	; 10
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xff;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff;
 14e:	88 bb       	out	0x18, r24	; 24

	char rx_data;
	char command[10];
	int idx = 0;
	Init_USART1();
 150:	b3 df       	rcall	.-154    	; 0xb8 <Init_USART1>
	
	puts_USART1("Start \r\n");
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	c0 df       	rcall	.-128    	; 0xd8 <puts_USART1>
	while (1)
	{
		puts_USART1("Enter Command : ");
 158:	89 e0       	ldi	r24, 0x09	; 9
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	bd df       	rcall	.-134    	; 0xd8 <puts_USART1>
 15e:	00 e0       	ldi	r16, 0x00	; 0
		while (1)
		{
			rx_data = getchar_USART1();
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	c6 df       	rcall	.-116    	; 0xf0 <getchar_USART1>
 164:	f8 2e       	mov	r15, r24
			if (rx_data == '\r') {
 166:	8d e0       	ldi	r24, 0x0D	; 13
 168:	f8 12       	cpse	r15, r24
 16a:	56 c0       	rjmp	.+172    	; 0x218 <main+0xe2>
				command[idx] = 0;	// 마지막 NULL 삽입
 16c:	e1 e0       	ldi	r30, 0x01	; 1
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	ec 0f       	add	r30, r28
 172:	fd 1f       	adc	r31, r29
 174:	e0 0f       	add	r30, r16
 176:	f1 1f       	adc	r31, r17
				puts_USART1("\r \n-- Received Command --");
 178:	10 82       	st	Z, r1
 17a:	8a e1       	ldi	r24, 0x1A	; 26
 17c:	91 e0       	ldi	r25, 0x01	; 1
				puts_USART1(command);
 17e:	ac df       	rcall	.-168    	; 0xd8 <puts_USART1>
 180:	ce 01       	movw	r24, r28
 182:	01 96       	adiw	r24, 0x01	; 1
				puts_USART1("\r \n");
 184:	a9 df       	rcall	.-174    	; 0xd8 <puts_USART1>
 186:	8f e8       	ldi	r24, 0x8F	; 143
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	a6 df       	rcall	.-180    	; 0xd8 <puts_USART1>
				idx = 0;
			
				// Command Interepreter
				if ((command[0] == 'O' && command[1] == 'N')){
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	8f 34       	cpi	r24, 0x4F	; 79
 190:	e9 f4       	brne	.+58     	; 0x1cc <main+0x96>
 192:	9a 81       	ldd	r25, Y+2	; 0x02
 194:	9e 34       	cpi	r25, 0x4E	; 78
					puts_USART1("ON command received \r \n");
 196:	d1 f4       	brne	.+52     	; 0x1cc <main+0x96>
 198:	84 e3       	ldi	r24, 0x34	; 52
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	9d df       	rcall	.-198    	; 0xd8 <puts_USART1>
					// 3번째 문자가 '0' ~ '7'이면 해당 LED ON
					// 그렇지 않으면, Error 처리
					for(int i = 0; i< 8; i++){
 19e:	00 e0       	ldi	r16, 0x00	; 0
 1a0:	10 e0       	ldi	r17, 0x00	; 0
 1a2:	10 c0       	rjmp	.+32     	; 0x1c4 <main+0x8e>
						  if(command[2] == command[i] ) LEDOnOff(i,1);
 1a4:	9b 81       	ldd	r25, Y+3	; 0x03
 1a6:	e1 e0       	ldi	r30, 0x01	; 1
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	ec 0f       	add	r30, r28
 1ac:	fd 1f       	adc	r31, r29
 1ae:	e0 0f       	add	r30, r16
 1b0:	f1 1f       	adc	r31, r17
 1b2:	80 81       	ld	r24, Z
 1b4:	98 13       	cpse	r25, r24
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <main+0x8a>
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	c8 01       	movw	r24, r16
 1be:	9f df       	rcall	.-194    	; 0xfe <LEDOnOff>
				// Command Interepreter
				if ((command[0] == 'O' && command[1] == 'N')){
					puts_USART1("ON command received \r \n");
					// 3번째 문자가 '0' ~ '7'이면 해당 LED ON
					// 그렇지 않으면, Error 처리
					for(int i = 0; i< 8; i++){
 1c0:	0f 5f       	subi	r16, 0xFF	; 255
 1c2:	1f 4f       	sbci	r17, 0xFF	; 255
 1c4:	08 30       	cpi	r16, 0x08	; 8
 1c6:	11 05       	cpc	r17, r1
 1c8:	6c f3       	brlt	.-38     	; 0x1a4 <main+0x6e>
 1ca:	c6 cf       	rjmp	.-116    	; 0x158 <main+0x22>
					  }


				}
				
				else if ((command[0] == 'O' && command[1] == 'F' && command[2] == 'F')){
 1cc:	8f 34       	cpi	r24, 0x4F	; 79
 1ce:	01 f5       	brne	.+64     	; 0x210 <main+0xda>
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	86 34       	cpi	r24, 0x46	; 70
 1d4:	e9 f4       	brne	.+58     	; 0x210 <main+0xda>
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	86 34       	cpi	r24, 0x46	; 70
					puts_USART1("OFF command received \r \n");	
 1da:	d1 f4       	brne	.+52     	; 0x210 <main+0xda>
 1dc:	8c e4       	ldi	r24, 0x4C	; 76
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	7b df       	rcall	.-266    	; 0xd8 <puts_USART1>
					// 4번 째 문자가 '0' ~ '7'이면 해당 LED ON
					// 그렇지 않으면, Error 처리
					for(int i = 0; i< 8; i++){
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	10 c0       	rjmp	.+32     	; 0x208 <main+0xd2>
						if(command[3] ==  command[i]) LEDOnOff(i,0);
 1e8:	9c 81       	ldd	r25, Y+4	; 0x04
 1ea:	e1 e0       	ldi	r30, 0x01	; 1
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ec 0f       	add	r30, r28
 1f0:	fd 1f       	adc	r31, r29
 1f2:	e0 0f       	add	r30, r16
 1f4:	f1 1f       	adc	r31, r17
 1f6:	80 81       	ld	r24, Z
 1f8:	98 13       	cpse	r25, r24
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <main+0xce>
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	c8 01       	movw	r24, r16
				
				else if ((command[0] == 'O' && command[1] == 'F' && command[2] == 'F')){
					puts_USART1("OFF command received \r \n");	
					// 4번 째 문자가 '0' ~ '7'이면 해당 LED ON
					// 그렇지 않으면, Error 처리
					for(int i = 0; i< 8; i++){
 202:	7d df       	rcall	.-262    	; 0xfe <LEDOnOff>
 204:	0f 5f       	subi	r16, 0xFF	; 255
 206:	1f 4f       	sbci	r17, 0xFF	; 255
 208:	08 30       	cpi	r16, 0x08	; 8
 20a:	11 05       	cpc	r17, r1
						if(command[3] ==  command[i]) LEDOnOff(i,0);
					}
				}
				
				else{
					puts_USART1("Wrong command \r \n");
 20c:	6c f3       	brlt	.-38     	; 0x1e8 <main+0xb2>
 20e:	a4 cf       	rjmp	.-184    	; 0x158 <main+0x22>
 210:	85 e6       	ldi	r24, 0x65	; 101
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	61 df       	rcall	.-318    	; 0xd8 <puts_USART1>
				}
				break;
				} 
			
			else {
				putchar_USART1(rx_data);
 216:	a0 cf       	rjmp	.-192    	; 0x158 <main+0x22>
 218:	8f 2d       	mov	r24, r15
 21a:	57 df       	rcall	.-338    	; 0xca <putchar_USART1>
				command[idx] = rx_data;
 21c:	e1 e0       	ldi	r30, 0x01	; 1
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ec 0f       	add	r30, r28
 222:	fd 1f       	adc	r31, r29
 224:	e0 0f       	add	r30, r16
 226:	f1 1f       	adc	r31, r17
 228:	f0 82       	st	Z, r15
				idx++;
 22a:	0f 5f       	subi	r16, 0xFF	; 255
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
			
				if(idx == 10) {
 22e:	0a 30       	cpi	r16, 0x0A	; 10
 230:	11 05       	cpc	r17, r1
 232:	09 f0       	breq	.+2      	; 0x236 <main+0x100>
					command[idx] = rx_data; // 수신 문자 수집
 234:	96 cf       	rjmp	.-212    	; 0x162 <main+0x2c>
 236:	e1 e0       	ldi	r30, 0x01	; 1
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	ec 0f       	add	r30, r28
 23c:	fd 1f       	adc	r31, r29
 23e:	e0 0f       	add	r30, r16
 240:	f1 1f       	adc	r31, r17
					puts_USART1("\r \n -- Wrong Command -- \r \n");
 242:	f0 82       	st	Z, r15
 244:	87 e7       	ldi	r24, 0x77	; 119
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	47 df       	rcall	.-370    	; 0xd8 <puts_USART1>
					idx = 0;
					break;
 24a:	86 cf       	rjmp	.-244    	; 0x158 <main+0x22>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
