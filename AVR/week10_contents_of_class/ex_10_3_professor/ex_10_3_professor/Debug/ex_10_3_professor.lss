
ex_10_3_professor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001b2  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a45  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cc  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036c  00000000  00000000  000015f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001960  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000481  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027c  00000000  00000000  00001e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000020ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	5b d0       	rcall	.+182    	; 0x16a <main>
  b4:	7c c0       	rjmp	.+248    	; 0x1ae <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <MakeSound2>:
	PORTG = PORTG & ~(1 << 4);	// 0출력
	myDelay_us(duty);	// period 절반 시간 지남
}

void MakeSound2(int period, unsigned long int duration)
{
  b8:	8f 92       	push	r8
  ba:	9f 92       	push	r9
  bc:	af 92       	push	r10
  be:	bf 92       	push	r11
  c0:	cf 92       	push	r12
  c2:	df 92       	push	r13
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	fc 01       	movw	r30, r24
  ca:	4a 01       	movw	r8, r20
  cc:	5b 01       	movw	r10, r22
	int i;
	unsigned long int t_elased = 0;
	int duty;
	duty = period >> 1;
  ce:	bc 01       	movw	r22, r24
  d0:	75 95       	asr	r23
  d2:	67 95       	ror	r22
}

void MakeSound2(int period, unsigned long int duration)
{
	int i;
	unsigned long int t_elased = 0;
  d4:	c1 2c       	mov	r12, r1
  d6:	d1 2c       	mov	r13, r1
  d8:	76 01       	movw	r14, r12
	int duty;
	duty = period >> 1;
	
	while(1)
	{
		PORTG = PORTG | (1 << 4);	//출력
  da:	a5 e6       	ldi	r26, 0x65	; 101
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	9c 91       	ld	r25, X
  e0:	90 61       	ori	r25, 0x10	; 16
  e2:	9c 93       	st	X, r25
		for (i = 0; i < duty; i++)	_delay_us(1);	//period 절반 시간 지남
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <MakeSound2+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <MakeSound2+0x34>
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
  f4:	26 17       	cp	r18, r22
  f6:	37 07       	cpc	r19, r23
  f8:	c4 f3       	brlt	.-16     	; 0xea <MakeSound2+0x32>
		PORTG = PORTG & ~(1 << 4);	// 0출력
  fa:	a5 e6       	ldi	r26, 0x65	; 101
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	9c 91       	ld	r25, X
 100:	9f 7e       	andi	r25, 0xEF	; 239
 102:	9c 93       	st	X, r25
		for (i = 0; i < duty; i++)	_delay_us(1);	// period 절반 시간 지남
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	05 c0       	rjmp	.+10     	; 0x114 <MakeSound2+0x5c>
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <MakeSound2+0x54>
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	26 17       	cp	r18, r22
 116:	37 07       	cpc	r19, r23
 118:	c4 f3       	brlt	.-16     	; 0x10a <MakeSound2+0x52>
		
		t_elased += period;
 11a:	cf 01       	movw	r24, r30
 11c:	0f 2e       	mov	r0, r31
 11e:	00 0c       	add	r0, r0
 120:	aa 0b       	sbc	r26, r26
 122:	bb 0b       	sbc	r27, r27
 124:	c8 0e       	add	r12, r24
 126:	d9 1e       	adc	r13, r25
 128:	ea 1e       	adc	r14, r26
 12a:	fb 1e       	adc	r15, r27
		if(t_elased >= duration)	break;
 12c:	c8 14       	cp	r12, r8
 12e:	d9 04       	cpc	r13, r9
 130:	ea 04       	cpc	r14, r10
 132:	fb 04       	cpc	r15, r11
 134:	90 f2       	brcs	.-92     	; 0xda <MakeSound2+0x22>
	}
	
}
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	df 90       	pop	r13
 13c:	cf 90       	pop	r12
 13e:	bf 90       	pop	r11
 140:	af 90       	pop	r10
 142:	9f 90       	pop	r9
 144:	8f 90       	pop	r8
 146:	08 95       	ret

00000148 <PushButtonDet>:

int PushButtonDet(int number)
{
	if (((~PIND >> number) & 0x1) == 1)		return 1;
 148:	20 b3       	in	r18, 0x10	; 16
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	20 95       	com	r18
 14e:	30 95       	com	r19
 150:	02 c0       	rjmp	.+4      	; 0x156 <PushButtonDet+0xe>
 152:	35 95       	asr	r19
 154:	27 95       	ror	r18
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <PushButtonDet+0xa>
 15a:	c9 01       	movw	r24, r18
 15c:	81 70       	andi	r24, 0x01	; 1
 15e:	99 27       	eor	r25, r25
 160:	20 ff       	sbrs	r18, 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <PushButtonDet+0x20>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
	
	else                                    return 0;
 168:	08 95       	ret

0000016a <main>:
void myDelay_us(unsigned int delay);
int PushButtonDet(int number);

int main(void)
{
	DDRG = 0xff;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	int i;

	/* Replace with your application code */
	while (1)
	{
		if (PIND != 0xff)
 170:	80 b3       	in	r24, 0x10	; 16
 172:	8f 3f       	cpi	r24, 0xFF	; 255
 174:	e9 f3       	breq	.-6      	; 0x170 <main+0x6>
 176:	06 c0       	rjmp	.+12     	; 0x184 <main+0x1a>
		{
			for (i = 0; i < 8; i++)
			{
				if (PushButtonDet(i))	break;
 178:	ce 01       	movw	r24, r28
 17a:	e6 df       	rcall	.-52     	; 0x148 <PushButtonDet>
 17c:	89 2b       	or	r24, r25
 17e:	39 f4       	brne	.+14     	; 0x18e <main+0x24>
	/* Replace with your application code */
	while (1)
	{
		if (PIND != 0xff)
		{
			for (i = 0; i < 8; i++)
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	02 c0       	rjmp	.+4      	; 0x188 <main+0x1e>
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	c8 30       	cpi	r28, 0x08	; 8
 18a:	d1 05       	cpc	r29, r1
 18c:	ac f3       	brlt	.-22     	; 0x178 <main+0xe>
			{
				if (PushButtonDet(i))	break;
			}
			MakeSound2(NOTE[i], BASE_T);
 18e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 196:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 19e:	cc 0f       	add	r28, r28
 1a0:	dd 1f       	adc	r29, r29
 1a2:	cc 5f       	subi	r28, 0xFC	; 252
 1a4:	de 4f       	sbci	r29, 0xFE	; 254
 1a6:	88 81       	ld	r24, Y
 1a8:	99 81       	ldd	r25, Y+1	; 0x01
 1aa:	86 df       	rcall	.-244    	; 0xb8 <MakeSound2>
 1ac:	e1 cf       	rjmp	.-62     	; 0x170 <main+0x6>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
