
ex10_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000336  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000336  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b67  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000903  00000000  00000000  0000102b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040a  00000000  00000000  0000192e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000489  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000449  00000000  00000000  000022a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000026ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 36       	cpi	r26, 0x6C	; 108
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	7d d0       	rcall	.+250    	; 0x1ae <main>
  b4:	3e c1       	rjmp	.+636    	; 0x332 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <myDelay_us>:
	
	PORTG = PORTG | (1 << 4);	//출력
	myDelay_us(duty);	//period 절반 시간 지남
	PORTG = PORTG & ~(1 << 4);	// 0출력
	myDelay_us(duty);	// period 절반 시간 지남
}
  b8:	ab 01       	movw	r20, r22
  ba:	bc 01       	movw	r22, r24
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	dc 01       	movw	r26, r24
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <myDelay_us+0x18>
  c4:	25 e0       	ldi	r18, 0x05	; 5
  c6:	2a 95       	dec	r18
  c8:	f1 f7       	brne	.-4      	; 0xc6 <myDelay_us+0xe>
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	a1 1d       	adc	r26, r1
  ce:	b1 1d       	adc	r27, r1
  d0:	84 17       	cp	r24, r20
  d2:	95 07       	cpc	r25, r21
  d4:	a6 07       	cpc	r26, r22
  d6:	b7 07       	cpc	r27, r23
  d8:	a8 f3       	brcs	.-22     	; 0xc4 <myDelay_us+0xc>
  da:	08 95       	ret

000000dc <MakeSound2>:

void MakeSound2(int period, unsigned long int duration)
{
  dc:	2f 92       	push	r2
  de:	3f 92       	push	r3
  e0:	4f 92       	push	r4
  e2:	5f 92       	push	r5
  e4:	6f 92       	push	r6
  e6:	7f 92       	push	r7
  e8:	8f 92       	push	r8
  ea:	9f 92       	push	r9
  ec:	af 92       	push	r10
  ee:	bf 92       	push	r11
  f0:	cf 92       	push	r12
  f2:	df 92       	push	r13
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	8c 01       	movw	r16, r24
 102:	4a 01       	movw	r8, r20
 104:	5b 01       	movw	r10, r22
	unsigned long int t_elased = 0;
	int duty;
	duty = period >> 1;
 106:	1c 01       	movw	r2, r24
 108:	35 94       	asr	r3
 10a:	27 94       	ror	r2
	myDelay_us(duty);	// period 절반 시간 지남
}

void MakeSound2(int period, unsigned long int duration)
{
	unsigned long int t_elased = 0;
 10c:	41 2c       	mov	r4, r1
 10e:	51 2c       	mov	r5, r1
 110:	32 01       	movw	r6, r4
	int duty;
	duty = period >> 1;
	
	while(1)
	{
		PORTG = PORTG | (1 << 4);	//출력
 112:	c5 e6       	ldi	r28, 0x65	; 101
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	88 81       	ld	r24, Y
 118:	80 61       	ori	r24, 0x10	; 16
 11a:	88 83       	st	Y, r24
		myDelay_us(duty);	//period 절반 시간 지남
 11c:	61 01       	movw	r12, r2
 11e:	03 2c       	mov	r0, r3
 120:	00 0c       	add	r0, r0
 122:	ee 08       	sbc	r14, r14
 124:	ff 08       	sbc	r15, r15
 126:	c7 01       	movw	r24, r14
 128:	b6 01       	movw	r22, r12
 12a:	c6 df       	rcall	.-116    	; 0xb8 <myDelay_us>
		PORTG = PORTG & ~(1 << 4);	// 0출력
 12c:	88 81       	ld	r24, Y
 12e:	8f 7e       	andi	r24, 0xEF	; 239
 130:	88 83       	st	Y, r24
		myDelay_us(duty);	// period 절반 시간 지남
 132:	c7 01       	movw	r24, r14
 134:	b6 01       	movw	r22, r12
 136:	c0 df       	rcall	.-128    	; 0xb8 <myDelay_us>
		
		t_elased += period;
 138:	c8 01       	movw	r24, r16
 13a:	01 2e       	mov	r0, r17
 13c:	00 0c       	add	r0, r0
 13e:	aa 0b       	sbc	r26, r26
 140:	bb 0b       	sbc	r27, r27
 142:	48 0e       	add	r4, r24
 144:	59 1e       	adc	r5, r25
 146:	6a 1e       	adc	r6, r26
 148:	7b 1e       	adc	r7, r27
		if(t_elased >= duration)	break;
 14a:	48 14       	cp	r4, r8
 14c:	59 04       	cpc	r5, r9
 14e:	6a 04       	cpc	r6, r10
 150:	7b 04       	cpc	r7, r11
 152:	f8 f2       	brcs	.-66     	; 0x112 <MakeSound2+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	8f e7       	ldi	r24, 0x7F	; 127
 158:	94 e0       	ldi	r25, 0x04	; 4
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <MakeSound2+0x7e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <MakeSound2+0x88>
 164:	00 00       	nop
	}
	_delay_ms(100);
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	df 90       	pop	r13
 174:	cf 90       	pop	r12
 176:	bf 90       	pop	r11
 178:	af 90       	pop	r10
 17a:	9f 90       	pop	r9
 17c:	8f 90       	pop	r8
 17e:	7f 90       	pop	r7
 180:	6f 90       	pop	r6
 182:	5f 90       	pop	r5
 184:	4f 90       	pop	r4
 186:	3f 90       	pop	r3
 188:	2f 90       	pop	r2
 18a:	08 95       	ret

0000018c <PushButtonDet>:
	for(i=0; i<delay; i++)		_delay_us(1);
}

int PushButtonDet(int number)
{
	if (((~PIND >> number) & 0x1) == 1)		return 1;
 18c:	20 b3       	in	r18, 0x10	; 16
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	20 95       	com	r18
 192:	30 95       	com	r19
 194:	02 c0       	rjmp	.+4      	; 0x19a <PushButtonDet+0xe>
 196:	35 95       	asr	r19
 198:	27 95       	ror	r18
 19a:	8a 95       	dec	r24
 19c:	e2 f7       	brpl	.-8      	; 0x196 <PushButtonDet+0xa>
 19e:	c9 01       	movw	r24, r18
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	99 27       	eor	r25, r25
 1a4:	20 ff       	sbrs	r18, 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <PushButtonDet+0x20>
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
	else                                    return 0;
 1ac:	08 95       	ret

000001ae <main>:
void myDelay_us(unsigned long int delay);
int PushButtonDet(int number);

int main(void)
{
	DDRG = 0xff;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRD = 0;
 1b4:	11 ba       	out	0x11, r1	; 17
	int note_len = sizeof(NOTE) / sizeof(int);	//Data Type Table 참고
	
	
	while (1)
	{
		if (PIND != 0xff)
 1b6:	80 b3       	in	r24, 0x10	; 16
 1b8:	8f 3f       	cpi	r24, 0xFF	; 255
 1ba:	e9 f3       	breq	.-6      	; 0x1b6 <main+0x8>
		{	
			if((PushButtonDet(0)))			
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	e5 df       	rcall	.-54     	; 0x18c <PushButtonDet>
 1c2:	89 2b       	or	r24, r25
 1c4:	31 f5       	brne	.+76     	; 0x212 <main+0x64>
 1c6:	2b c0       	rjmp	.+86     	; 0x21e <main+0x70>
			{
				for (i = 0; i < note_len; i++)
				{
					duration = BASE_T/(unsigned long int)DUR[i];
 1c8:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <BASE_T>
 1cc:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <BASE_T+0x1>
 1d0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <BASE_T+0x2>
 1d4:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <BASE_T+0x3>
 1d8:	e8 01       	movw	r28, r16
 1da:	cc 0f       	add	r28, r28
 1dc:	dd 1f       	adc	r29, r29
 1de:	fe 01       	movw	r30, r28
 1e0:	e0 50       	subi	r30, 0x00	; 0
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	20 81       	ld	r18, Z
 1e6:	31 81       	ldd	r19, Z+1	; 0x01
 1e8:	03 2e       	mov	r0, r19
 1ea:	00 0c       	add	r0, r0
 1ec:	44 0b       	sbc	r20, r20
 1ee:	55 0b       	sbc	r21, r21
 1f0:	7e d0       	rcall	.+252    	; 0x2ee <__udivmodsi4>
					if (NOTE[i] != 0)		MakeSound2(NOTE[i], duration);
 1f2:	cc 5c       	subi	r28, 0xCC	; 204
 1f4:	de 4f       	sbci	r29, 0xFE	; 254
 1f6:	88 81       	ld	r24, Y
 1f8:	99 81       	ldd	r25, Y+1	; 0x01
 1fa:	00 97       	sbiw	r24, 0x00	; 0
 1fc:	21 f0       	breq	.+8      	; 0x206 <main+0x58>
 1fe:	ba 01       	movw	r22, r20
 200:	a9 01       	movw	r20, r18
 202:	6c df       	rcall	.-296    	; 0xdc <MakeSound2>
 204:	03 c0       	rjmp	.+6      	; 0x20c <main+0x5e>
					else				myDelay_us(duration);
 206:	ca 01       	movw	r24, r20
 208:	b9 01       	movw	r22, r18
 20a:	56 df       	rcall	.-340    	; 0xb8 <myDelay_us>
 20c:	0f 5f       	subi	r16, 0xFF	; 255
	{
		if (PIND != 0xff)
		{	
			if((PushButtonDet(0)))			
			{
				for (i = 0; i < note_len; i++)
 20e:	1f 4f       	sbci	r17, 0xFF	; 255
 210:	02 c0       	rjmp	.+4      	; 0x216 <main+0x68>
 212:	00 e0       	ldi	r16, 0x00	; 0
 214:	10 e0       	ldi	r17, 0x00	; 0
 216:	0a 31       	cpi	r16, 0x1A	; 26
 218:	11 05       	cpc	r17, r1
 21a:	b4 f2       	brlt	.-84     	; 0x1c8 <main+0x1a>
 21c:	cc cf       	rjmp	.-104    	; 0x1b6 <main+0x8>
					if (NOTE[i] != 0)		MakeSound2(NOTE[i], duration);
					else				myDelay_us(duration);
				}
			}
			
			else if((PushButtonDet(1)))
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	b4 df       	rcall	.-152    	; 0x18c <PushButtonDet>
 224:	89 2b       	or	r24, r25
 226:	41 f5       	brne	.+80     	; 0x278 <main+0xca>
 228:	2d c0       	rjmp	.+90     	; 0x284 <main+0xd6>
 22a:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <BASE_T>
			{
				for (i = 0; i < note_len; i++)
				{
					duration = BASE_T/(unsigned long int)DUR[i];
 22e:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <BASE_T+0x1>
 232:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <BASE_T+0x2>
 236:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <BASE_T+0x3>
 23a:	e8 01       	movw	r28, r16
 23c:	cc 0f       	add	r28, r28
 23e:	dd 1f       	adc	r29, r29
 240:	fe 01       	movw	r30, r28
 242:	e0 50       	subi	r30, 0x00	; 0
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	20 81       	ld	r18, Z
 248:	31 81       	ldd	r19, Z+1	; 0x01
 24a:	03 2e       	mov	r0, r19
 24c:	00 0c       	add	r0, r0
 24e:	44 0b       	sbc	r20, r20
 250:	55 0b       	sbc	r21, r21
 252:	4d d0       	rcall	.+154    	; 0x2ee <__udivmodsi4>
 254:	cc 5c       	subi	r28, 0xCC	; 204
					if (NOTE[i] != 0)		MakeSound2(NOTE[i]>>1, duration);
 256:	de 4f       	sbci	r29, 0xFE	; 254
 258:	88 81       	ld	r24, Y
 25a:	99 81       	ldd	r25, Y+1	; 0x01
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	31 f0       	breq	.+12     	; 0x26c <main+0xbe>
 260:	ba 01       	movw	r22, r20
 262:	a9 01       	movw	r20, r18
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	39 df       	rcall	.-398    	; 0xdc <MakeSound2>
 26a:	03 c0       	rjmp	.+6      	; 0x272 <main+0xc4>
					else					myDelay_us(duration);
 26c:	ca 01       	movw	r24, r20
 26e:	b9 01       	movw	r22, r18
 270:	23 df       	rcall	.-442    	; 0xb8 <myDelay_us>
 272:	0f 5f       	subi	r16, 0xFF	; 255
				}
			}
			
			else if((PushButtonDet(1)))
			{
				for (i = 0; i < note_len; i++)
 274:	1f 4f       	sbci	r17, 0xFF	; 255
 276:	02 c0       	rjmp	.+4      	; 0x27c <main+0xce>
 278:	00 e0       	ldi	r16, 0x00	; 0
 27a:	10 e0       	ldi	r17, 0x00	; 0
 27c:	0a 31       	cpi	r16, 0x1A	; 26
 27e:	11 05       	cpc	r17, r1
 280:	a4 f2       	brlt	.-88     	; 0x22a <main+0x7c>
 282:	99 cf       	rjmp	.-206    	; 0x1b6 <main+0x8>
					if (NOTE[i] != 0)		MakeSound2(NOTE[i]>>1, duration);
					else					myDelay_us(duration);
				}
			}
			
			else if((PushButtonDet(2)))
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	81 df       	rcall	.-254    	; 0x18c <PushButtonDet>
 28a:	89 2b       	or	r24, r25
 28c:	51 f5       	brne	.+84     	; 0x2e2 <main+0x134>
 28e:	93 cf       	rjmp	.-218    	; 0x1b6 <main+0x8>
 290:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <BASE_T>
			{
				for (i = 0; i < note_len; i++)
				{
					duration = BASE_T/(unsigned long int)DUR[i];
 294:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <BASE_T+0x1>
 298:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <BASE_T+0x2>
 29c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <BASE_T+0x3>
 2a0:	e8 01       	movw	r28, r16
 2a2:	cc 0f       	add	r28, r28
 2a4:	dd 1f       	adc	r29, r29
 2a6:	fe 01       	movw	r30, r28
 2a8:	e0 50       	subi	r30, 0x00	; 0
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	20 81       	ld	r18, Z
 2ae:	31 81       	ldd	r19, Z+1	; 0x01
 2b0:	03 2e       	mov	r0, r19
 2b2:	00 0c       	add	r0, r0
 2b4:	44 0b       	sbc	r20, r20
 2b6:	55 0b       	sbc	r21, r21
 2b8:	1a d0       	rcall	.+52     	; 0x2ee <__udivmodsi4>
 2ba:	cc 5c       	subi	r28, 0xCC	; 204
					if (NOTE[i] != 0)		MakeSound2(NOTE[i]>>2, duration);
 2bc:	de 4f       	sbci	r29, 0xFE	; 254
 2be:	88 81       	ld	r24, Y
 2c0:	99 81       	ldd	r25, Y+1	; 0x01
 2c2:	00 97       	sbiw	r24, 0x00	; 0
 2c4:	41 f0       	breq	.+16     	; 0x2d6 <main+0x128>
 2c6:	ba 01       	movw	r22, r20
 2c8:	a9 01       	movw	r20, r18
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	95 95       	asr	r25
 2d0:	87 95       	ror	r24
 2d2:	04 df       	rcall	.-504    	; 0xdc <MakeSound2>
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <main+0x12e>
					else					myDelay_us(duration);
 2d6:	ca 01       	movw	r24, r20
 2d8:	b9 01       	movw	r22, r18
 2da:	ee de       	rcall	.-548    	; 0xb8 <myDelay_us>
 2dc:	0f 5f       	subi	r16, 0xFF	; 255
				}
			}
			
			else if((PushButtonDet(2)))
			{
				for (i = 0; i < note_len; i++)
 2de:	1f 4f       	sbci	r17, 0xFF	; 255
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <main+0x138>
 2e2:	00 e0       	ldi	r16, 0x00	; 0
 2e4:	10 e0       	ldi	r17, 0x00	; 0
 2e6:	0a 31       	cpi	r16, 0x1A	; 26
 2e8:	11 05       	cpc	r17, r1
 2ea:	94 f2       	brlt	.-92     	; 0x290 <main+0xe2>
 2ec:	64 cf       	rjmp	.-312    	; 0x1b6 <main+0x8>

000002ee <__udivmodsi4>:
 2ee:	a1 e2       	ldi	r26, 0x21	; 33
 2f0:	1a 2e       	mov	r1, r26
 2f2:	aa 1b       	sub	r26, r26
 2f4:	bb 1b       	sub	r27, r27
 2f6:	fd 01       	movw	r30, r26
 2f8:	0d c0       	rjmp	.+26     	; 0x314 <__udivmodsi4_ep>

000002fa <__udivmodsi4_loop>:
 2fa:	aa 1f       	adc	r26, r26
 2fc:	bb 1f       	adc	r27, r27
 2fe:	ee 1f       	adc	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	a2 17       	cp	r26, r18
 304:	b3 07       	cpc	r27, r19
 306:	e4 07       	cpc	r30, r20
 308:	f5 07       	cpc	r31, r21
 30a:	20 f0       	brcs	.+8      	; 0x314 <__udivmodsi4_ep>
 30c:	a2 1b       	sub	r26, r18
 30e:	b3 0b       	sbc	r27, r19
 310:	e4 0b       	sbc	r30, r20
 312:	f5 0b       	sbc	r31, r21

00000314 <__udivmodsi4_ep>:
 314:	66 1f       	adc	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	88 1f       	adc	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	1a 94       	dec	r1
 31e:	69 f7       	brne	.-38     	; 0x2fa <__udivmodsi4_loop>
 320:	60 95       	com	r22
 322:	70 95       	com	r23
 324:	80 95       	com	r24
 326:	90 95       	com	r25
 328:	9b 01       	movw	r18, r22
 32a:	ac 01       	movw	r20, r24
 32c:	bd 01       	movw	r22, r26
 32e:	cf 01       	movw	r24, r30
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
