
ex13_2_professor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000234  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a5f  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b3  00000000  00000000  00000def  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b4  00000000  00000000  000016a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048c  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c3  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002183  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	41 c0       	rjmp	.+130    	; 0xfc <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	91 d0       	rcall	.+290    	; 0x1e6 <main>
  c4:	b5 c0       	rjmp	.+362    	; 0x230 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <InterruptInit>:
	}
}

void InterruptInit()
{
	UCSR1B |= (1 << RXCIE); // UCSR1B |= 0b10000000; // RXCIE bit (7번)을 1로 바꿈
  c8:	ea e9       	ldi	r30, 0x9A	; 154
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	80 83       	st	Z, r24
	sei();
  d2:	78 94       	sei
  d4:	08 95       	ret

000000d6 <Init_USART1>:
}

void Init_USART1()
{
	// UCSR1A = UCSR1A | (0b00011000);
	UCSR1B |= (1 << RXEN) | (1 << TXEN); //0b00011000;
  d6:	ea e9       	ldi	r30, 0x9A	; 154
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 61       	ori	r24, 0x18	; 24
  de:	80 83       	st	Z, r24
	UBRR1L = 95;	// Baud Rate 맞게 설정
  e0:	8f e5       	ldi	r24, 0x5F	; 95
  e2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  e6:	08 95       	ret

000000e8 <putchar_USART1>:
}

void putchar_USART1(char data)
{
	while(1) {
		if (UCSR1A = (UCSR1A & UDRE)) { // UDRE = 0b00100000
  e8:	eb e9       	ldi	r30, 0x9B	; 155
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	90 81       	ld	r25, Z
  ee:	95 70       	andi	r25, 0x05	; 5
  f0:	90 83       	st	Z, r25
  f2:	99 23       	and	r25, r25
  f4:	c9 f3       	breq	.-14     	; 0xe8 <putchar_USART1>
			UDR1 = data;
  f6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  fa:	08 95       	ret

000000fc <__vector_30>:

int ONLED;
int RXNUM;

ISR(USART1_RX_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	0b b6       	in	r0, 0x3b	; 59
 108:	0f 92       	push	r0
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	cf 93       	push	r28
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	char rx_data;
	rx_data = UDR1;
 124:	c0 91 9c 00 	lds	r28, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	putchar_USART1(rx_data);
 128:	8c 2f       	mov	r24, r28
 12a:	de df       	rcall	.-68     	; 0xe8 <putchar_USART1>
	if (rx_data == '\r'){
 12c:	cd 30       	cpi	r28, 0x0D	; 13
 12e:	59 f4       	brne	.+22     	; 0x146 <__vector_30+0x4a>
		ONLED = RXNUM;
 130:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 134:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 138:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ONLED+0x1>
 13c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ONLED>
		putchar_USART1('\n');
 140:	8a e0       	ldi	r24, 0x0A	; 10
 142:	d2 df       	rcall	.-92     	; 0xe8 <putchar_USART1>
 144:	14 c0       	rjmp	.+40     	; 0x16e <__vector_30+0x72>
	}
	else if ((rx_data >= '0') & (rx_data <= '7'))	RXNUM = rx_data - '0';
 146:	80 ed       	ldi	r24, 0xD0	; 208
 148:	8c 0f       	add	r24, r28
 14a:	88 30       	cpi	r24, 0x08	; 8
 14c:	40 f4       	brcc	.+16     	; 0x15e <__vector_30+0x62>
 14e:	8c 2f       	mov	r24, r28
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	c0 97       	sbiw	r24, 0x30	; 48
 154:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 158:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 15c:	08 c0       	rjmp	.+16     	; 0x16e <__vector_30+0x72>
	else if (rx_data == 'q')	RXNUM = -1;
 15e:	c1 37       	cpi	r28, 0x71	; 113
 160:	31 f4       	brne	.+12     	; 0x16e <__vector_30+0x72>
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 16a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	cf 91       	pop	r28
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0b be       	out	0x3b, r0	; 59
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <puts_USART1>:
		}
	}
}

void puts_USART1(char *str)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	while (*str != 0) {
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <puts_USART1+0xc>
		putchar_USART1(*str);
 19e:	a4 df       	rcall	.-184    	; 0xe8 <putchar_USART1>
		str++;
 1a0:	21 96       	adiw	r28, 0x01	; 1
	}
}

void puts_USART1(char *str)
{
	while (*str != 0) {
 1a2:	88 81       	ld	r24, Y
 1a4:	81 11       	cpse	r24, r1
 1a6:	fb cf       	rjmp	.-10     	; 0x19e <puts_USART1+0x8>
		putchar_USART1(*str);
		str++;
	}
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <LEDOnOff>:

void LEDOnOff (int number, int onoff)
{
	char led_state;
	led_state = ~PORTB;
 1ae:	98 b3       	in	r25, 0x18	; 24
 1b0:	90 95       	com	r25
	
	// 특정 위치를 1로 바꾸고 위치만 1인 비트열을 만듦
	if (onoff == 1) {
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	71 05       	cpc	r23, r1
 1b6:	59 f4       	brne	.+22     	; 0x1ce <LEDOnOff+0x20>
		led_state = led_state | (1 << number); // 지정된 위치에만 1을 추가 하고 싶을 때 사용 number 만큼 이동
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <LEDOnOff+0x14>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	8a 95       	dec	r24
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <LEDOnOff+0x10>
 1c6:	92 2b       	or	r25, r18
		PORTB = ~led_state;
 1c8:	90 95       	com	r25
 1ca:	98 bb       	out	0x18, r25	; 24
 1cc:	08 95       	ret
	}
	
	else {
		led_state = led_state & ~(1 << number); // 원하는 자리의 LED 끄기
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <LEDOnOff+0x2a>
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <LEDOnOff+0x26>
 1dc:	20 95       	com	r18
 1de:	92 23       	and	r25, r18
		PORTB = ~led_state;
 1e0:	90 95       	com	r25
 1e2:	98 bb       	out	0x18, r25	; 24
 1e4:	08 95       	ret

000001e6 <main>:
	else if (rx_data == 'q')	RXNUM = -1;
}

int main(void)
{
	Init_USART1();
 1e6:	77 df       	rcall	.-274    	; 0xd6 <Init_USART1>
	InterruptInit();
 1e8:	6f df       	rcall	.-290    	; 0xc8 <InterruptInit>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
	
	puts_USART1("Start \r\n");
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	d3 df       	rcall	.-90     	; 0x196 <puts_USART1>
 1f0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ONLED>
	
	while(1)
	{
		if (ONLED != -1)
 1f4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ONLED+0x1>
 1f8:	8f 3f       	cpi	r24, 0xFF	; 255
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	92 07       	cpc	r25, r18
 1fe:	19 f0       	breq	.+6      	; 0x206 <main+0x20>
			LEDOnOff(ONLED, 1);
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	d4 df       	rcall	.-88     	; 0x1ae <LEDOnOff>
 206:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	9f ef       	ldi	r25, 0xFF	; 255
 20a:	2c e2       	ldi	r18, 0x2C	; 44
 20c:	81 50       	subi	r24, 0x01	; 1
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	20 40       	sbci	r18, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x26>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x30>
 216:	00 00       	nop
 218:	8f ef       	ldi	r24, 0xFF	; 255
		_delay_ms(1000);
		PORTB = 0xff;
 21a:	88 bb       	out	0x18, r24	; 24
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	9f ef       	ldi	r25, 0xFF	; 255
 220:	2c e2       	ldi	r18, 0x2C	; 44
 222:	81 50       	subi	r24, 0x01	; 1
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	20 40       	sbci	r18, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x3c>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x46>
 22c:	00 00       	nop
 22e:	e0 cf       	rjmp	.-64     	; 0x1f0 <main+0xa>

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
