
ex13_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000382  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae2  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008db  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000459  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049e  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f9  00000000  00000000  0000225e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__vector_1>
   6:	00 00       	nop
   8:	b3 c0       	rjmp	.+358    	; 0x170 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ee       	ldi	r30, 0xE4	; 228
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	db d0       	rcall	.+438    	; 0x27a <main>
  c4:	0d c1       	rjmp	.+538    	; 0x2e0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <InterruptInit>:

void InterruptInit()
{
	// PORTD 0 = INT0 외부 인터럽트 사용 설정, 하강 엣지 감지
	// PORTD 1 = INT1 외부 인터럽트 사용 설정, 상승 엣지 감지
	EICRA = (2 << ISC00) | (3 << ISC10); // 0b00001110; // INT0 하강 엣지, INT1 상승 엣지
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = (1 << INT0) | (1 << INT1); // 0b00000011; // INT0, INT1 사용 허가
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	89 bf       	out	0x39, r24	; 57
	sei();	// Interrupt 반응하게 만들어줌 -> 호출 되어야만 해
  d2:	78 94       	sei
  d4:	08 95       	ret

000000d6 <PushButtonDet>:
}

int PushButtonDet(int number)
{
	if (((~PIND >> number) & 0x1) == 1) // 비트 연산자 (~) : 0000_0000 -> 111_1111
  d6:	20 b3       	in	r18, 0x10	; 16
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	20 95       	com	r18
  dc:	30 95       	com	r19
  de:	02 c0       	rjmp	.+4      	; 0xe4 <PushButtonDet+0xe>
  e0:	35 95       	asr	r19
  e2:	27 95       	ror	r18
  e4:	8a 95       	dec	r24
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <PushButtonDet+0xa>
  e8:	c9 01       	movw	r24, r18
  ea:	81 70       	andi	r24, 0x01	; 1
  ec:	99 27       	eor	r25, r25
  ee:	20 ff       	sbrs	r18, 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <PushButtonDet+0x20>
	return 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
	
	else
	return 0;
}
  f6:	08 95       	ret

000000f8 <__vector_1>:
		}
	}
}

ISR(INT0_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	0b b6       	in	r0, 0x3b	; 59
 104:	0f 92       	push	r0
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	8f e7       	ldi	r24, 0x7F	; 127
 122:	94 e0       	ldi	r25, 0x04	; 4
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <__vector_1+0x2c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <__vector_1+0x36>
 12e:	00 00       	nop
	// 100ms 이후에도 버튼이 눌려있어야 눌렸다고 판단함.
	_delay_ms(100);
	if(!PushButtonDet(0))	BtnPressed = 1;
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	d0 df       	rcall	.-96     	; 0xd6 <PushButtonDet>
 136:	89 2b       	or	r24, r25
 138:	31 f4       	brne	.+12     	; 0x146 <__vector_1+0x4e>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 142:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	// 불안정한 신호에 의해서 발생한 인터럽트는 무시함.
	EIFR = 1 << INTF0; //0x1;	// 0b000_0001 => 인터럽트 플래그 clear
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	88 bf       	out	0x38, r24	; 56
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0b be       	out	0x3b, r0	; 59
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_2>:

ISR(INT1_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	0b b6       	in	r0, 0x3b	; 59
 17c:	0f 92       	push	r0
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	8f e7       	ldi	r24, 0x7F	; 127
 19a:	94 e0       	ldi	r25, 0x04	; 4
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <__vector_2+0x2c>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <__vector_2+0x36>
 1a6:	00 00       	nop
	// 100ms 이후에 버튼이 때져야 땠다고 판단함.
	_delay_ms(100);
	if(PushButtonDet(1))	BtnPressed = 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	94 df       	rcall	.-216    	; 0xd6 <PushButtonDet>
 1ae:	89 2b       	or	r24, r25
 1b0:	31 f0       	breq	.+12     	; 0x1be <__vector_2+0x4e>
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	// 불안정한 신호에 의해서 발생한 인터럽트는 무시함.
	EIFR = 1 << INTF1; //0x2;	// 0b000_0010 => 인터럽트 플래그 clear
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	88 bf       	out	0x38, r24	; 56
}
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	bf 91       	pop	r27
 1c8:	af 91       	pop	r26
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	7f 91       	pop	r23
 1d0:	6f 91       	pop	r22
 1d2:	5f 91       	pop	r21
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0b be       	out	0x3b, r0	; 59
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <Init_USART1>:
}

void Init_USART1()
{
	// UCSR1A = UCSR1A | (0b00011000);
	UCSR1B |= 0b00011000;
 1e8:	ea e9       	ldi	r30, 0x9A	; 154
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 61       	ori	r24, 0x18	; 24
 1f0:	80 83       	st	Z, r24
	UBRR1L = 95;	// Baud Rate에 맞게 설정
 1f2:	8f e5       	ldi	r24, 0x5F	; 95
 1f4:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 1f8:	08 95       	ret

000001fa <putchar_USART1>:
}

void putchar_USART1(char data)
{
	while(1){
		if (UCSR1A = (UCSR1A & 0b00100000)){
 1fa:	eb e9       	ldi	r30, 0x9B	; 155
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	90 81       	ld	r25, Z
 200:	90 72       	andi	r25, 0x20	; 32
 202:	90 83       	st	Z, r25
 204:	99 23       	and	r25, r25
 206:	c9 f3       	breq	.-14     	; 0x1fa <putchar_USART1>
			UDR1 = data;
 208:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 20c:	08 95       	ret

0000020e <puts_USART1>:
		}
	}
}

void puts_USART1(char *str)
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	ec 01       	movw	r28, r24

	while (*str != 0) {
 214:	02 c0       	rjmp	.+4      	; 0x21a <puts_USART1+0xc>
		putchar_USART1(*str);
 216:	f1 df       	rcall	.-30     	; 0x1fa <putchar_USART1>
		str++;
 218:	21 96       	adiw	r28, 0x01	; 1
}

void puts_USART1(char *str)
{

	while (*str != 0) {
 21a:	88 81       	ld	r24, Y
 21c:	81 11       	cpse	r24, r1
 21e:	fb cf       	rjmp	.-10     	; 0x216 <puts_USART1+0x8>
		putchar_USART1(*str);
		str++;
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <getchar_USART1>:

unsigned char getchar_USART1()
{
	while(1){
		if (UCSR1A & 0x80){	// if (UCSR1A & (1<<RXC1), 0x80 = 0b10000000;
 226:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 22a:	88 23       	and	r24, r24
 22c:	1c f4       	brge	.+6      	; 0x234 <getchar_USART1+0xe>
			return (UDR1);
 22e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 232:	08 95       	ret
		}
		else if (BtnPressed)	break;
 234:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 238:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 23c:	89 2b       	or	r24, r25
 23e:	99 f3       	breq	.-26     	; 0x226 <getchar_USART1>
	}
}
 240:	08 95       	ret

00000242 <LEDOnOff>:

void LEDOnOff (int number, int onoff)
{
	char led_state;
	led_state = ~PORTB;
 242:	98 b3       	in	r25, 0x18	; 24
 244:	90 95       	com	r25
	
	// 특정 위치를 1로 바꾸고 위치만 1인 비트열을 만듦
	if (onoff == 1){
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	71 05       	cpc	r23, r1
 24a:	59 f4       	brne	.+22     	; 0x262 <LEDOnOff+0x20>
		led_state = led_state | (1 << number); // 지정된 위치에만 1을 추가 하고 싶을 때 사용 number 만큼 이동
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <LEDOnOff+0x14>
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	8a 95       	dec	r24
 258:	e2 f7       	brpl	.-8      	; 0x252 <LEDOnOff+0x10>
 25a:	92 2b       	or	r25, r18
		PORTB = ~led_state;
 25c:	90 95       	com	r25
 25e:	98 bb       	out	0x18, r25	; 24
 260:	08 95       	ret
	}
	
	else{
		led_state = led_state & ~(1 << number); // 원하는 자리의 LED 끄기
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <LEDOnOff+0x2a>
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	8a 95       	dec	r24
 26e:	e2 f7       	brpl	.-8      	; 0x268 <LEDOnOff+0x26>
 270:	20 95       	com	r18
 272:	92 23       	and	r25, r18
		PORTB = ~led_state;
 274:	90 95       	com	r25
 276:	98 bb       	out	0x18, r25	; 24
 278:	08 95       	ret

0000027a <main>:

int BtnPressed = 0;

int main(void)
{
	DDRB = 0xff;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x0;
 27e:	11 ba       	out	0x11, r1	; 17
	
	PORTB = 0xff;
 280:	88 bb       	out	0x18, r24	; 24
	
	InterruptInit();
 282:	22 df       	rcall	.-444    	; 0xc8 <InterruptInit>
	
	char rx_data;
	Init_USART1();
 284:	b1 df       	rcall	.-158    	; 0x1e8 <Init_USART1>
 286:	80 e0       	ldi	r24, 0x00	; 0
	
	puts_USART1("Start \r\n");
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	c1 df       	rcall	.-126    	; 0x20e <puts_USART1>
 28c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
	
	while (1)
	{
		if (BtnPressed) {
 290:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 294:	89 2b       	or	r24, r25
 296:	69 f0       	breq	.+26     	; 0x2b2 <main+0x38>
 298:	28 b3       	in	r18, 0x18	; 24
			PORTB = (1 << PORTB);
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <main+0x2a>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	2a 95       	dec	r18
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <main+0x26>
 2a8:	88 bb       	out	0x18, r24	; 24
 2aa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
			BtnPressed = 0;
 2ae:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
		}
		
		rx_data = getchar_USART1();
 2b2:	b9 df       	rcall	.-142    	; 0x226 <getchar_USART1>
 2b4:	c8 2f       	mov	r28, r24
 2b6:	a1 df       	rcall	.-190    	; 0x1fa <putchar_USART1>
		putchar_USART1(rx_data);
 2b8:	cd 30       	cpi	r28, 0x0D	; 13
		if (rx_data == '\r')	putchar_USART1('\n');
 2ba:	11 f4       	brne	.+4      	; 0x2c0 <main+0x46>
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
 2be:	9d df       	rcall	.-198    	; 0x1fa <putchar_USART1>
 2c0:	80 ed       	ldi	r24, 0xD0	; 208
 2c2:	8c 0f       	add	r24, r28
		
		if ((rx_data >= '0') && (rx_data <= '7')) {
 2c4:	88 30       	cpi	r24, 0x08	; 8
 2c6:	38 f4       	brcc	.+14     	; 0x2d6 <main+0x5c>
 2c8:	8c 2f       	mov	r24, r28
			LEDOnOff(rx_data - '0', 1);
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	c0 97       	sbiw	r24, 0x30	; 48
 2d2:	b7 df       	rcall	.-146    	; 0x242 <LEDOnOff>
 2d4:	db cf       	rjmp	.-74     	; 0x28c <main+0x12>
 2d6:	c1 37       	cpi	r28, 0x71	; 113
 2d8:	c9 f6       	brne	.-78     	; 0x28c <main+0x12>
		}
		
		else if (rx_data == 'q') {
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	88 bb       	out	0x18, r24	; 24
			PORTB = 0xff;
 2de:	d6 cf       	rjmp	.-84     	; 0x28c <main+0x12>

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
