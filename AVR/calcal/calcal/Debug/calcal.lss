
calcal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000004b6  0000052a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b90  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000903  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000569  00000000  00000000  00001a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00002004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000488  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000682  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002b8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 eb       	ldi	r30, 0xB6	; 182
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	6c d0       	rcall	.+216    	; 0x18c <main>
  b4:	fe c1       	rjmp	.+1020   	; 0x4b2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <row_scan>:

char row_scan(char row) // row  0,1,2,3
{
	char col = -1; //0xff
	char pin_info;
	if (row == 0)
  b8:	81 11       	cpse	r24, r1
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <row_scan+0xa>
	PORTC = 0x0e; //1110
  bc:	8e e0       	ldi	r24, 0x0E	; 14
  be:	85 bb       	out	0x15, r24	; 21
  c0:	0e c0       	rjmp	.+28     	; 0xde <row_scan+0x26>
	else if (row == 1)
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	19 f4       	brne	.+6      	; 0xcc <row_scan+0x14>
	PORTC = 0x0d; //1101
  c6:	8d e0       	ldi	r24, 0x0D	; 13
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	09 c0       	rjmp	.+18     	; 0xde <row_scan+0x26>
	else if (row == 2)
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	19 f4       	brne	.+6      	; 0xd6 <row_scan+0x1e>
	PORTC = 0x0b; //1011
  d0:	8b e0       	ldi	r24, 0x0B	; 11
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	04 c0       	rjmp	.+8      	; 0xde <row_scan+0x26>
	else if (row == 3)
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	11 f4       	brne	.+4      	; 0xde <row_scan+0x26>
	PORTC = 0x07; //0111
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	81 e3       	ldi	r24, 0x31	; 49
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <row_scan+0x28>
  e4:	00 00       	nop

	_delay_us(10);

	pin_info = PINC >> 4;
  e6:	83 b3       	in	r24, 0x13	; 19
  e8:	82 95       	swap	r24
  ea:	8f 70       	andi	r24, 0x0F	; 15

	if (pin_info == 0x1)
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	41 f0       	breq	.+16     	; 0x100 <row_scan+0x48>
	col = 0; // 0001
	else if (pin_info == 0x2)
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	41 f0       	breq	.+16     	; 0x104 <row_scan+0x4c>
	col = 1; // 0010
	else if (pin_info == 0x4)
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	41 f0       	breq	.+16     	; 0x108 <row_scan+0x50>
	col = 2; // 0100
	else if (pin_info == 0x8)
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	41 f0       	breq	.+16     	; 0x10c <row_scan+0x54>
	}
}

char row_scan(char row) // row  0,1,2,3
{
	char col = -1; //0xff
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	08 95       	ret
	_delay_us(10);

	pin_info = PINC >> 4;

	if (pin_info == 0x1)
	col = 0; // 0001
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret
	else if (pin_info == 0x2)
	col = 1; // 0010
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret
	else if (pin_info == 0x4)
	col = 2; // 0100
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	08 95       	ret
	else if (pin_info == 0x8)
	col = 3; // 1000
 10c:	83 e0       	ldi	r24, 0x03	; 3

	return (col); //0,1,2,3
}
 10e:	08 95       	ret

00000110 <FND_Display>:
	return (0xff);
}

void FND_Display(int idx, int number, int dot)
{
	if (idx == 0)
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	19 f4       	brne	.+6      	; 0x11a <FND_Display+0xa>
	PORTE = 0x10;
 114:	80 e1       	ldi	r24, 0x10	; 16
 116:	83 b9       	out	0x03, r24	; 3
 118:	10 c0       	rjmp	.+32     	; 0x13a <FND_Display+0x2a>
	else if (idx == 1)
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	91 05       	cpc	r25, r1
 11e:	19 f4       	brne	.+6      	; 0x126 <FND_Display+0x16>
	PORTE = 0x20;
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	83 b9       	out	0x03, r24	; 3
 124:	0a c0       	rjmp	.+20     	; 0x13a <FND_Display+0x2a>
	else if (idx == 2)
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	91 05       	cpc	r25, r1
 12a:	19 f4       	brne	.+6      	; 0x132 <FND_Display+0x22>
	PORTE = 0x40;
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	83 b9       	out	0x03, r24	; 3
 130:	04 c0       	rjmp	.+8      	; 0x13a <FND_Display+0x2a>
	else if (idx == 3)
 132:	03 97       	sbiw	r24, 0x03	; 3
 134:	11 f4       	brne	.+4      	; 0x13a <FND_Display+0x2a>
	PORTE = 0x80;
 136:	80 e8       	ldi	r24, 0x80	; 128
 138:	83 b9       	out	0x03, r24	; 3

	PORTB = Port_char[number];
 13a:	fb 01       	movw	r30, r22
 13c:	e0 5e       	subi	r30, 0xE0	; 224
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	80 81       	ld	r24, Z
 142:	88 bb       	out	0x18, r24	; 24

	if (dot == 1)
 144:	41 30       	cpi	r20, 0x01	; 1
 146:	51 05       	cpc	r21, r1
 148:	19 f4       	brne	.+6      	; 0x150 <FND_Display+0x40>
	PORTB = PORTB & 0x7f;
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	8f 77       	andi	r24, 0x7F	; 127
 14e:	88 bb       	out	0x18, r24	; 24
 150:	08 95       	ret

00000152 <debounce_delay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	8f e3       	ldi	r24, 0x3F	; 63
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <debounce_delay+0x6>
 160:	00 c0       	rjmp	.+0      	; 0x162 <debounce_delay+0x10>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <key_scan>:

	return (col); //0,1,2,3
}

char key_scan()
{
 166:	cf 93       	push	r28
	char col;
	char row;
	char key = 0xff;

	for (row = 0; row < 4; row++)
 168:	c0 e0       	ldi	r28, 0x00	; 0
 16a:	0b c0       	rjmp	.+22     	; 0x182 <key_scan+0x1c>
	{
		col = row_scan(row);
 16c:	8c 2f       	mov	r24, r28
 16e:	a4 df       	rcall	.-184    	; 0xb8 <row_scan>
		if (col != 0xff)
 170:	8f 3f       	cpi	r24, 0xFF	; 255
 172:	31 f0       	breq	.+12     	; 0x180 <key_scan+0x1a>
		{
			key = 4 * row + col;
 174:	cc 0f       	add	r28, r28
 176:	cc 0f       	add	r28, r28
			debounce_delay(); // 디바운싱 딜레이 추가
 178:	c8 0f       	add	r28, r24
 17a:	eb df       	rcall	.-42     	; 0x152 <debounce_delay>
			return key; // key 변수 할당 없이 바로 반환
 17c:	8c 2f       	mov	r24, r28
 17e:	04 c0       	rjmp	.+8      	; 0x188 <key_scan+0x22>
{
	char col;
	char row;
	char key = 0xff;

	for (row = 0; row < 4; row++)
 180:	cf 5f       	subi	r28, 0xFF	; 255
 182:	c4 30       	cpi	r28, 0x04	; 4
 184:	98 f3       	brcs	.-26     	; 0x16c <key_scan+0x6>
			return key; // key 변수 할당 없이 바로 반환
			break;
		}
	}

	return (0xff);
 186:	8f ef       	ldi	r24, 0xFF	; 255
}
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <main>:
char key_scan(void);
void FND_Display(int idx, int number, int dot);
void debounce_delay(void);

int main(void)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	28 97       	sbiw	r28, 0x08	; 8
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xff;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x0f;
 1a4:	9f e0       	ldi	r25, 0x0F	; 15
 1a6:	94 bb       	out	0x14, r25	; 20
	DDRD = 0;
 1a8:	11 ba       	out	0x11, r1	; 17
	DDRE = 0xff;
 1aa:	82 b9       	out	0x02, r24	; 2

	PORTE = 0x80;
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	83 b9       	out	0x03, r24	; 3

	int prev_key = 0xff;
	int idx = 0;
	int number[4] = {0, 0, 0, 0};
 1b0:	fe 01       	movw	r30, r28
 1b2:	31 96       	adiw	r30, 0x01	; 1
 1b4:	88 e0       	ldi	r24, 0x08	; 8
 1b6:	df 01       	movw	r26, r30
 1b8:	1d 92       	st	X+, r1
 1ba:	8a 95       	dec	r24
 1bc:	e9 f7       	brne	.-6      	; 0x1b8 <main+0x2c>
	int i;
	int operand1 = 0, operand2 = 0, result = 0;
	char operation = 0;
 1be:	71 2c       	mov	r7, r1

	int prev_key = 0xff;
	int idx = 0;
	int number[4] = {0, 0, 0, 0};
	int i;
	int operand1 = 0, operand2 = 0, result = 0;
 1c0:	a1 2c       	mov	r10, r1
 1c2:	b1 2c       	mov	r11, r1
 1c4:	c1 2c       	mov	r12, r1
 1c6:	d1 2c       	mov	r13, r1
	DDRE = 0xff;

	PORTE = 0x80;

	int prev_key = 0xff;
	int idx = 0;
 1c8:	00 e0       	ldi	r16, 0x00	; 0
 1ca:	10 e0       	ldi	r17, 0x00	; 0
	DDRD = 0;
	DDRE = 0xff;

	PORTE = 0x80;

	int prev_key = 0xff;
 1cc:	88 24       	eor	r8, r8
 1ce:	8a 94       	dec	r8
 1d0:	91 2c       	mov	r9, r1
	char operation = 0;

	/* Replace with your application code */
	while (1)
	{
		char key = key_scan();
 1d2:	c9 df       	rcall	.-110    	; 0x166 <key_scan>
		int key_value = key_info[key];
 1d4:	e8 2e       	mov	r14, r24
 1d6:	f1 2c       	mov	r15, r1
 1d8:	f7 01       	movw	r30, r14
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	e0 50       	subi	r30, 0x00	; 0
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	20 81       	ld	r18, Z
 1e4:	31 81       	ldd	r19, Z+1	; 0x01

		if ((key != 0xff) && (prev_key == 0xff))
 1e6:	8f 3f       	cpi	r24, 0xFF	; 255
 1e8:	09 f4       	brne	.+2      	; 0x1ec <main+0x60>
 1ea:	20 c1       	rjmp	.+576    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 1ec:	bf ef       	ldi	r27, 0xFF	; 255
 1ee:	8b 16       	cp	r8, r27
 1f0:	91 04       	cpc	r9, r1
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <main+0x6a>
 1f4:	1b c1       	rjmp	.+566    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		{
			if ((key_value >= 0) && (key_value <= 9))
 1f6:	2a 30       	cpi	r18, 0x0A	; 10
 1f8:	31 05       	cpc	r19, r1
 1fa:	d8 f0       	brcs	.+54     	; 0x232 <main+0xa6>
 1fc:	22 c0       	rjmp	.+68     	; 0x242 <main+0xb6>
			{
				for (i = 3; i > 0; i--)
				number[i] = number[i - 1];
 1fe:	ac 01       	movw	r20, r24
 200:	41 50       	subi	r20, 0x01	; 1
 202:	51 09       	sbc	r21, r1
 204:	fa 01       	movw	r30, r20
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	6c 0f       	add	r22, r28
 210:	7d 1f       	adc	r23, r29
 212:	e6 0f       	add	r30, r22
 214:	f7 1f       	adc	r31, r23
 216:	60 81       	ld	r22, Z
 218:	71 81       	ldd	r23, Z+1	; 0x01
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	e1 e0       	ldi	r30, 0x01	; 1
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	ec 0f       	add	r30, r28
 224:	fd 1f       	adc	r31, r29
 226:	e8 0f       	add	r30, r24
 228:	f9 1f       	adc	r31, r25
 22a:	71 83       	std	Z+1, r23	; 0x01
 22c:	60 83       	st	Z, r22

		if ((key != 0xff) && (prev_key == 0xff))
		{
			if ((key_value >= 0) && (key_value <= 9))
			{
				for (i = 3; i > 0; i--)
 22e:	ca 01       	movw	r24, r20
 230:	02 c0       	rjmp	.+4      	; 0x236 <main+0xaa>
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	18 16       	cp	r1, r24
 238:	19 06       	cpc	r1, r25
 23a:	0c f3       	brlt	.-62     	; 0x1fe <main+0x72>
				number[i] = number[i - 1];
				number[0] = key_value;
 23c:	3a 83       	std	Y+2, r19	; 0x02
 23e:	29 83       	std	Y+1, r18	; 0x01
 240:	f5 c0       	rjmp	.+490    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			}
			else if (key_value == 100)
 242:	24 36       	cpi	r18, 0x64	; 100
 244:	31 05       	cpc	r19, r1
 246:	01 f5       	brne	.+64     	; 0x288 <main+0xfc>
 248:	17 c0       	rjmp	.+46     	; 0x278 <main+0xec>
			{
				for (i = 0; i < 4; i++)
				number[i] = number[i + 1];
 24a:	9c 01       	movw	r18, r24
 24c:	2f 5f       	subi	r18, 0xFF	; 255
 24e:	3f 4f       	sbci	r19, 0xFF	; 255
 250:	f9 01       	movw	r30, r18
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	a1 e0       	ldi	r26, 0x01	; 1
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	ac 0f       	add	r26, r28
 25c:	bd 1f       	adc	r27, r29
 25e:	ea 0f       	add	r30, r26
 260:	fb 1f       	adc	r31, r27
 262:	40 81       	ld	r20, Z
 264:	51 81       	ldd	r21, Z+1	; 0x01
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	fd 01       	movw	r30, r26
 26c:	e8 0f       	add	r30, r24
 26e:	f9 1f       	adc	r31, r25
 270:	51 83       	std	Z+1, r21	; 0x01
 272:	40 83       	st	Z, r20
				number[i] = number[i - 1];
				number[0] = key_value;
			}
			else if (key_value == 100)
			{
				for (i = 0; i < 4; i++)
 274:	c9 01       	movw	r24, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <main+0xf0>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	84 30       	cpi	r24, 0x04	; 4
 27e:	91 05       	cpc	r25, r1
 280:	24 f3       	brlt	.-56     	; 0x24a <main+0xbe>
				number[i] = number[i + 1];
				number[3] = 0;
 282:	18 86       	std	Y+8, r1	; 0x08
 284:	1f 82       	std	Y+7, r1	; 0x07
 286:	d2 c0       	rjmp	.+420    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			}
			else if (key_value == 101)
 288:	25 36       	cpi	r18, 0x65	; 101
 28a:	31 05       	cpc	r19, r1
 28c:	c9 f4       	brne	.+50     	; 0x2c0 <main+0x134>
 28e:	0d c0       	rjmp	.+26     	; 0x2aa <main+0x11e>
			{
				for (i = 0; i < 4; i++)
				number[i] = 0;
 290:	fc 01       	movw	r30, r24
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	2c 0f       	add	r18, r28
 29c:	3d 1f       	adc	r19, r29
 29e:	e2 0f       	add	r30, r18
 2a0:	f3 1f       	adc	r31, r19
 2a2:	11 82       	std	Z+1, r1	; 0x01
 2a4:	10 82       	st	Z, r1
				number[i] = number[i + 1];
				number[3] = 0;
			}
			else if (key_value == 101)
			{
				for (i = 0; i < 4; i++)
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <main+0x122>
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	84 30       	cpi	r24, 0x04	; 4
 2b0:	91 05       	cpc	r25, r1
 2b2:	74 f3       	brlt	.-36     	; 0x290 <main+0x104>
				number[i] = 0;
				operand1 = operand2 = result = 0;
				operation = 0;
 2b4:	71 2c       	mov	r7, r1
			}
			else if (key_value == 101)
			{
				for (i = 0; i < 4; i++)
				number[i] = 0;
				operand1 = operand2 = result = 0;
 2b6:	a1 2c       	mov	r10, r1
 2b8:	b1 2c       	mov	r11, r1
 2ba:	c1 2c       	mov	r12, r1
 2bc:	d1 2c       	mov	r13, r1
 2be:	b6 c0       	rjmp	.+364    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				operation = 0;
			}
			else if (key_value == 102 || key_value == 103 || key_value == 104 || key_value == 105)
 2c0:	c9 01       	movw	r24, r18
 2c2:	86 56       	subi	r24, 0x66	; 102
 2c4:	91 09       	sbc	r25, r1
 2c6:	04 97       	sbiw	r24, 0x04	; 4
 2c8:	f0 f5       	brcc	.+124    	; 0x346 <main+0x1ba>
			{
				operand1 = number[3] * 1000 + number[2] * 100 + number[1] * 10 + number[0];
 2ca:	4f 81       	ldd	r20, Y+7	; 0x07
 2cc:	58 85       	ldd	r21, Y+8	; 0x08
 2ce:	88 ee       	ldi	r24, 0xE8	; 232
 2d0:	93 e0       	ldi	r25, 0x03	; 3
 2d2:	48 9f       	mul	r20, r24
 2d4:	60 01       	movw	r12, r0
 2d6:	49 9f       	mul	r20, r25
 2d8:	d0 0c       	add	r13, r0
 2da:	58 9f       	mul	r21, r24
 2dc:	d0 0c       	add	r13, r0
 2de:	11 24       	eor	r1, r1
 2e0:	4d 81       	ldd	r20, Y+5	; 0x05
 2e2:	5e 81       	ldd	r21, Y+6	; 0x06
 2e4:	34 e6       	ldi	r19, 0x64	; 100
 2e6:	34 9f       	mul	r19, r20
 2e8:	c0 01       	movw	r24, r0
 2ea:	35 9f       	mul	r19, r21
 2ec:	90 0d       	add	r25, r0
 2ee:	11 24       	eor	r1, r1
 2f0:	c8 0e       	add	r12, r24
 2f2:	d9 1e       	adc	r13, r25
 2f4:	8b 81       	ldd	r24, Y+3	; 0x03
 2f6:	9c 81       	ldd	r25, Y+4	; 0x04
 2f8:	bc 01       	movw	r22, r24
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	ac 01       	movw	r20, r24
 300:	44 0f       	add	r20, r20
 302:	55 1f       	adc	r21, r21
 304:	44 0f       	add	r20, r20
 306:	55 1f       	adc	r21, r21
 308:	44 0f       	add	r20, r20
 30a:	55 1f       	adc	r21, r21
 30c:	cb 01       	movw	r24, r22
 30e:	84 0f       	add	r24, r20
 310:	95 1f       	adc	r25, r21
 312:	8c 0d       	add	r24, r12
 314:	9d 1d       	adc	r25, r13
 316:	c9 80       	ldd	r12, Y+1	; 0x01
 318:	da 80       	ldd	r13, Y+2	; 0x02
 31a:	c8 0e       	add	r12, r24
 31c:	d9 1e       	adc	r13, r25
				operation = key_value;
 31e:	72 2e       	mov	r7, r18
				for (i = 0; i < 4; i++)
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0c c0       	rjmp	.+24     	; 0x33e <main+0x1b2>
				number[i] = 0;
 326:	fc 01       	movw	r30, r24
 328:	ee 0f       	add	r30, r30
 32a:	ff 1f       	adc	r31, r31
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	4c 0f       	add	r20, r28
 332:	5d 1f       	adc	r21, r29
 334:	e4 0f       	add	r30, r20
 336:	f5 1f       	adc	r31, r21
 338:	11 82       	std	Z+1, r1	; 0x01
 33a:	10 82       	st	Z, r1
			}
			else if (key_value == 102 || key_value == 103 || key_value == 104 || key_value == 105)
			{
				operand1 = number[3] * 1000 + number[2] * 100 + number[1] * 10 + number[0];
				operation = key_value;
				for (i = 0; i < 4; i++)
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	84 30       	cpi	r24, 0x04	; 4
 340:	91 05       	cpc	r25, r1
 342:	8c f3       	brlt	.-30     	; 0x326 <main+0x19a>
 344:	73 c0       	rjmp	.+230    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				number[i] = 0;
			}
			else if (key_value == 106)
 346:	2a 36       	cpi	r18, 0x6A	; 106
 348:	31 05       	cpc	r19, r1
 34a:	09 f0       	breq	.+2      	; 0x34e <main+0x1c2>
 34c:	6f c0       	rjmp	.+222    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			{
				operand2 = number[3] * 1000 + number[2] * 100 + number[1] * 10 + number[0];
 34e:	2f 81       	ldd	r18, Y+7	; 0x07
 350:	38 85       	ldd	r19, Y+8	; 0x08
 352:	88 ee       	ldi	r24, 0xE8	; 232
 354:	93 e0       	ldi	r25, 0x03	; 3
 356:	28 9f       	mul	r18, r24
 358:	b0 01       	movw	r22, r0
 35a:	29 9f       	mul	r18, r25
 35c:	70 0d       	add	r23, r0
 35e:	38 9f       	mul	r19, r24
 360:	70 0d       	add	r23, r0
 362:	11 24       	eor	r1, r1
 364:	2d 81       	ldd	r18, Y+5	; 0x05
 366:	3e 81       	ldd	r19, Y+6	; 0x06
 368:	44 e6       	ldi	r20, 0x64	; 100
 36a:	42 9f       	mul	r20, r18
 36c:	c0 01       	movw	r24, r0
 36e:	43 9f       	mul	r20, r19
 370:	90 0d       	add	r25, r0
 372:	11 24       	eor	r1, r1
 374:	68 0f       	add	r22, r24
 376:	79 1f       	adc	r23, r25
 378:	8b 81       	ldd	r24, Y+3	; 0x03
 37a:	9c 81       	ldd	r25, Y+4	; 0x04
 37c:	9c 01       	movw	r18, r24
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	82 0f       	add	r24, r18
 390:	93 1f       	adc	r25, r19
 392:	86 0f       	add	r24, r22
 394:	97 1f       	adc	r25, r23
 396:	69 81       	ldd	r22, Y+1	; 0x01
 398:	7a 81       	ldd	r23, Y+2	; 0x02
 39a:	68 0f       	add	r22, r24
 39c:	79 1f       	adc	r23, r25
				switch (operation)
 39e:	57 e6       	ldi	r21, 0x67	; 103
 3a0:	75 16       	cp	r7, r21
 3a2:	89 f0       	breq	.+34     	; 0x3c6 <main+0x23a>
 3a4:	57 15       	cp	r21, r7
 3a6:	20 f0       	brcs	.+8      	; 0x3b0 <main+0x224>
 3a8:	86 e6       	ldi	r24, 0x66	; 102
 3aa:	78 16       	cp	r7, r24
 3ac:	41 f0       	breq	.+16     	; 0x3be <main+0x232>
 3ae:	1e c0       	rjmp	.+60     	; 0x3ec <main+0x260>
 3b0:	98 e6       	ldi	r25, 0x68	; 104
 3b2:	79 16       	cp	r7, r25
 3b4:	61 f0       	breq	.+24     	; 0x3ce <main+0x242>
 3b6:	a9 e6       	ldi	r26, 0x69	; 105
 3b8:	7a 16       	cp	r7, r26
 3ba:	89 f0       	breq	.+34     	; 0x3de <main+0x252>
 3bc:	17 c0       	rjmp	.+46     	; 0x3ec <main+0x260>
				{
					case 102:
					result = operand1 + operand2;
 3be:	56 01       	movw	r10, r12
 3c0:	a6 0e       	add	r10, r22
 3c2:	b7 1e       	adc	r11, r23
					break;
 3c4:	15 c0       	rjmp	.+42     	; 0x3f0 <main+0x264>
					case 103:
					result = operand1 - operand2;
 3c6:	56 01       	movw	r10, r12
 3c8:	a6 1a       	sub	r10, r22
 3ca:	b7 0a       	sbc	r11, r23
					break;
 3cc:	11 c0       	rjmp	.+34     	; 0x3f0 <main+0x264>
					case 104:
					result = operand1 * operand2;
 3ce:	c6 9e       	mul	r12, r22
 3d0:	50 01       	movw	r10, r0
 3d2:	c7 9e       	mul	r12, r23
 3d4:	b0 0c       	add	r11, r0
 3d6:	d6 9e       	mul	r13, r22
 3d8:	b0 0c       	add	r11, r0
 3da:	11 24       	eor	r1, r1
					break;
 3dc:	09 c0       	rjmp	.+18     	; 0x3f0 <main+0x264>
					case 105:
					if (operand2 != 0)
 3de:	61 15       	cp	r22, r1
 3e0:	71 05       	cpc	r23, r1
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <main+0x264>
					result = operand1 / operand2;
 3e4:	c6 01       	movw	r24, r12
 3e6:	3e d0       	rcall	.+124    	; 0x464 <__divmodhi4>
 3e8:	5b 01       	movw	r10, r22
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <main+0x264>
					break;
					default:
					result = 0;
 3ec:	a1 2c       	mov	r10, r1
 3ee:	b1 2c       	mov	r11, r1
					break;
				}
				number[0] = result % 10;
 3f0:	2a e0       	ldi	r18, 0x0A	; 10
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	c5 01       	movw	r24, r10
 3f6:	b9 01       	movw	r22, r18
 3f8:	35 d0       	rcall	.+106    	; 0x464 <__divmodhi4>
 3fa:	9a 83       	std	Y+2, r25	; 0x02
 3fc:	89 83       	std	Y+1, r24	; 0x01
				number[1] = (result / 10) % 10;
 3fe:	cb 01       	movw	r24, r22
 400:	b9 01       	movw	r22, r18
 402:	30 d0       	rcall	.+96     	; 0x464 <__divmodhi4>
 404:	9c 83       	std	Y+4, r25	; 0x04
 406:	8b 83       	std	Y+3, r24	; 0x03
				number[2] = (result / 100) % 10;
 408:	c5 01       	movw	r24, r10
 40a:	64 e6       	ldi	r22, 0x64	; 100
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	2a d0       	rcall	.+84     	; 0x464 <__divmodhi4>
 410:	cb 01       	movw	r24, r22
 412:	b9 01       	movw	r22, r18
 414:	27 d0       	rcall	.+78     	; 0x464 <__divmodhi4>
 416:	9e 83       	std	Y+6, r25	; 0x06
 418:	8d 83       	std	Y+5, r24	; 0x05
				number[3] = (result / 1000) % 10;
 41a:	c5 01       	movw	r24, r10
 41c:	68 ee       	ldi	r22, 0xE8	; 232
 41e:	73 e0       	ldi	r23, 0x03	; 3
 420:	21 d0       	rcall	.+66     	; 0x464 <__divmodhi4>
 422:	cb 01       	movw	r24, r22
 424:	b9 01       	movw	r22, r18
 426:	1e d0       	rcall	.+60     	; 0x464 <__divmodhi4>
 428:	98 87       	std	Y+8, r25	; 0x08
 42a:	8f 83       	std	Y+7, r24	; 0x07
 42c:	03 30       	cpi	r16, 0x03	; 3
			}
		}

		if (idx == 3)
 42e:	11 05       	cpc	r17, r1
 430:	19 f0       	breq	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 432:	0f 5f       	subi	r16, 0xFF	; 255
		idx = 0;
		else
		idx++;
 434:	1f 4f       	sbci	r17, 0xFF	; 255
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	00 e0       	ldi	r16, 0x00	; 0
				number[3] = (result / 1000) % 10;
			}
		}

		if (idx == 3)
		idx = 0;
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	f8 01       	movw	r30, r16
		else
		idx++;

		FND_Display(idx, number[idx], 0);
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	2c 0f       	add	r18, r28
 448:	3d 1f       	adc	r19, r29
 44a:	e2 0f       	add	r30, r18
 44c:	f3 1f       	adc	r31, r19
 44e:	60 81       	ld	r22, Z
 450:	71 81       	ldd	r23, Z+1	; 0x01
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	c8 01       	movw	r24, r16
 458:	5b de       	rcall	.-842    	; 0x110 <FND_Display>
 45a:	35 e0       	ldi	r19, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45c:	3a 95       	dec	r19
 45e:	f1 f7       	brne	.-4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 460:	47 01       	movw	r8, r14

		_delay_us(1);
		prev_key = key;
 462:	b7 ce       	rjmp	.-658    	; 0x1d2 <main+0x46>

00000464 <__divmodhi4>:
	}
 464:	97 fb       	bst	r25, 7
 466:	07 2e       	mov	r0, r23
 468:	16 f4       	brtc	.+4      	; 0x46e <__divmodhi4+0xa>
 46a:	00 94       	com	r0
 46c:	06 d0       	rcall	.+12     	; 0x47a <__divmodhi4_neg1>
 46e:	77 fd       	sbrc	r23, 7
 470:	08 d0       	rcall	.+16     	; 0x482 <__divmodhi4_neg2>
 472:	0b d0       	rcall	.+22     	; 0x48a <__udivmodhi4>
 474:	07 fc       	sbrc	r0, 7
 476:	05 d0       	rcall	.+10     	; 0x482 <__divmodhi4_neg2>
 478:	3e f4       	brtc	.+14     	; 0x488 <__divmodhi4_exit>

0000047a <__divmodhi4_neg1>:
 47a:	90 95       	com	r25
 47c:	81 95       	neg	r24
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	08 95       	ret

00000482 <__divmodhi4_neg2>:
 482:	70 95       	com	r23
 484:	61 95       	neg	r22
 486:	7f 4f       	sbci	r23, 0xFF	; 255

00000488 <__divmodhi4_exit>:
 488:	08 95       	ret

0000048a <__udivmodhi4>:
 48a:	aa 1b       	sub	r26, r26
 48c:	bb 1b       	sub	r27, r27
 48e:	51 e1       	ldi	r21, 0x11	; 17
 490:	07 c0       	rjmp	.+14     	; 0x4a0 <__udivmodhi4_ep>

00000492 <__udivmodhi4_loop>:
 492:	aa 1f       	adc	r26, r26
 494:	bb 1f       	adc	r27, r27
 496:	a6 17       	cp	r26, r22
 498:	b7 07       	cpc	r27, r23
 49a:	10 f0       	brcs	.+4      	; 0x4a0 <__udivmodhi4_ep>
 49c:	a6 1b       	sub	r26, r22
 49e:	b7 0b       	sbc	r27, r23

000004a0 <__udivmodhi4_ep>:
 4a0:	88 1f       	adc	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	5a 95       	dec	r21
 4a6:	a9 f7       	brne	.-22     	; 0x492 <__udivmodhi4_loop>
 4a8:	80 95       	com	r24
 4aa:	90 95       	com	r25
 4ac:	bc 01       	movw	r22, r24
 4ae:	cd 01       	movw	r24, r26
 4b0:	08 95       	ret

000004b2 <_exit>:
 4b2:	f8 94       	cli

000004b4 <__stop_program>:
 4b4:	ff cf       	rjmp	.-2      	; 0x4b4 <__stop_program>
