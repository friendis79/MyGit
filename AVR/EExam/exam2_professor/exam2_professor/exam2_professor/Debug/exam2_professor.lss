
exam2_professor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000989  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000843  00000000  00000000  00000bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037b  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046b  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e4  00000000  00000000  00001c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001e3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	13 d0       	rcall	.+38     	; 0xc0 <main>
  9a:	76 c0       	rjmp	.+236    	; 0x188 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <PushButtonDet>:
	}
}

int PushButtonDet(int number)
{
	if (((~PIND >> number) & 0x1) == 1) // 비트 연산자 (~) : 0000 0000 -> 1111 1111
  9e:	20 b3       	in	r18, 0x10	; 16
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	20 95       	com	r18
  a4:	30 95       	com	r19
  a6:	02 c0       	rjmp	.+4      	; 0xac <PushButtonDet+0xe>
  a8:	35 95       	asr	r19
  aa:	27 95       	ror	r18
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <PushButtonDet+0xa>
  b0:	c9 01       	movw	r24, r18
  b2:	81 70       	andi	r24, 0x01	; 1
  b4:	99 27       	eor	r25, r25
  b6:	20 ff       	sbrs	r18, 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <PushButtonDet+0x20>
	return 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
	
	else
	return 0;
  be:	08 95       	ret

000000c0 <main>:

int PushButtonDet (int number);

int main(void)
{
	DDRB = 0xff;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff; // 전원을 키고 난 후의 초깃값을 지정
  c4:	88 bb       	out	0x18, r24	; 24
	
	DDRD = 0;
  c6:	11 ba       	out	0x11, r1	; 17
	
	int led_state = 0;
	int time_count_1s = 0;
	int button0, button1, button2;
	int prev_button0 = 0, prev_button1 = 0, prev_button2 = 0;
  c8:	a1 2c       	mov	r10, r1
  ca:	b1 2c       	mov	r11, r1
  cc:	81 2c       	mov	r8, r1
  ce:	91 2c       	mov	r9, r1
  d0:	61 2c       	mov	r6, r1
  d2:	71 2c       	mov	r7, r1
	PORTB = 0xff; // 전원을 키고 난 후의 초깃값을 지정
	
	DDRD = 0;
	
	int led_state = 0;
	int time_count_1s = 0;
  d4:	41 2c       	mov	r4, r1
  d6:	51 2c       	mov	r5, r1
	DDRB = 0xff;
	PORTB = 0xff; // 전원을 키고 난 후의 초깃값을 지정
	
	DDRD = 0;
	
	int led_state = 0;
  d8:	e1 2c       	mov	r14, r1
  da:	f1 2c       	mov	r15, r1
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <main+0x24>
		_delay_ms(1);
		time_count_1s++;
		
		if (time_count_1s == 1000)
		{
			time_count_1s = 0;
  de:	5c 01       	movw	r10, r24
  e0:	48 01       	movw	r8, r16
  e2:	3e 01       	movw	r6, r28
	int prev_button0 = 0, prev_button1 = 0, prev_button2 = 0;
	int mode;
	
	while(1)
	{
		if (led_state == 0)		PORTB = 0xff;
  e4:	e1 14       	cp	r14, r1
  e6:	f1 04       	cpc	r15, r1
  e8:	19 f4       	brne	.+6      	; 0xf0 <main+0x30>
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	88 bb       	out	0x18, r24	; 24
  ee:	12 c0       	rjmp	.+36     	; 0x114 <main+0x54>
		else
		{
			if (mode == 0)		PORTB = 0x0;
  f0:	c1 14       	cp	r12, r1
  f2:	d1 04       	cpc	r13, r1
  f4:	11 f4       	brne	.+4      	; 0xfa <main+0x3a>
  f6:	18 ba       	out	0x18, r1	; 24
  f8:	0d c0       	rjmp	.+26     	; 0x114 <main+0x54>
			else if (mode == 1)	PORTB = 0x55;
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	c2 16       	cp	r12, r18
  fe:	d1 04       	cpc	r13, r1
 100:	19 f4       	brne	.+6      	; 0x108 <main+0x48>
 102:	85 e5       	ldi	r24, 0x55	; 85
 104:	88 bb       	out	0x18, r24	; 24
 106:	06 c0       	rjmp	.+12     	; 0x114 <main+0x54>
			else if (mode == 2)	PORTB = 0xaa;
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	c8 16       	cp	r12, r24
 10c:	d1 04       	cpc	r13, r1
 10e:	11 f4       	brne	.+4      	; 0x114 <main+0x54>
 110:	8a ea       	ldi	r24, 0xAA	; 170
 112:	88 bb       	out	0x18, r24	; 24
		}

		button0 = PushButtonDet(0);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	c2 df       	rcall	.-124    	; 0x9e <PushButtonDet>
 11a:	ec 01       	movw	r28, r24
		button1 = PushButtonDet(1);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	be df       	rcall	.-132    	; 0x9e <PushButtonDet>
 122:	8c 01       	movw	r16, r24
		button2 = PushButtonDet(2);
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	ba df       	rcall	.-140    	; 0x9e <PushButtonDet>
		
		if ((button0 == 1) && (prev_button0))	mode = 0;
 12a:	c1 30       	cpi	r28, 0x01	; 1
 12c:	d1 05       	cpc	r29, r1
 12e:	21 f4       	brne	.+8      	; 0x138 <main+0x78>
 130:	67 28       	or	r6, r7
 132:	11 f0       	breq	.+4      	; 0x138 <main+0x78>
 134:	c1 2c       	mov	r12, r1
 136:	d1 2c       	mov	r13, r1
		if ((button1 == 1) && (prev_button1))	mode = 1;
 138:	01 30       	cpi	r16, 0x01	; 1
 13a:	11 05       	cpc	r17, r1
 13c:	29 f4       	brne	.+10     	; 0x148 <main+0x88>
 13e:	89 28       	or	r8, r9
 140:	19 f0       	breq	.+6      	; 0x148 <main+0x88>
 142:	cc 24       	eor	r12, r12
 144:	c3 94       	inc	r12
 146:	d1 2c       	mov	r13, r1
		if ((button2 == 1) && (prev_button2))	mode = 2;
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	91 05       	cpc	r25, r1
 14c:	31 f4       	brne	.+12     	; 0x15a <main+0x9a>
 14e:	ab 28       	or	r10, r11
 150:	21 f0       	breq	.+8      	; 0x15a <main+0x9a>
 152:	68 94       	set
 154:	cc 24       	eor	r12, r12
 156:	c1 f8       	bld	r12, 1
 158:	d1 2c       	mov	r13, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	e6 e6       	ldi	r30, 0x66	; 102
 15c:	fe e0       	ldi	r31, 0x0E	; 14
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x9e>
 162:	00 00       	nop
		
		_delay_ms(1);
		time_count_1s++;
 164:	ff ef       	ldi	r31, 0xFF	; 255
 166:	4f 1a       	sub	r4, r31
 168:	5f 0a       	sbc	r5, r31
		
		if (time_count_1s == 1000)
 16a:	28 ee       	ldi	r18, 0xE8	; 232
 16c:	42 16       	cp	r4, r18
 16e:	23 e0       	ldi	r18, 0x03	; 3
 170:	52 06       	cpc	r5, r18
 172:	09 f0       	breq	.+2      	; 0x176 <main+0xb6>
 174:	b4 cf       	rjmp	.-152    	; 0xde <main+0x1e>
		{
			time_count_1s = 0;
			led_state = !led_state;
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	ef 28       	or	r14, r15
 17a:	09 f0       	breq	.+2      	; 0x17e <main+0xbe>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	e2 2e       	mov	r14, r18
 180:	f1 2c       	mov	r15, r1
		_delay_ms(1);
		time_count_1s++;
		
		if (time_count_1s == 1000)
		{
			time_count_1s = 0;
 182:	41 2c       	mov	r4, r1
 184:	51 2c       	mov	r5, r1
 186:	ab cf       	rjmp	.-170    	; 0xde <main+0x1e>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
