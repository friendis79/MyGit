
exam3_professor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000276  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000983  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a9  00000000  00000000  00000d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b3  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044a  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  00001e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
   2:	00 00       	nop
   4:	91 c0       	rjmp	.+290    	; 0x128 <__bad_interrupt>
   6:	00 00       	nop
   8:	8f c0       	rjmp	.+286    	; 0x128 <__bad_interrupt>
   a:	00 00       	nop
   c:	8d c0       	rjmp	.+282    	; 0x128 <__bad_interrupt>
   e:	00 00       	nop
  10:	8b c0       	rjmp	.+278    	; 0x128 <__bad_interrupt>
  12:	00 00       	nop
  14:	89 c0       	rjmp	.+274    	; 0x128 <__bad_interrupt>
  16:	00 00       	nop
  18:	87 c0       	rjmp	.+270    	; 0x128 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	85 c0       	rjmp	.+266    	; 0x128 <__bad_interrupt>
  1e:	00 00       	nop
  20:	83 c0       	rjmp	.+262    	; 0x128 <__bad_interrupt>
  22:	00 00       	nop
  24:	81 c0       	rjmp	.+258    	; 0x128 <__bad_interrupt>
  26:	00 00       	nop
  28:	7f c0       	rjmp	.+254    	; 0x128 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7d c0       	rjmp	.+250    	; 0x128 <__bad_interrupt>
  2e:	00 00       	nop
  30:	7b c0       	rjmp	.+246    	; 0x128 <__bad_interrupt>
  32:	00 00       	nop
  34:	79 c0       	rjmp	.+242    	; 0x128 <__bad_interrupt>
  36:	00 00       	nop
  38:	77 c0       	rjmp	.+238    	; 0x128 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	75 c0       	rjmp	.+234    	; 0x128 <__bad_interrupt>
  3e:	00 00       	nop
  40:	73 c0       	rjmp	.+230    	; 0x128 <__bad_interrupt>
  42:	00 00       	nop
  44:	71 c0       	rjmp	.+226    	; 0x128 <__bad_interrupt>
  46:	00 00       	nop
  48:	6f c0       	rjmp	.+222    	; 0x128 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6d c0       	rjmp	.+218    	; 0x128 <__bad_interrupt>
  4e:	00 00       	nop
  50:	6b c0       	rjmp	.+214    	; 0x128 <__bad_interrupt>
  52:	00 00       	nop
  54:	69 c0       	rjmp	.+210    	; 0x128 <__bad_interrupt>
  56:	00 00       	nop
  58:	67 c0       	rjmp	.+206    	; 0x128 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	65 c0       	rjmp	.+202    	; 0x128 <__bad_interrupt>
  5e:	00 00       	nop
  60:	63 c0       	rjmp	.+198    	; 0x128 <__bad_interrupt>
  62:	00 00       	nop
  64:	61 c0       	rjmp	.+194    	; 0x128 <__bad_interrupt>
  66:	00 00       	nop
  68:	5f c0       	rjmp	.+190    	; 0x128 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5d c0       	rjmp	.+186    	; 0x128 <__bad_interrupt>
  6e:	00 00       	nop
  70:	5b c0       	rjmp	.+182    	; 0x128 <__bad_interrupt>
  72:	00 00       	nop
  74:	59 c0       	rjmp	.+178    	; 0x128 <__bad_interrupt>
  76:	00 00       	nop
  78:	57 c0       	rjmp	.+174    	; 0x128 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	55 c0       	rjmp	.+170    	; 0x128 <__bad_interrupt>
  7e:	00 00       	nop
  80:	53 c0       	rjmp	.+166    	; 0x128 <__bad_interrupt>
  82:	00 00       	nop
  84:	51 c0       	rjmp	.+162    	; 0x128 <__bad_interrupt>
  86:	00 00       	nop
  88:	4f c0       	rjmp	.+158    	; 0x128 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	bb 00       	.word	0x00bb	; ????
  8e:	e8 00       	.word	0x00e8	; ????
  90:	d0 00       	.word	0x00d0	; ????
  92:	e8 00       	.word	0x00e8	; ????
  94:	c4 00       	.word	0x00c4	; ????
  96:	e5 00       	.word	0x00e5	; ????
  98:	c7 00       	.word	0x00c7	; ????
  9a:	c1 00       	.word	0x00c1	; ????
  9c:	e2 00       	.word	0x00e2	; ????
  9e:	e8 00       	.word	0x00e8	; ????
  a0:	e8 00       	.word	0x00e8	; ????
  a2:	b8 00       	.word	0x00b8	; ????
  a4:	e8 00       	.word	0x00e8	; ????
  a6:	e8 00       	.word	0x00e8	; ????
  a8:	dc 00       	.word	0x00dc	; ????
  aa:	b5 00       	.word	0x00b5	; ????
  ac:	e8 00       	.word	0x00e8	; ????
  ae:	e8 00       	.word	0x00e8	; ????
  b0:	d3 00       	.word	0x00d3	; ????
  b2:	e8 00       	.word	0x00e8	; ????
  b4:	d6 00       	.word	0x00d6	; ????
  b6:	e8 00       	.word	0x00e8	; ????
  b8:	e8 00       	.word	0x00e8	; ????
  ba:	e8 00       	.word	0x00e8	; ????
  bc:	e8 00       	.word	0x00e8	; ????
  be:	e8 00       	.word	0x00e8	; ????
  c0:	e8 00       	.word	0x00e8	; ????
  c2:	e8 00       	.word	0x00e8	; ????
  c4:	e8 00       	.word	0x00e8	; ????
  c6:	e8 00       	.word	0x00e8	; ????
  c8:	e8 00       	.word	0x00e8	; ????
  ca:	e8 00       	.word	0x00e8	; ????
  cc:	e8 00       	.word	0x00e8	; ????
  ce:	e8 00       	.word	0x00e8	; ????
  d0:	e8 00       	.word	0x00e8	; ????
  d2:	cd 00       	.word	0x00cd	; ????
  d4:	e8 00       	.word	0x00e8	; ????
  d6:	e8 00       	.word	0x00e8	; ????
  d8:	e8 00       	.word	0x00e8	; ????
  da:	e8 00       	.word	0x00e8	; ????
  dc:	e8 00       	.word	0x00e8	; ????
  de:	e8 00       	.word	0x00e8	; ????
  e0:	e8 00       	.word	0x00e8	; ????
  e2:	e8 00       	.word	0x00e8	; ????
  e4:	e8 00       	.word	0x00e8	; ????
  e6:	df 00       	.word	0x00df	; ????
  e8:	ca 00       	.word	0x00ca	; ????
  ea:	e8 00       	.word	0x00e8	; ????
  ec:	e8 00       	.word	0x00e8	; ????
  ee:	d9 00       	.word	0x00d9	; ????
  f0:	e8 00       	.word	0x00e8	; ????
  f2:	e8 00       	.word	0x00e8	; ????
  f4:	e8 00       	.word	0x00e8	; ????
  f6:	e8 00       	.word	0x00e8	; ????
  f8:	e8 00       	.word	0x00e8	; ????
  fa:	e8 00       	.word	0x00e8	; ????
  fc:	be 00       	.word	0x00be	; ????

000000fe <__ctors_end>:
  fe:	11 24       	eor	r1, r1
 100:	1f be       	out	0x3f, r1	; 63
 102:	cf ef       	ldi	r28, 0xFF	; 255
 104:	d0 e1       	ldi	r29, 0x10	; 16
 106:	de bf       	out	0x3e, r29	; 62
 108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
 10a:	11 e0       	ldi	r17, 0x01	; 1
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b1 e0       	ldi	r27, 0x01	; 1
 110:	e6 e7       	ldi	r30, 0x76	; 118
 112:	f2 e0       	ldi	r31, 0x02	; 2
 114:	00 e0       	ldi	r16, 0x00	; 0
 116:	0b bf       	out	0x3b, r16	; 59
 118:	02 c0       	rjmp	.+4      	; 0x11e <__do_copy_data+0x14>
 11a:	07 90       	elpm	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	a0 32       	cpi	r26, 0x20	; 32
 120:	b1 07       	cpc	r27, r17
 122:	d9 f7       	brne	.-10     	; 0x11a <__do_copy_data+0x10>
 124:	69 d0       	rcall	.+210    	; 0x1f8 <main>
 126:	a5 c0       	rjmp	.+330    	; 0x272 <_exit>

00000128 <__bad_interrupt>:
 128:	6b cf       	rjmp	.-298    	; 0x0 <__vectors>

0000012a <FND_Display>:
	}
}

void FND_Display(int idx, char c)
{
	if (idx == 0)
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	19 f4       	brne	.+6      	; 0x134 <FND_Display+0xa>
	PORTE = 0x10;
 12e:	80 e1       	ldi	r24, 0x10	; 16
 130:	83 b9       	out	0x03, r24	; 3
 132:	10 c0       	rjmp	.+32     	; 0x154 <FND_Display+0x2a>
	else if (idx == 1)
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	91 05       	cpc	r25, r1
 138:	19 f4       	brne	.+6      	; 0x140 <FND_Display+0x16>
	PORTE = 0x20;
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	83 b9       	out	0x03, r24	; 3
 13e:	0a c0       	rjmp	.+20     	; 0x154 <FND_Display+0x2a>
	else if (idx == 2)
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	91 05       	cpc	r25, r1
 144:	19 f4       	brne	.+6      	; 0x14c <FND_Display+0x22>
	PORTE = 0x40;
 146:	80 e4       	ldi	r24, 0x40	; 64
 148:	83 b9       	out	0x03, r24	; 3
 14a:	04 c0       	rjmp	.+8      	; 0x154 <FND_Display+0x2a>
	else if (idx == 3)
 14c:	03 97       	sbiw	r24, 0x03	; 3
 14e:	11 f4       	brne	.+4      	; 0x154 <FND_Display+0x2a>
	PORTE = 0x80;
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	83 b9       	out	0x03, r24	; 3

	switch (c)
 154:	86 2f       	mov	r24, r22
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fc 01       	movw	r30, r24
 15a:	e1 54       	subi	r30, 0x41	; 65
 15c:	f1 09       	sbc	r31, r1
 15e:	e9 33       	cpi	r30, 0x39	; 57
 160:	f1 05       	cpc	r31, r1
 162:	b0 f5       	brcc	.+108    	; 0x1d0 <FND_Display+0xa6>
 164:	ea 5b       	subi	r30, 0xBA	; 186
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	7b c0       	rjmp	.+246    	; 0x260 <__tablejump2__>
	{
		case 'P' : PORTB = ~0x73;	break;
 16a:	8c e8       	ldi	r24, 0x8C	; 140
 16c:	88 bb       	out	0x18, r24	; 24
 16e:	08 95       	ret
		case 'L' : PORTB = ~0x38;	break;
 170:	87 ec       	ldi	r24, 0xC7	; 199
 172:	88 bb       	out	0x18, r24	; 24
 174:	08 95       	ret
		case 'A' : PORTB = ~0x77;	break;
 176:	88 e8       	ldi	r24, 0x88	; 136
 178:	88 bb       	out	0x18, r24	; 24
 17a:	08 95       	ret
		case 'y' : PORTB = ~0x6e;	break;
 17c:	81 e9       	ldi	r24, 0x91	; 145
 17e:	88 bb       	out	0x18, r24	; 24
 180:	08 95       	ret
		case 'H' : PORTB = ~0x76;	break;
 182:	89 e8       	ldi	r24, 0x89	; 137
 184:	88 bb       	out	0x18, r24	; 24
 186:	08 95       	ret
		case 'E' : PORTB = ~0x79;	break;
 188:	86 e8       	ldi	r24, 0x86	; 134
 18a:	88 bb       	out	0x18, r24	; 24
 18c:	08 95       	ret
		case 'G' : PORTB = ~0x3d;	break;
 18e:	82 ec       	ldi	r24, 0xC2	; 194
 190:	88 bb       	out	0x18, r24	; 24
 192:	08 95       	ret
		case 'o' : PORTB = ~0x5c;	break;
 194:	83 ea       	ldi	r24, 0xA3	; 163
 196:	88 bb       	out	0x18, r24	; 24
 198:	08 95       	ret
		case 'd' : PORTB = ~0x5e;	break;
 19a:	81 ea       	ldi	r24, 0xA1	; 161
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	08 95       	ret
		case 'C' : PORTB = ~0x39;	break;
 1a0:	86 ec       	ldi	r24, 0xC6	; 198
 1a2:	88 bb       	out	0x18, r24	; 24
 1a4:	08 95       	ret
		case 'S' : PORTB = ~0x6d;	break;
 1a6:	82 e9       	ldi	r24, 0x92	; 146
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	08 95       	ret
		case 'U' : PORTB = ~0x3e;	break;
 1ac:	81 ec       	ldi	r24, 0xC1	; 193
 1ae:	88 bb       	out	0x18, r24	; 24
 1b0:	08 95       	ret
		case 'r' : PORTB = ~0x50;	break;
 1b2:	8f ea       	ldi	r24, 0xAF	; 175
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	08 95       	ret
		case 'O' : PORTB = ~0x3f;	break;
 1b8:	80 ec       	ldi	r24, 0xC0	; 192
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	08 95       	ret
		case 'n' : PORTB = ~0x54;	break;
 1be:	8b ea       	ldi	r24, 0xAB	; 171
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	08 95       	ret
		case 'I' : PORTB = ~0x30;	break;
 1c4:	8f ec       	ldi	r24, 0xCF	; 207
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
		case 'F' : PORTB = ~0x71;	break;
 1ca:	8e e8       	ldi	r24, 0x8E	; 142
 1cc:	88 bb       	out	0x18, r24	; 24
 1ce:	08 95       	ret
		default :  PORTB = 0xff; 
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret

000001d6 <PushButtonDet>:
	}
}

int PushButtonDet(int number)
{
	if (((~PIND >> number) & 0x1) == 1) // 비트 연산자 (~) : 0000 0000 -> 1111 1111
 1d6:	20 b3       	in	r18, 0x10	; 16
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	20 95       	com	r18
 1dc:	30 95       	com	r19
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <PushButtonDet+0xe>
 1e0:	35 95       	asr	r19
 1e2:	27 95       	ror	r18
 1e4:	8a 95       	dec	r24
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <PushButtonDet+0xa>
 1e8:	c9 01       	movw	r24, r18
 1ea:	81 70       	andi	r24, 0x01	; 1
 1ec:	99 27       	eor	r25, r25
 1ee:	20 ff       	sbrs	r18, 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <PushButtonDet+0x20>
	return 1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
	
	else
	return 0;
 1f6:	08 95       	ret

000001f8 <main>:
void FND_Display(int idx, char c);
int PushButtonDet (int number);

int main(void)
{
	DDRB = 0xff;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x0f;
 1fc:	9f e0       	ldi	r25, 0x0F	; 15
 1fe:	94 bb       	out	0x14, r25	; 20
	DDRD = 0;
 200:	11 ba       	out	0x11, r1	; 17
	DDRE = 0xff;
 202:	82 b9       	out	0x02, r24	; 2

	PORTE = 0x80;
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	83 b9       	out	0x03, r24	; 3
	
	int idx = 0;
	int word_idx = 0;
 208:	e1 2c       	mov	r14, r1
 20a:	f1 2c       	mov	r15, r1
	DDRD = 0;
	DDRE = 0xff;

	PORTE = 0x80;
	
	int idx = 0;
 20c:	00 e0       	ldi	r16, 0x00	; 0
 20e:	10 e0       	ldi	r17, 0x00	; 0
	int word_idx = 0;
	int i;
	/* Replace with your application code */
	while (1)
	{	
		if (idx == 3)	idx = 0;
 210:	03 30       	cpi	r16, 0x03	; 3
 212:	11 05       	cpc	r17, r1
 214:	19 f0       	breq	.+6      	; 0x21c <main+0x24>
		else            idx++;
 216:	0f 5f       	subi	r16, 0xFF	; 255
 218:	1f 4f       	sbci	r17, 0xFF	; 255
 21a:	02 c0       	rjmp	.+4      	; 0x220 <main+0x28>
	int word_idx = 0;
	int i;
	/* Replace with your application code */
	while (1)
	{	
		if (idx == 3)	idx = 0;
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	10 e0       	ldi	r17, 0x00	; 0
		else            idx++;
		
		for (i = 0; i < 8; i++)
 220:	c0 e0       	ldi	r28, 0x00	; 0
 222:	d0 e0       	ldi	r29, 0x00	; 0
 224:	05 c0       	rjmp	.+10     	; 0x230 <main+0x38>
		{
			if(PushButtonDet(i))
 226:	ce 01       	movw	r24, r28
 228:	d6 df       	rcall	.-84     	; 0x1d6 <PushButtonDet>
 22a:	89 2b       	or	r24, r25
 22c:	29 f4       	brne	.+10     	; 0x238 <main+0x40>
	while (1)
	{	
		if (idx == 3)	idx = 0;
		else            idx++;
		
		for (i = 0; i < 8; i++)
 22e:	21 96       	adiw	r28, 0x01	; 1
 230:	c8 30       	cpi	r28, 0x08	; 8
 232:	d1 05       	cpc	r29, r1
 234:	c4 f3       	brlt	.-16     	; 0x226 <main+0x2e>
 236:	01 c0       	rjmp	.+2      	; 0x23a <main+0x42>
		{
			if(PushButtonDet(i))
			{
				word_idx = i;
 238:	7e 01       	movw	r14, r28
				break;
			}
		}
		FND_Display(idx, Word[word_idx][idx]);
 23a:	f7 01       	movw	r30, r14
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	e0 50       	subi	r30, 0x00	; 0
 246:	ff 4f       	sbci	r31, 0xFF	; 255
 248:	e0 0f       	add	r30, r16
 24a:	f1 1f       	adc	r31, r17
 24c:	60 81       	ld	r22, Z
 24e:	c8 01       	movw	r24, r16
 250:	6c df       	rcall	.-296    	; 0x12a <FND_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	93 e2       	ldi	r25, 0x23	; 35
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x5e>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x64>
 25c:	00 00       	nop
 25e:	d8 cf       	rjmp	.-80     	; 0x210 <main+0x18>

00000260 <__tablejump2__>:
 260:	ee 0f       	add	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	00 24       	eor	r0, r0
 266:	00 1c       	adc	r0, r0
 268:	0b be       	out	0x3b, r0	; 59
 26a:	07 90       	elpm	r0, Z+
 26c:	f6 91       	elpm	r31, Z
 26e:	e0 2d       	mov	r30, r0
 270:	09 94       	ijmp

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
