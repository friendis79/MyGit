
FND_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000001be  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6b  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c3  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000443  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004df  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000437  00000000  00000000  000020c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000024fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	39 d0       	rcall	.+114    	; 0x126 <main>
  b4:	82 c0       	rjmp	.+260    	; 0x1ba <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <PORT_Init>:
		Key_Num = (key_in/4)+9;
	}
	else;

	return Key_Num;
}
  b8:	80 ef       	ldi	r24, 0xF0	; 240
  ba:	82 b9       	out	0x02, r24	; 2
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	84 bb       	out	0x14, r24	; 20
  c4:	08 95       	ret

000000c6 <keyScan>:
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	27 ef       	ldi	r18, 0xF7	; 247
  ca:	27 c0       	rjmp	.+78     	; 0x11a <keyScan+0x54>
  cc:	25 bb       	out	0x15, r18	; 21
  ce:	e6 e6       	ldi	r30, 0x66	; 102
  d0:	fe e0       	ldi	r31, 0x0E	; 14
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <keyScan+0xc>
  d6:	00 00       	nop
  d8:	93 b3       	in	r25, 0x13	; 19
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	e1 f0       	breq	.+56     	; 0x116 <keyScan+0x50>
  de:	90 32       	cpi	r25, 0x20	; 32
  e0:	69 f0       	breq	.+26     	; 0xfc <keyScan+0x36>
  e2:	18 f4       	brcc	.+6      	; 0xea <keyScan+0x24>
  e4:	90 31       	cpi	r25, 0x10	; 16
  e6:	31 f0       	breq	.+12     	; 0xf4 <keyScan+0x2e>
  e8:	1c c0       	rjmp	.+56     	; 0x122 <keyScan+0x5c>
  ea:	90 34       	cpi	r25, 0x40	; 64
  ec:	59 f0       	breq	.+22     	; 0x104 <keyScan+0x3e>
  ee:	90 38       	cpi	r25, 0x80	; 128
  f0:	69 f0       	breq	.+26     	; 0x10c <keyScan+0x46>
  f2:	17 c0       	rjmp	.+46     	; 0x122 <keyScan+0x5c>
  f4:	88 0f       	add	r24, r24
  f6:	88 0f       	add	r24, r24
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	08 95       	ret
  fc:	88 0f       	add	r24, r24
  fe:	88 0f       	add	r24, r24
 100:	8e 5f       	subi	r24, 0xFE	; 254
 102:	08 95       	ret
 104:	88 0f       	add	r24, r24
 106:	88 0f       	add	r24, r24
 108:	8d 5f       	subi	r24, 0xFD	; 253
 10a:	08 95       	ret
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	88 0f       	add	r24, r24
 112:	88 0f       	add	r24, r24
 114:	08 95       	ret
 116:	26 95       	lsr	r18
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	b8 f2       	brcs	.-82     	; 0xcc <keyScan+0x6>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret

00000126 <main>:

int main(void)
{
	unsigned char FND_Print[4] = {0,};
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	10 e0       	ldi	r17, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	c0 e0       	ldi	r28, 0x00	; 0

	int value_2=0;

	unsigned char calculation=0, negative_flag=0;;

	PORT_Init();
 12e:	c4 df       	rcall	.-120    	; 0xb8 <PORT_Init>

	/* Replace with your application code */
	while (1)
	{

		key_in_value = keyScan();
 130:	ca df       	rcall	.-108    	; 0xc6 <keyScan>
 132:	26 e6       	ldi	r18, 0x66	; 102
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	36 ee       	ldi	r19, 0xE6	; 230
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	30 40       	sbci	r19, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x12>
 140:	81 11       	cpse	r24, r1
		_delay_ms(20);

		if(key_in_value)
 142:	f6 cf       	rjmp	.-20     	; 0x130 <main+0xa>
 144:	e0 e0       	ldi	r30, 0x00	; 0
					key_in_value = value_2; //1000*value2[3] + 100*value2[2] + 10*value2[1] + value2[0];
				}
			}
		else
		{
			PORTE = Port_fnd[0];
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	80 81       	ld	r24, Z
 14a:	83 b9       	out	0x03, r24	; 3
 14c:	a0 2f       	mov	r26, r16
			PORTB = Port_char[FND_Print[0]] + (negative_flag*0x80); //negative num 표시 dot 으로 정의
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	a8 5f       	subi	r26, 0xF8	; 248
 152:	be 4f       	sbci	r27, 0xFE	; 254
 154:	8c 91       	ld	r24, X
 156:	88 bb       	out	0x18, r24	; 24
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	93 e2       	ldi	r25, 0x23	; 35
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x36>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x3c>
 162:	00 00       	nop
 164:	82 81       	ldd	r24, Z+2	; 0x02
			_delay_ms(2.5);

			PORTE = Port_fnd[1];
 166:	83 b9       	out	0x03, r24	; 3
 168:	a1 2f       	mov	r26, r17
			PORTB = Port_char[FND_Print[1]];
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	a8 5f       	subi	r26, 0xF8	; 248
 16e:	be 4f       	sbci	r27, 0xFE	; 254
 170:	8c 91       	ld	r24, X
 172:	88 bb       	out	0x18, r24	; 24
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	9f e8       	ldi	r25, 0x8F	; 143
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x52>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x58>
 17e:	00 00       	nop
 180:	84 81       	ldd	r24, Z+4	; 0x04
			_delay_ms(10);

			PORTE = Port_fnd[2];
 182:	83 b9       	out	0x03, r24	; 3
 184:	ad 2f       	mov	r26, r29
			PORTB = Port_char[FND_Print[2]];
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	a8 5f       	subi	r26, 0xF8	; 248
 18a:	be 4f       	sbci	r27, 0xFE	; 254
 18c:	8c 91       	ld	r24, X
 18e:	88 bb       	out	0x18, r24	; 24
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	93 e2       	ldi	r25, 0x23	; 35
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x6e>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x74>
 19a:	00 00       	nop
 19c:	86 81       	ldd	r24, Z+6	; 0x06
			_delay_ms(2.5);

			PORTE = Port_fnd[3];
 19e:	83 b9       	out	0x03, r24	; 3
 1a0:	ec 2f       	mov	r30, r28
			PORTB = Port_char[FND_Print[3]];
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	e8 5f       	subi	r30, 0xF8	; 248
 1a6:	fe 4f       	sbci	r31, 0xFE	; 254
 1a8:	80 81       	ld	r24, Z
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	93 e2       	ldi	r25, 0x23	; 35
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x8a>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x90>
 1b6:	00 00       	nop
 1b8:	bb cf       	rjmp	.-138    	; 0x130 <main+0xa>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
