
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000514  00000588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000514  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c12  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090e  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ee  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000501  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ed  00000000  00000000  00002701  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002dee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e1       	ldi	r30, 0x14	; 20
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	ac d0       	rcall	.+344    	; 0x20c <main>
  b4:	2d c2       	rjmp	.+1114   	; 0x510 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <PORT_Init>:
//port_char 16번째 데이터는 - 표시임을 추가함
unsigned int Port_fnd[] ={0x1f,0x2f,0x4f,0x8f}; // FND0 ON, FND1 ON, FND2 ON, FND3 ON

void PORT_Init(void)
{
	DDRE = 0xf0; // PORTE4~PORTE7 FND 출력 선택
  b8:	80 ef       	ldi	r24, 0xF0	; 240
  ba:	82 b9       	out	0x02, r24	; 2
	// (PE4 : FND0, PE5, FND1, PE6 : FND2, PE7 : FND3)
	DDRB = 0xff; // 세그먼트의 문자포트 출력
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
	// (PB0:a, PB1:b, PB2:c, PB3:d, PB4:e, PB5:f, PB6:g, PB7:dot)
	DDRC = 0x0f;
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	84 bb       	out	0x14, r24	; 20
  c4:	08 95       	ret

000000c6 <Num_divide>:
}

void Num_divide(unsigned char* divide_num, unsigned int num)
{
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	fc 01       	movw	r30, r24
  d0:	ab 01       	movw	r20, r22
	int buffer=0;

	divide_num[3] = num/1000;
  d2:	8b 01       	movw	r16, r22
  d4:	16 95       	lsr	r17
  d6:	07 95       	ror	r16
  d8:	16 95       	lsr	r17
  da:	07 95       	ror	r16
  dc:	16 95       	lsr	r17
  de:	07 95       	ror	r16
  e0:	98 01       	movw	r18, r16
  e2:	a5 ec       	ldi	r26, 0xC5	; 197
  e4:	b0 e2       	ldi	r27, 0x20	; 32
  e6:	f1 d1       	rcall	.+994    	; 0x4ca <__umulhisi3>
  e8:	ec 01       	movw	r28, r24
  ea:	d2 95       	swap	r29
  ec:	c2 95       	swap	r28
  ee:	cf 70       	andi	r28, 0x0F	; 15
  f0:	cd 27       	eor	r28, r29
  f2:	df 70       	andi	r29, 0x0F	; 15
  f4:	cd 27       	eor	r28, r29
  f6:	c3 83       	std	Z+3, r28	; 0x03
	buffer= num%1000;
  f8:	28 ee       	ldi	r18, 0xE8	; 232
  fa:	33 e0       	ldi	r19, 0x03	; 3
  fc:	c2 9f       	mul	r28, r18
  fe:	c0 01       	movw	r24, r0
 100:	c3 9f       	mul	r28, r19
 102:	90 0d       	add	r25, r0
 104:	d2 9f       	mul	r29, r18
 106:	90 0d       	add	r25, r0
 108:	11 24       	eor	r1, r1
 10a:	9a 01       	movw	r18, r20
 10c:	28 1b       	sub	r18, r24
 10e:	39 0b       	sbc	r19, r25
 110:	c9 01       	movw	r24, r18
	divide_num[2] = buffer/100;
 112:	64 e6       	ldi	r22, 0x64	; 100
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	c6 d1       	rcall	.+908    	; 0x4a4 <__divmodhi4>
 118:	62 83       	std	Z+2, r22	; 0x02
	buffer= buffer%100;
	divide_num[1] = buffer/10;
 11a:	6a e0       	ldi	r22, 0x0A	; 10
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	c2 d1       	rcall	.+900    	; 0x4a4 <__divmodhi4>
 120:	61 83       	std	Z+1, r22	; 0x01
	divide_num[0] = buffer%10;
 122:	80 83       	st	Z, r24
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret

0000012e <keyScan>:
unsigned char keyScan(void)
{
	unsigned char key_scan_line = 0xF7;
	unsigned char key_scan_loop=0, getpinData=0, key_num=0;

	for(key_scan_loop=0; key_scan_loop<4; key_scan_loop++)
 12e:	80 e0       	ldi	r24, 0x00	; 0
	divide_num[0] = buffer%10;
}

unsigned char keyScan(void)
{
	unsigned char key_scan_line = 0xF7;
 130:	27 ef       	ldi	r18, 0xF7	; 247
	unsigned char key_scan_loop=0, getpinData=0, key_num=0;

	for(key_scan_loop=0; key_scan_loop<4; key_scan_loop++)
 132:	27 c0       	rjmp	.+78     	; 0x182 <keyScan+0x54>
	{
		PORTC = key_scan_line;
 134:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	e6 e6       	ldi	r30, 0x66	; 102
 138:	fe e0       	ldi	r31, 0x0E	; 14
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <keyScan+0xc>
 13e:	00 00       	nop
		_delay_ms(1);

		getpinData = PINC & 0xF0;
 140:	93 b3       	in	r25, 0x13	; 19
 142:	90 7f       	andi	r25, 0xF0	; 240
		if(getpinData != 0)
 144:	e1 f0       	breq	.+56     	; 0x17e <keyScan+0x50>
		{
			switch(getpinData)
 146:	90 32       	cpi	r25, 0x20	; 32
 148:	69 f0       	breq	.+26     	; 0x164 <keyScan+0x36>
 14a:	18 f4       	brcc	.+6      	; 0x152 <keyScan+0x24>
 14c:	90 31       	cpi	r25, 0x10	; 16
 14e:	31 f0       	breq	.+12     	; 0x15c <keyScan+0x2e>
 150:	1c c0       	rjmp	.+56     	; 0x18a <keyScan+0x5c>
 152:	90 34       	cpi	r25, 0x40	; 64
 154:	59 f0       	breq	.+22     	; 0x16c <keyScan+0x3e>
 156:	90 38       	cpi	r25, 0x80	; 128
 158:	69 f0       	breq	.+26     	; 0x174 <keyScan+0x46>
 15a:	17 c0       	rjmp	.+46     	; 0x18a <keyScan+0x5c>
			{
				case 0x10:
				key_num=key_scan_loop*4+1;
 15c:	88 0f       	add	r24, r24
 15e:	88 0f       	add	r24, r24
 160:	8f 5f       	subi	r24, 0xFF	; 255
				break;
 162:	08 95       	ret
				case 0x20:
				key_num=key_scan_loop*4+2;
 164:	88 0f       	add	r24, r24
 166:	88 0f       	add	r24, r24
 168:	8e 5f       	subi	r24, 0xFE	; 254
				break;
 16a:	08 95       	ret
				case 0x40:
				key_num=key_scan_loop*4+3;
 16c:	88 0f       	add	r24, r24
 16e:	88 0f       	add	r24, r24
 170:	8d 5f       	subi	r24, 0xFD	; 253
				break;
 172:	08 95       	ret
				case 0x80:
				key_num=key_scan_loop*4+4;
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	88 0f       	add	r24, r24
 17a:	88 0f       	add	r24, r24
				break;
 17c:	08 95       	ret
				default:
				break;
			} return key_num;
		} key_scan_line = (key_scan_line >> 1);
 17e:	26 95       	lsr	r18
unsigned char keyScan(void)
{
	unsigned char key_scan_line = 0xF7;
	unsigned char key_scan_loop=0, getpinData=0, key_num=0;

	for(key_scan_loop=0; key_scan_loop<4; key_scan_loop++)
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	b8 f2       	brcs	.-82     	; 0x134 <keyScan+0x6>
				break;
				default:
				break;
			} return key_num;
		} key_scan_line = (key_scan_line >> 1);
	} return 0;
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret
}

unsigned char keyScan(void)
{
	unsigned char key_scan_line = 0xF7;
	unsigned char key_scan_loop=0, getpinData=0, key_num=0;
 18a:	80 e0       	ldi	r24, 0x00	; 0
				default:
				break;
			} return key_num;
		} key_scan_line = (key_scan_line >> 1);
	} return 0;
}
 18c:	08 95       	ret

0000018e <key_decodes>:
unsigned char key_decodes(unsigned int key_in)
{
	//숫자가 입력되면 키패드의 숫자를 0~9로 바꾸고, 나머지 숫자는 연산자로 바꿈
	unsigned char Key_Num = 0;

	if(key_in) //key_in 값이 입력이 되었을 때
 18e:	00 97       	sbiw	r24, 0x00	; 0
 190:	11 f1       	breq	.+68     	; 0x1d6 <key_decodes+0x48>
	{
		if(key_in%4 != 0)
 192:	9c 01       	movw	r18, r24
 194:	23 70       	andi	r18, 0x03	; 3
 196:	33 27       	eor	r19, r19
 198:	23 2b       	or	r18, r19
 19a:	b9 f0       	breq	.+46     	; 0x1ca <key_decodes+0x3c>
		{
			Key_Num = (key_in/4)*3 + (key_in%4);
 19c:	9c 01       	movw	r18, r24
 19e:	36 95       	lsr	r19
 1a0:	27 95       	ror	r18
 1a2:	36 95       	lsr	r19
 1a4:	27 95       	ror	r18
 1a6:	92 2f       	mov	r25, r18
 1a8:	99 0f       	add	r25, r25
 1aa:	29 0f       	add	r18, r25
 1ac:	83 70       	andi	r24, 0x03	; 3
 1ae:	82 0f       	add	r24, r18

			if(Key_Num >= 10)
 1b0:	8a 30       	cpi	r24, 0x0A	; 10
 1b2:	a0 f0       	brcs	.+40     	; 0x1dc <key_decodes+0x4e>
			{
				switch(Key_Num)
 1b4:	8b 30       	cpi	r24, 0x0B	; 11
 1b6:	29 f0       	breq	.+10     	; 0x1c2 <key_decodes+0x34>
 1b8:	8c 30       	cpi	r24, 0x0C	; 12
 1ba:	29 f0       	breq	.+10     	; 0x1c6 <key_decodes+0x38>
 1bc:	8a 30       	cpi	r24, 0x0A	; 10
 1be:	71 f4       	brne	.+28     	; 0x1dc <key_decodes+0x4e>
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <key_decodes+0x4c>
				{
					case 10:
					Key_Num = 20;
					break;
					case 11:
					Key_Num = 0;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
					break;
 1c4:	08 95       	ret
					case 12:
					Key_Num = 30;
 1c6:	8e e1       	ldi	r24, 0x1E	; 30
					break;
 1c8:	08 95       	ret
				}
			}
			else;
		}
		else
		Key_Num = (key_in/4)+9;
 1ca:	96 95       	lsr	r25
 1cc:	87 95       	ror	r24
 1ce:	96 95       	lsr	r25
 1d0:	87 95       	ror	r24
 1d2:	87 5f       	subi	r24, 0xF7	; 247
 1d4:	08 95       	ret
}

unsigned char key_decodes(unsigned int key_in)
{
	//숫자가 입력되면 키패드의 숫자를 0~9로 바꾸고, 나머지 숫자는 연산자로 바꿈
	unsigned char Key_Num = 0;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret
			if(Key_Num >= 10)
			{
				switch(Key_Num)
				{
					case 10:
					Key_Num = 20;
 1da:	84 e1       	ldi	r24, 0x14	; 20
		Key_Num = (key_in/4)+9;
	}
	else;

	return Key_Num;
}
 1dc:	08 95       	ret

000001de <Error_FND>:

void Error_FND(void)
{
	unsigned char FND_Out_Num=0;

	for(FND_Out_Num=0; FND_Out_Num<4; FND_Out_Num++)
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	12 c0       	rjmp	.+36     	; 0x206 <Error_FND+0x28>
	{
		PORTE = Port_fnd[FND_Out_Num];
 1e2:	e8 2f       	mov	r30, r24
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	e0 50       	subi	r30, 0x00	; 0
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	90 81       	ld	r25, Z
 1f0:	93 b9       	out	0x03, r25	; 3
		PORTB = Port_char[16];
 1f2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Port_char+0x10>
 1f6:	98 bb       	out	0x18, r25	; 24
 1f8:	ef ef       	ldi	r30, 0xFF	; 255
 1fa:	f3 e2       	ldi	r31, 0x23	; 35
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <Error_FND+0x1e>
 200:	00 c0       	rjmp	.+0      	; 0x202 <Error_FND+0x24>
 202:	00 00       	nop

void Error_FND(void)
{
	unsigned char FND_Out_Num=0;

	for(FND_Out_Num=0; FND_Out_Num<4; FND_Out_Num++)
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	84 30       	cpi	r24, 0x04	; 4
 208:	60 f3       	brcs	.-40     	; 0x1e2 <Error_FND+0x4>
	{
		PORTE = Port_fnd[FND_Out_Num];
		PORTB = Port_char[16];
		_delay_ms(2.5);
	}
}
 20a:	08 95       	ret

0000020c <main>:

int main(void)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	2c 97       	sbiw	r28, 0x0c	; 12
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
	unsigned char FND_Print[4] = {0,};
 220:	19 82       	std	Y+1, r1	; 0x01
 222:	1a 82       	std	Y+2, r1	; 0x02
 224:	1b 82       	std	Y+3, r1	; 0x03
 226:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char value1[4] = {0,}, value2[4] = {0,};
 228:	1d 82       	std	Y+5, r1	; 0x05
 22a:	1e 82       	std	Y+6, r1	; 0x06
 22c:	1f 82       	std	Y+7, r1	; 0x07
 22e:	18 86       	std	Y+8, r1	; 0x08
 230:	19 86       	std	Y+9, r1	; 0x09
 232:	1a 86       	std	Y+10, r1	; 0x0a
 234:	1b 86       	std	Y+11, r1	; 0x0b
 236:	1c 86       	std	Y+12, r1	; 0x0c
	int value_1=0 ,value_2=0;

	unsigned char Key_In_OVF=0, Key_off_flag=0;
	unsigned char calculation=0, negative_flag=0;;

	PORT_Init();
 238:	3f df       	rcall	.-386    	; 0xb8 <PORT_Init>
	int key_in_value = 0;

	int value_1=0 ,value_2=0;

	unsigned char Key_In_OVF=0, Key_off_flag=0;
	unsigned char calculation=0, negative_flag=0;;
 23a:	b1 2c       	mov	r11, r1
 23c:	00 e0       	ldi	r16, 0x00	; 0

	int key_in_value = 0;

	int value_1=0 ,value_2=0;

	unsigned char Key_In_OVF=0, Key_off_flag=0;
 23e:	10 e0       	ldi	r17, 0x00	; 0
 240:	d1 2c       	mov	r13, r1
	unsigned char FND_Print[4] = {0,};
	unsigned char value1[4] = {0,}, value2[4] = {0,};

	int key_in_value = 0;

	int value_1=0 ,value_2=0;
 242:	e1 2c       	mov	r14, r1
 244:	f1 2c       	mov	r15, r1
 246:	81 2c       	mov	r8, r1

	/* Replace with your application code */
	while (1)
	{

		key_in_value = keyScan();
 248:	91 2c       	mov	r9, r1
 24a:	71 df       	rcall	.-286    	; 0x12e <keyScan>
		//_delay_ms(20);

		if(key_in_value)
 24c:	88 23       	and	r24, r24
 24e:	09 f4       	brne	.+2      	; 0x252 <main+0x46>
		{

			key_in_value = (int)key_decodes(key_in_value);
 250:	df c0       	rjmp	.+446    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	9c df       	rcall	.-200    	; 0x18e <key_decodes>
 256:	68 2f       	mov	r22, r24
 258:	70 e0       	ldi	r23, 0x00	; 0

			if(key_in_value < 10)
 25a:	6a 30       	cpi	r22, 0x0A	; 10
 25c:	71 05       	cpc	r23, r1
 25e:	0c f0       	brlt	.+2      	; 0x262 <main+0x56>
 260:	66 c0       	rjmp	.+204    	; 0x32e <main+0x122>
			{

				if(calculation)
 262:	00 23       	and	r16, r16
 264:	91 f1       	breq	.+100    	; 0x2ca <main+0xbe>
				{
					if(value2[3] == 0)
 266:	9c 85       	ldd	r25, Y+12	; 0x0c
 268:	91 11       	cpse	r25, r1
 26a:	c6 c0       	rjmp	.+396    	; 0x3f8 <main+0x1ec>
					{
						if(Key_off_flag)
 26c:	11 23       	and	r17, r17
 26e:	39 f0       	breq	.+14     	; 0x27e <main+0x72>
						{
							value2[3] = value2[2]; // 입력되는 숫자를 왼쪽으로 옮겨 줌
 270:	9b 85       	ldd	r25, Y+11	; 0x0b
 272:	9c 87       	std	Y+12, r25	; 0x0c
							value2[2] = value2[1];
 274:	9a 85       	ldd	r25, Y+10	; 0x0a
 276:	9b 87       	std	Y+11, r25	; 0x0b
							value2[1] = value2[0];
 278:	99 85       	ldd	r25, Y+9	; 0x09
 27a:	9a 87       	std	Y+10, r25	; 0x0a

							Key_off_flag = 0;
 27c:	10 e0       	ldi	r17, 0x00	; 0
						}
						else;

						value2[0] = key_in_value;
 27e:	89 87       	std	Y+9, r24	; 0x09
						key_in_value = value_2 = 1000*value2[3] + 100*value2[2] + 10*value2[1] + value2[0];
 280:	4c 85       	ldd	r20, Y+12	; 0x0c
 282:	28 ee       	ldi	r18, 0xE8	; 232
 284:	33 e0       	ldi	r19, 0x03	; 3
 286:	42 9f       	mul	r20, r18
 288:	c0 01       	movw	r24, r0
 28a:	43 9f       	mul	r20, r19
 28c:	90 0d       	add	r25, r0
 28e:	11 24       	eor	r1, r1
 290:	2b 85       	ldd	r18, Y+11	; 0x0b
 292:	ac 01       	movw	r20, r24
 294:	34 e6       	ldi	r19, 0x64	; 100
 296:	23 9f       	mul	r18, r19
 298:	40 0d       	add	r20, r0
 29a:	51 1d       	adc	r21, r1
 29c:	11 24       	eor	r1, r1
 29e:	9a 85       	ldd	r25, Y+10	; 0x0a
 2a0:	89 2f       	mov	r24, r25
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	9c 01       	movw	r18, r24
 2ac:	22 0f       	add	r18, r18
 2ae:	33 1f       	adc	r19, r19
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	cf 01       	movw	r24, r30
 2ba:	82 0f       	add	r24, r18
 2bc:	93 1f       	adc	r25, r19
 2be:	84 0f       	add	r24, r20
 2c0:	95 1f       	adc	r25, r21
 2c2:	68 0f       	add	r22, r24
 2c4:	79 1f       	adc	r23, r25
 2c6:	7b 01       	movw	r14, r22
 2c8:	9f c0       	rjmp	.+318    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					else
					key_in_value = value_2; //1000*value2[3] + 100*value2[2] + 10*value2[1] + value2[0];
				}
				else
				{
					if(value1[3] == 0)
 2ca:	98 85       	ldd	r25, Y+8	; 0x08
 2cc:	91 11       	cpse	r25, r1
 2ce:	96 c0       	rjmp	.+300    	; 0x3fc <main+0x1f0>
					{
						if(Key_off_flag)
 2d0:	11 23       	and	r17, r17
 2d2:	39 f0       	breq	.+14     	; 0x2e2 <main+0xd6>
						{
							value1[3] = value1[2];
 2d4:	9f 81       	ldd	r25, Y+7	; 0x07
 2d6:	98 87       	std	Y+8, r25	; 0x08
							value1[2] = value1[1];
 2d8:	9e 81       	ldd	r25, Y+6	; 0x06
 2da:	9f 83       	std	Y+7, r25	; 0x07
							value1[1] = value1[0];
 2dc:	9d 81       	ldd	r25, Y+5	; 0x05
 2de:	9e 83       	std	Y+6, r25	; 0x06

							Key_off_flag = 0;
 2e0:	10 e0       	ldi	r17, 0x00	; 0
						}
						else;

						value1[0] = key_in_value;
 2e2:	8d 83       	std	Y+5, r24	; 0x05
						key_in_value = value_1 = 1000*value1[3] + 100*value1[2] + 10*value1[1] + value1[0];
 2e4:	48 85       	ldd	r20, Y+8	; 0x08
 2e6:	28 ee       	ldi	r18, 0xE8	; 232
 2e8:	33 e0       	ldi	r19, 0x03	; 3
 2ea:	42 9f       	mul	r20, r18
 2ec:	c0 01       	movw	r24, r0
 2ee:	43 9f       	mul	r20, r19
 2f0:	90 0d       	add	r25, r0
 2f2:	11 24       	eor	r1, r1
 2f4:	2f 81       	ldd	r18, Y+7	; 0x07
 2f6:	ac 01       	movw	r20, r24
 2f8:	34 e6       	ldi	r19, 0x64	; 100
 2fa:	23 9f       	mul	r18, r19
 2fc:	40 0d       	add	r20, r0
 2fe:	51 1d       	adc	r21, r1
 300:	11 24       	eor	r1, r1
 302:	9e 81       	ldd	r25, Y+6	; 0x06
 304:	89 2f       	mov	r24, r25
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	fc 01       	movw	r30, r24
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	9c 01       	movw	r18, r24
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	22 0f       	add	r18, r18
 31a:	33 1f       	adc	r19, r19
 31c:	cf 01       	movw	r24, r30
 31e:	82 0f       	add	r24, r18
 320:	93 1f       	adc	r25, r19
 322:	84 0f       	add	r24, r20
 324:	95 1f       	adc	r25, r21
 326:	68 0f       	add	r22, r24
 328:	79 1f       	adc	r23, r25
 32a:	4b 01       	movw	r8, r22
 32c:	6d c0       	rjmp	.+218    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
			}
			else
			{

				if(key_in_value == 20)
 32e:	64 31       	cpi	r22, 0x14	; 20
 330:	71 05       	cpc	r23, r1
 332:	01 f5       	brne	.+64     	; 0x374 <main+0x168>
 334:	10 c0       	rjmp	.+32     	; 0x356 <main+0x14a>
				{
					key_in_value=calculation=negative_flag=value_1=value_2=Key_In_OVF=0;

					for(int i=0;i<4;i++)
					value1[i] = value2[i] = 0;
 336:	e9 e0       	ldi	r30, 0x09	; 9
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	ec 0f       	add	r30, r28
 33c:	fd 1f       	adc	r31, r29
 33e:	e8 0f       	add	r30, r24
 340:	f9 1f       	adc	r31, r25
 342:	10 82       	st	Z, r1
 344:	e5 e0       	ldi	r30, 0x05	; 5
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ec 0f       	add	r30, r28
 34a:	fd 1f       	adc	r31, r29
 34c:	e8 0f       	add	r30, r24
 34e:	f9 1f       	adc	r31, r25
 350:	10 82       	st	Z, r1

				if(key_in_value == 20)
				{
					key_in_value=calculation=negative_flag=value_1=value_2=Key_In_OVF=0;

					for(int i=0;i<4;i++)
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	02 c0       	rjmp	.+4      	; 0x35a <main+0x14e>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	84 30       	cpi	r24, 0x04	; 4
 35c:	91 05       	cpc	r25, r1
 35e:	5c f3       	brlt	.-42     	; 0x336 <main+0x12a>
			else
			{

				if(key_in_value == 20)
				{
					key_in_value=calculation=negative_flag=value_1=value_2=Key_In_OVF=0;
 360:	b1 2c       	mov	r11, r1
 362:	00 e0       	ldi	r16, 0x00	; 0
 364:	d1 2c       	mov	r13, r1
 366:	e1 2c       	mov	r14, r1
 368:	f1 2c       	mov	r15, r1
 36a:	81 2c       	mov	r8, r1
 36c:	91 2c       	mov	r9, r1
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	4a c0       	rjmp	.+148    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

					for(int i=0;i<4;i++)
					value1[i] = value2[i] = 0;

				}
				else if(key_in_value == 30)
 374:	6e 31       	cpi	r22, 0x1E	; 30
 376:	71 05       	cpc	r23, r1
 378:	b9 f5       	brne	.+110    	; 0x3e8 <main+0x1dc>
				{
					switch(calculation)
 37a:	0b 30       	cpi	r16, 0x0B	; 11
 37c:	a9 f0       	breq	.+42     	; 0x3a8 <main+0x19c>
 37e:	18 f4       	brcc	.+6      	; 0x386 <main+0x17a>
 380:	0a 30       	cpi	r16, 0x0A	; 10
 382:	31 f0       	breq	.+12     	; 0x390 <main+0x184>
 384:	24 c0       	rjmp	.+72     	; 0x3ce <main+0x1c2>
 386:	0c 30       	cpi	r16, 0x0C	; 12
 388:	b9 f0       	breq	.+46     	; 0x3b8 <main+0x1ac>
 38a:	0d 30       	cpi	r16, 0x0D	; 13
 38c:	e1 f0       	breq	.+56     	; 0x3c6 <main+0x1ba>
 38e:	1f c0       	rjmp	.+62     	; 0x3ce <main+0x1c2>
					{
						case 10: key_in_value = value_1 - value_2;
 390:	b4 01       	movw	r22, r8
 392:	6e 19       	sub	r22, r14
 394:	7f 09       	sbc	r23, r15

						//negative num 예외 처리
						if(key_in_value < 0 )
 396:	f2 f4       	brpl	.+60     	; 0x3d4 <main+0x1c8>
						{
							//key_in_value *=-1;
							key_in_value = abs(key_in_value);
 398:	77 23       	and	r23, r23
 39a:	1c f4       	brge	.+6      	; 0x3a2 <main+0x196>
 39c:	71 95       	neg	r23
 39e:	61 95       	neg	r22
 3a0:	71 09       	sbc	r23, r1
							negative_flag=1;
 3a2:	bb 24       	eor	r11, r11
 3a4:	b3 94       	inc	r11
 3a6:	19 c0       	rjmp	.+50     	; 0x3da <main+0x1ce>
						}
						else
						negative_flag=0;

						break;
						case 11: key_in_value = value_1 * value_2;
 3a8:	8e 9c       	mul	r8, r14
 3aa:	b0 01       	movw	r22, r0
 3ac:	8f 9c       	mul	r8, r15
 3ae:	70 0d       	add	r23, r0
 3b0:	9e 9c       	mul	r9, r14
 3b2:	70 0d       	add	r23, r0
 3b4:	11 24       	eor	r1, r1
						break;
 3b6:	11 c0       	rjmp	.+34     	; 0x3da <main+0x1ce>
						case 12:
						if(value_2 == 0)
 3b8:	e1 14       	cp	r14, r1
 3ba:	f1 04       	cpc	r15, r1
						key_in_value = 0;
						else
						key_in_value = value_1 / value_2;
 3bc:	69 f0       	breq	.+26     	; 0x3d8 <main+0x1cc>
 3be:	c4 01       	movw	r24, r8
 3c0:	b7 01       	movw	r22, r14
 3c2:	70 d0       	rcall	.+224    	; 0x4a4 <__divmodhi4>
 3c4:	0a c0       	rjmp	.+20     	; 0x3da <main+0x1ce>
						break;
						case 13: key_in_value = value_1 + value_2;
 3c6:	b4 01       	movw	r22, r8
 3c8:	6e 0d       	add	r22, r14
 3ca:	7f 1d       	adc	r23, r15
						break;
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <main+0x1ce>
						default: key_in_value =0;
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	03 c0       	rjmp	.+6      	; 0x3da <main+0x1ce>
							key_in_value = abs(key_in_value);
							negative_flag=1;

						}
						else
						negative_flag=0;
 3d4:	b1 2c       	mov	r11, r1
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <main+0x1ce>
						break;
						case 11: key_in_value = value_1 * value_2;
						break;
						case 12:
						if(value_2 == 0)
						key_in_value = 0;
 3d8:	b7 01       	movw	r22, r14
						break;
						default: key_in_value =0;
						break;
					}

					if(key_in_value>9999)
 3da:	60 31       	cpi	r22, 0x10	; 16
 3dc:	87 e2       	ldi	r24, 0x27	; 39
 3de:	78 07       	cpc	r23, r24
 3e0:	7c f0       	brlt	.+30     	; 0x400 <__LOCK_REGION_LENGTH__>
					Key_In_OVF=1;
 3e2:	dd 24       	eor	r13, r13
 3e4:	d3 94       	inc	r13
 3e6:	10 c0       	rjmp	.+32     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					else
					Key_In_OVF=0;
				}
				else if(key_in_value <= 13 && key_in_value >= 10)
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	2a 50       	subi	r18, 0x0A	; 10
 3ee:	31 09       	sbc	r19, r1
 3f0:	24 30       	cpi	r18, 0x04	; 4
 3f2:	31 05       	cpc	r19, r1
 3f4:	38 f0       	brcs	.+14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
						value2[0] = key_in_value;
						key_in_value = value_2 = 1000*value2[3] + 100*value2[2] + 10*value2[1] + value2[0];

					}
					else
					key_in_value = value_2; //1000*value2[3] + 100*value2[2] + 10*value2[1] + value2[0];
 3f8:	b7 01       	movw	r22, r14
 3fa:	06 c0       	rjmp	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
						value1[0] = key_in_value;
						key_in_value = value_1 = 1000*value1[3] + 100*value1[2] + 10*value1[1] + value1[0];

					}
					else
					key_in_value = value_1;// 1000*value1[3] + 100*value1[2] + 10*value1[1] + value1[0];
 3fc:	b4 01       	movw	r22, r8
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					}

					if(key_in_value>9999)
					Key_In_OVF=1;
					else
					Key_In_OVF=0;
 400:	d1 2c       	mov	r13, r1
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
				else if(key_in_value <= 13 && key_in_value >= 10)
				{
					calculation = key_in_value;
					key_in_value = value_1;
 404:	08 2f       	mov	r16, r24
				}
				else;
			}

			Num_divide(FND_Print, key_in_value);
 406:	b4 01       	movw	r22, r8
 408:	ce 01       	movw	r24, r28
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	5c de       	rcall	.-840    	; 0xc6 <Num_divide>
		}
		else
		Key_off_flag=1;
 40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>

		if(Key_In_OVF)
 410:	11 e0       	ldi	r17, 0x01	; 1
 412:	dd 20       	and	r13, r13
		{
			//Key_In_OVF = 0;
			Error_FND();
 414:	11 f0       	breq	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 416:	e3 de       	rcall	.-570    	; 0x1de <Error_FND>
 418:	18 cf       	rjmp	.-464    	; 0x24a <main+0x3e>
		}
		else
		{
			PORTE = Port_fnd[0];
 41a:	a0 e0       	ldi	r26, 0x00	; 0
 41c:	b1 e0       	ldi	r27, 0x01	; 1
 41e:	8c 91       	ld	r24, X
 420:	83 b9       	out	0x03, r24	; 3
			PORTB = Port_char[FND_Print[0]] + (negative_flag*0x80); //negative num 표시 dot 으로 정의
 422:	e9 81       	ldd	r30, Y+1	; 0x01
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	e8 5f       	subi	r30, 0xF8	; 248
 428:	fe 4f       	sbci	r31, 0xFE	; 254
 42a:	80 81       	ld	r24, Z
 42c:	9b 2d       	mov	r25, r11
 42e:	97 95       	ror	r25
 430:	99 27       	eor	r25, r25
 432:	97 95       	ror	r25
 434:	89 0f       	add	r24, r25
 436:	88 bb       	out	0x18, r24	; 24
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	93 e2       	ldi	r25, 0x23	; 35
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
			_delay_ms(2.5);

			PORTE = Port_fnd[1];
 444:	12 96       	adiw	r26, 0x02	; 2
 446:	8c 91       	ld	r24, X
 448:	12 97       	sbiw	r26, 0x02	; 2
 44a:	83 b9       	out	0x03, r24	; 3
			PORTB = Port_char[FND_Print[1]];
 44c:	ea 81       	ldd	r30, Y+2	; 0x02
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	e8 5f       	subi	r30, 0xF8	; 248
 452:	fe 4f       	sbci	r31, 0xFE	; 254
 454:	80 81       	ld	r24, Z
 456:	88 bb       	out	0x18, r24	; 24
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	9f e8       	ldi	r25, 0x8F	; 143
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 462:	00 00       	nop
			_delay_ms(10);

			PORTE = Port_fnd[2];
 464:	14 96       	adiw	r26, 0x04	; 4
 466:	8c 91       	ld	r24, X
 468:	14 97       	sbiw	r26, 0x04	; 4
 46a:	83 b9       	out	0x03, r24	; 3
			PORTB = Port_char[FND_Print[2]];
 46c:	eb 81       	ldd	r30, Y+3	; 0x03
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	e8 5f       	subi	r30, 0xF8	; 248
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	80 81       	ld	r24, Z
 476:	88 bb       	out	0x18, r24	; 24
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	93 e2       	ldi	r25, 0x23	; 35
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 482:	00 00       	nop
			_delay_ms(2.5);

			PORTE = Port_fnd[3];
 484:	16 96       	adiw	r26, 0x06	; 6
 486:	8c 91       	ld	r24, X
 488:	83 b9       	out	0x03, r24	; 3
			PORTB = Port_char[FND_Print[3]];
 48a:	ec 81       	ldd	r30, Y+4	; 0x04
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	e8 5f       	subi	r30, 0xF8	; 248
 490:	fe 4f       	sbci	r31, 0xFE	; 254
 492:	80 81       	ld	r24, Z
 494:	88 bb       	out	0x18, r24	; 24
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	93 e2       	ldi	r25, 0x23	; 35
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a0:	00 00       	nop
 4a2:	d3 ce       	rjmp	.-602    	; 0x24a <main+0x3e>

000004a4 <__divmodhi4>:
 4a4:	97 fb       	bst	r25, 7
 4a6:	07 2e       	mov	r0, r23
 4a8:	16 f4       	brtc	.+4      	; 0x4ae <__divmodhi4+0xa>
 4aa:	00 94       	com	r0
 4ac:	06 d0       	rcall	.+12     	; 0x4ba <__divmodhi4_neg1>
 4ae:	77 fd       	sbrc	r23, 7
 4b0:	08 d0       	rcall	.+16     	; 0x4c2 <__divmodhi4_neg2>
 4b2:	1a d0       	rcall	.+52     	; 0x4e8 <__udivmodhi4>
 4b4:	07 fc       	sbrc	r0, 7
 4b6:	05 d0       	rcall	.+10     	; 0x4c2 <__divmodhi4_neg2>
 4b8:	3e f4       	brtc	.+14     	; 0x4c8 <__divmodhi4_exit>

000004ba <__divmodhi4_neg1>:
 4ba:	90 95       	com	r25
 4bc:	81 95       	neg	r24
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	08 95       	ret

000004c2 <__divmodhi4_neg2>:
 4c2:	70 95       	com	r23
 4c4:	61 95       	neg	r22
 4c6:	7f 4f       	sbci	r23, 0xFF	; 255

000004c8 <__divmodhi4_exit>:
 4c8:	08 95       	ret

000004ca <__umulhisi3>:
 4ca:	a2 9f       	mul	r26, r18
 4cc:	b0 01       	movw	r22, r0
 4ce:	b3 9f       	mul	r27, r19
 4d0:	c0 01       	movw	r24, r0
 4d2:	a3 9f       	mul	r26, r19
 4d4:	70 0d       	add	r23, r0
 4d6:	81 1d       	adc	r24, r1
 4d8:	11 24       	eor	r1, r1
 4da:	91 1d       	adc	r25, r1
 4dc:	b2 9f       	mul	r27, r18
 4de:	70 0d       	add	r23, r0
 4e0:	81 1d       	adc	r24, r1
 4e2:	11 24       	eor	r1, r1
 4e4:	91 1d       	adc	r25, r1
 4e6:	08 95       	ret

000004e8 <__udivmodhi4>:
 4e8:	aa 1b       	sub	r26, r26
 4ea:	bb 1b       	sub	r27, r27
 4ec:	51 e1       	ldi	r21, 0x11	; 17
 4ee:	07 c0       	rjmp	.+14     	; 0x4fe <__udivmodhi4_ep>

000004f0 <__udivmodhi4_loop>:
 4f0:	aa 1f       	adc	r26, r26
 4f2:	bb 1f       	adc	r27, r27
 4f4:	a6 17       	cp	r26, r22
 4f6:	b7 07       	cpc	r27, r23
 4f8:	10 f0       	brcs	.+4      	; 0x4fe <__udivmodhi4_ep>
 4fa:	a6 1b       	sub	r26, r22
 4fc:	b7 0b       	sbc	r27, r23

000004fe <__udivmodhi4_ep>:
 4fe:	88 1f       	adc	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	5a 95       	dec	r21
 504:	a9 f7       	brne	.-22     	; 0x4f0 <__udivmodhi4_loop>
 506:	80 95       	com	r24
 508:	90 95       	com	r25
 50a:	bc 01       	movw	r22, r24
 50c:	cd 01       	movw	r24, r26
 50e:	08 95       	ret

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
