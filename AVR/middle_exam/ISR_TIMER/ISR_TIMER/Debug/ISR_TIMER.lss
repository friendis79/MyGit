
ISR_TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000029e  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080012a  0080012a  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aed  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008df  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f4  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00001bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000463  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000298  00000000  00000000  0000207f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002317  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e9       	ldi	r30, 0x9E	; 158
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6b d0       	rcall	.+214    	; 0x19a <main>
  c4:	ea c0       	rjmp	.+468    	; 0x29a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <row_scan>:
}

char row_scan(char row)
{
	char col = -1;
	if (row == 0)
  c8:	81 11       	cpse	r24, r1
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <row_scan+0xa>
	PORTC = 0x0e;
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	0e c0       	rjmp	.+28     	; 0xee <row_scan+0x26>
	else if (row == 1)
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	19 f4       	brne	.+6      	; 0xdc <row_scan+0x14>
	PORTC = 0x0d;
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	85 bb       	out	0x15, r24	; 21
  da:	09 c0       	rjmp	.+18     	; 0xee <row_scan+0x26>
	else if (row == 2)
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	19 f4       	brne	.+6      	; 0xe6 <row_scan+0x1e>
	PORTC = 0x0b;
  e0:	8b e0       	ldi	r24, 0x0B	; 11
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	04 c0       	rjmp	.+8      	; 0xee <row_scan+0x26>
	else if (row == 3)
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	11 f4       	brne	.+4      	; 0xee <row_scan+0x26>
	PORTC = 0x07;
  ea:	87 e0       	ldi	r24, 0x07	; 7
  ec:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	81 e3       	ldi	r24, 0x31	; 49
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <row_scan+0x28>
  f4:	00 00       	nop

	_delay_us(10);
	
	char pin_info = PINC >> 4;
  f6:	83 b3       	in	r24, 0x13	; 19
  f8:	82 95       	swap	r24
  fa:	8f 70       	andi	r24, 0x0F	; 15

	if (pin_info == 0x1)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	41 f0       	breq	.+16     	; 0x110 <row_scan+0x48>
	col = 0;
	else if (pin_info == 0x2)
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	41 f0       	breq	.+16     	; 0x114 <row_scan+0x4c>
	col = 1;
	else if (pin_info == 0x4)
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	41 f0       	breq	.+16     	; 0x118 <row_scan+0x50>
	col = 2;
	else if (pin_info == 0x8)
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	41 f0       	breq	.+16     	; 0x11c <row_scan+0x54>
	}
}

char row_scan(char row)
{
	char col = -1;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	08 95       	ret
	_delay_us(10);
	
	char pin_info = PINC >> 4;

	if (pin_info == 0x1)
	col = 0;
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret
	else if (pin_info == 0x2)
	col = 1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	08 95       	ret
	else if (pin_info == 0x4)
	col = 2;
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	08 95       	ret
	else if (pin_info == 0x8)
	col = 3;
 11c:	83 e0       	ldi	r24, 0x03	; 3

	return col;
}
 11e:	08 95       	ret

00000120 <key_scan>:

char key_scan()
{
 120:	cf 93       	push	r28
	for (char row = 0; row < 4; row++)
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	09 c0       	rjmp	.+18     	; 0x138 <key_scan+0x18>
	{
		char col = row_scan(row);
 126:	8c 2f       	mov	r24, r28
 128:	cf df       	rcall	.-98     	; 0xc8 <row_scan>
		if (col != 0xff)
 12a:	8f 3f       	cpi	r24, 0xFF	; 255
 12c:	21 f0       	breq	.+8      	; 0x136 <key_scan+0x16>
		{
			return 4 * row + col;  // 키패드 위치 반환
 12e:	cc 0f       	add	r28, r28
 130:	cc 0f       	add	r28, r28
 132:	8c 0f       	add	r24, r28
 134:	04 c0       	rjmp	.+8      	; 0x13e <key_scan+0x1e>
	return col;
}

char key_scan()
{
	for (char row = 0; row < 4; row++)
 136:	cf 5f       	subi	r28, 0xFF	; 255
 138:	c4 30       	cpi	r28, 0x04	; 4
 13a:	a8 f3       	brcs	.-22     	; 0x126 <key_scan+0x6>
		if (col != 0xff)
		{
			return 4 * row + col;  // 키패드 위치 반환
		}
	}
	return 0xff;  // 키패드 입력이 없을 경우
 13c:	8f ef       	ldi	r24, 0xFF	; 255
}
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <FND_Display>:

void FND_Display(int mins)
{
 142:	9c 01       	movw	r18, r24
	if (mins >= 10)  // 두 자리 수 처리
 144:	8a 30       	cpi	r24, 0x0A	; 10
 146:	91 05       	cpc	r25, r1
 148:	9c f0       	brlt	.+38     	; 0x170 <FND_Display+0x2e>
	{
		PORTB = Port_char[(mins / 10)];
 14a:	6a e0       	ldi	r22, 0x0A	; 10
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	7e d0       	rcall	.+252    	; 0x24c <__divmodhi4>
 150:	fb 01       	movw	r30, r22
 152:	e0 5e       	subi	r30, 0xE0	; 224
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	80 81       	ld	r24, Z
 158:	88 bb       	out	0x18, r24	; 24
		PORTE = 0x10;  // 첫 번째 자리
 15a:	80 e1       	ldi	r24, 0x10	; 16
 15c:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	4f ef       	ldi	r20, 0xFF	; 255
 160:	8f e7       	ldi	r24, 0x7F	; 127
 162:	96 e1       	ldi	r25, 0x16	; 22
 164:	41 50       	subi	r20, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <FND_Display+0x22>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <FND_Display+0x2c>
 16e:	00 00       	nop
		_delay_ms(500);
	}

	PORTB = Port_char[(mins % 10)];
 170:	c9 01       	movw	r24, r18
 172:	6a e0       	ldi	r22, 0x0A	; 10
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	6a d0       	rcall	.+212    	; 0x24c <__divmodhi4>
 178:	fc 01       	movw	r30, r24
 17a:	e0 5e       	subi	r30, 0xE0	; 224
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	80 81       	ld	r24, Z
 180:	88 bb       	out	0x18, r24	; 24
	PORTE = 0x20;  // 두 번째 자리
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	83 b9       	out	0x03, r24	; 3
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	4f e7       	ldi	r20, 0x7F	; 127
 18a:	86 e1       	ldi	r24, 0x16	; 22
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	40 40       	sbci	r20, 0x00	; 0
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <FND_Display+0x4a>
 194:	00 c0       	rjmp	.+0      	; 0x196 <FND_Display+0x54>
 196:	00 00       	nop
 198:	08 95       	ret

0000019a <main>:
volatile int minutes = 0;  // 분을 저장할 변수
volatile int seconds = 0;  // 카운트 다운 시 사용할 초 변수

int main(void)
{
	DDRB = 0xff;  // FND 포트
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x0f;  // 키패드 포트
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	94 bb       	out	0x14, r25	; 20
	DDRE = 0xff;  // FND 디지털 라인 포트
 1a2:	82 b9       	out	0x02, r24	; 2

	while (1)
	{
		// 타이머 구현
		if (seconds <= 0 && minutes > 0)
 1a4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 1a8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 1ac:	18 16       	cp	r1, r24
 1ae:	19 06       	cpc	r1, r25
 1b0:	b4 f0       	brlt	.+44     	; 0x1de <main+0x44>
 1b2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <minutes>
 1b6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <minutes+0x1>
 1ba:	18 16       	cp	r1, r24
 1bc:	19 06       	cpc	r1, r25
 1be:	7c f4       	brge	.+30     	; 0x1de <main+0x44>
		{
			seconds = 60;  // 1분 = 60초
 1c0:	8c e3       	ldi	r24, 0x3C	; 60
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 1c8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
			minutes--;  // 1분 감소
 1cc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <minutes>
 1d0:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <minutes+0x1>
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <minutes+0x1>
 1da:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <minutes>
		}
		
		if (seconds > 0)
 1de:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 1e2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 1e6:	18 16       	cp	r1, r24
 1e8:	19 06       	cpc	r1, r25
 1ea:	94 f4       	brge	.+36     	; 0x210 <main+0x76>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	9c e2       	ldi	r25, 0x2C	; 44
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x58>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x62>
 1fc:	00 00       	nop
		{
			_delay_ms(1000);  // 1초 대기
			seconds--;  // 1초 감소
 1fe:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 202:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 20c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
		}

		// FND 디스플레이
		FND_Display(minutes);
 210:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <minutes>
 214:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <minutes+0x1>
 218:	94 df       	rcall	.-216    	; 0x142 <FND_Display>

		// 키패드 입력을 통한 시간 설정
		char key = key_scan();
 21a:	82 df       	rcall	.-252    	; 0x120 <key_scan>
 21c:	8f 3f       	cpi	r24, 0xFF	; 255
		if (key != 0xff)
 21e:	09 f4       	brne	.+2      	; 0x222 <main+0x88>
 220:	c1 cf       	rjmp	.-126    	; 0x1a4 <main+0xa>
 222:	e8 2f       	mov	r30, r24
		{
			if ((key_info[key] >= 0) && (key_info[key] <= 9))
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	e0 50       	subi	r30, 0x00	; 0
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	80 81       	ld	r24, Z
 230:	91 81       	ldd	r25, Z+1	; 0x01
 232:	8a 30       	cpi	r24, 0x0A	; 10
 234:	91 05       	cpc	r25, r1
 236:	08 f0       	brcs	.+2      	; 0x23a <main+0xa0>
 238:	b5 cf       	rjmp	.-150    	; 0x1a4 <main+0xa>
 23a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <minutes+0x1>
			{
				minutes = key_info[key];  // 분을 키패드로 설정
 23e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <minutes>
 242:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x1>
				seconds = 0;  // 초 초기화
 246:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
 24a:	ac cf       	rjmp	.-168    	; 0x1a4 <main+0xa>

0000024c <__divmodhi4>:
 24c:	97 fb       	bst	r25, 7
 24e:	07 2e       	mov	r0, r23
 250:	16 f4       	brtc	.+4      	; 0x256 <__divmodhi4+0xa>
 252:	00 94       	com	r0
 254:	06 d0       	rcall	.+12     	; 0x262 <__divmodhi4_neg1>
 256:	77 fd       	sbrc	r23, 7
 258:	08 d0       	rcall	.+16     	; 0x26a <__divmodhi4_neg2>
 25a:	0b d0       	rcall	.+22     	; 0x272 <__udivmodhi4>
 25c:	07 fc       	sbrc	r0, 7
 25e:	05 d0       	rcall	.+10     	; 0x26a <__divmodhi4_neg2>
 260:	3e f4       	brtc	.+14     	; 0x270 <__divmodhi4_exit>

00000262 <__divmodhi4_neg1>:
 262:	90 95       	com	r25
 264:	81 95       	neg	r24
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	08 95       	ret

0000026a <__divmodhi4_neg2>:
 26a:	70 95       	com	r23
 26c:	61 95       	neg	r22
 26e:	7f 4f       	sbci	r23, 0xFF	; 255

00000270 <__divmodhi4_exit>:
 270:	08 95       	ret

00000272 <__udivmodhi4>:
 272:	aa 1b       	sub	r26, r26
 274:	bb 1b       	sub	r27, r27
 276:	51 e1       	ldi	r21, 0x11	; 17
 278:	07 c0       	rjmp	.+14     	; 0x288 <__udivmodhi4_ep>

0000027a <__udivmodhi4_loop>:
 27a:	aa 1f       	adc	r26, r26
 27c:	bb 1f       	adc	r27, r27
 27e:	a6 17       	cp	r26, r22
 280:	b7 07       	cpc	r27, r23
 282:	10 f0       	brcs	.+4      	; 0x288 <__udivmodhi4_ep>
 284:	a6 1b       	sub	r26, r22
 286:	b7 0b       	sbc	r27, r23

00000288 <__udivmodhi4_ep>:
 288:	88 1f       	adc	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	5a 95       	dec	r21
 28e:	a9 f7       	brne	.-22     	; 0x27a <__udivmodhi4_loop>
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	bc 01       	movw	r22, r24
 296:	cd 01       	movw	r24, r26
 298:	08 95       	ret

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
