
JJS_TImer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000c20  00000c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c20  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c04  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000951  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000607  00000000  00000000  000022bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  000028c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049b  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000698  00000000  00000000  00002e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000034eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
   2:	00 00       	nop
   4:	99 c0       	rjmp	.+306    	; 0x138 <__bad_interrupt>
   6:	00 00       	nop
   8:	97 c0       	rjmp	.+302    	; 0x138 <__bad_interrupt>
   a:	00 00       	nop
   c:	95 c0       	rjmp	.+298    	; 0x138 <__bad_interrupt>
   e:	00 00       	nop
  10:	93 c0       	rjmp	.+294    	; 0x138 <__bad_interrupt>
  12:	00 00       	nop
  14:	91 c0       	rjmp	.+290    	; 0x138 <__bad_interrupt>
  16:	00 00       	nop
  18:	8f c0       	rjmp	.+286    	; 0x138 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8d c0       	rjmp	.+282    	; 0x138 <__bad_interrupt>
  1e:	00 00       	nop
  20:	8b c0       	rjmp	.+278    	; 0x138 <__bad_interrupt>
  22:	00 00       	nop
  24:	89 c0       	rjmp	.+274    	; 0x138 <__bad_interrupt>
  26:	00 00       	nop
  28:	87 c0       	rjmp	.+270    	; 0x138 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	85 c0       	rjmp	.+266    	; 0x138 <__bad_interrupt>
  2e:	00 00       	nop
  30:	83 c0       	rjmp	.+262    	; 0x138 <__bad_interrupt>
  32:	00 00       	nop
  34:	81 c0       	rjmp	.+258    	; 0x138 <__bad_interrupt>
  36:	00 00       	nop
  38:	7f c0       	rjmp	.+254    	; 0x138 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7d c0       	rjmp	.+250    	; 0x138 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7b c0       	rjmp	.+246    	; 0x138 <__bad_interrupt>
  42:	00 00       	nop
  44:	79 c0       	rjmp	.+242    	; 0x138 <__bad_interrupt>
  46:	00 00       	nop
  48:	77 c0       	rjmp	.+238    	; 0x138 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	75 c0       	rjmp	.+234    	; 0x138 <__bad_interrupt>
  4e:	00 00       	nop
  50:	73 c0       	rjmp	.+230    	; 0x138 <__bad_interrupt>
  52:	00 00       	nop
  54:	71 c0       	rjmp	.+226    	; 0x138 <__bad_interrupt>
  56:	00 00       	nop
  58:	6f c0       	rjmp	.+222    	; 0x138 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6d c0       	rjmp	.+218    	; 0x138 <__bad_interrupt>
  5e:	00 00       	nop
  60:	6b c0       	rjmp	.+214    	; 0x138 <__bad_interrupt>
  62:	00 00       	nop
  64:	69 c0       	rjmp	.+210    	; 0x138 <__bad_interrupt>
  66:	00 00       	nop
  68:	67 c0       	rjmp	.+206    	; 0x138 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	65 c0       	rjmp	.+202    	; 0x138 <__bad_interrupt>
  6e:	00 00       	nop
  70:	63 c0       	rjmp	.+198    	; 0x138 <__bad_interrupt>
  72:	00 00       	nop
  74:	61 c0       	rjmp	.+194    	; 0x138 <__bad_interrupt>
  76:	00 00       	nop
  78:	5f c0       	rjmp	.+190    	; 0x138 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5d c0       	rjmp	.+186    	; 0x138 <__bad_interrupt>
  7e:	00 00       	nop
  80:	5b c0       	rjmp	.+182    	; 0x138 <__bad_interrupt>
  82:	00 00       	nop
  84:	59 c0       	rjmp	.+178    	; 0x138 <__bad_interrupt>
  86:	00 00       	nop
  88:	57 c0       	rjmp	.+174    	; 0x138 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	07 63       	ori	r16, 0x37	; 55
  8e:	42 36       	cpi	r20, 0x62	; 98
  90:	b7 9b       	sbis	0x16, 7	; 22
  92:	d8 a7       	std	Y+40, r29	; 0x28
  94:	1a 39       	cpi	r17, 0x9A	; 154
  96:	68 56       	subi	r22, 0x68	; 104
  98:	18 ae       	std	Y+56, r1	; 0x38
  9a:	ba ab       	std	Y+50, r27	; 0x32
  9c:	55 8c       	ldd	r5, Z+29	; 0x1d
  9e:	1d 3c       	cpi	r17, 0xCD	; 205
  a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
  a2:	57 63       	ori	r21, 0x37	; 55
  a4:	bd 6d       	ori	r27, 0xDD	; 221
  a6:	ed fd       	.word	0xfded	; ????
  a8:	75 3e       	cpi	r23, 0xE5	; 229
  aa:	f6 17       	cp	r31, r22
  ac:	72 31       	cpi	r23, 0x12	; 18
  ae:	bf 00       	.word	0x00bf	; ????
  b0:	00 00       	nop
  b2:	80 3f       	cpi	r24, 0xF0	; 240
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <exp+0x28>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d0 e1       	ldi	r29, 0x10	; 16
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	11 e0       	ldi	r17, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	e0 e2       	ldi	r30, 0x20	; 32
 122:	fc e0       	ldi	r31, 0x0C	; 12
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	0b bf       	out	0x3b, r16	; 59
 128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
 12a:	07 90       	elpm	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	a0 32       	cpi	r26, 0x20	; 32
 130:	b1 07       	cpc	r27, r17
 132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>
 134:	52 d1       	rcall	.+676    	; 0x3da <main>
 136:	72 c5       	rjmp	.+2788   	; 0xc1c <_exit>

00000138 <__bad_interrupt>:
 138:	63 cf       	rjmp	.-314    	; 0x0 <__vectors>

0000013a <FND_Display>:
   }
}

void FND_Display(int idx, int number, int dot)
{
	if (idx == 0)
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	19 f4       	brne	.+6      	; 0x144 <FND_Display+0xa>
	PORTE = 0x80;
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	83 b9       	out	0x03, r24	; 3
 142:	10 c0       	rjmp	.+32     	; 0x164 <FND_Display+0x2a>
	else if (idx == 1)
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	91 05       	cpc	r25, r1
 148:	19 f4       	brne	.+6      	; 0x150 <FND_Display+0x16>
	PORTE = 0x40;
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	83 b9       	out	0x03, r24	; 3
 14e:	0a c0       	rjmp	.+20     	; 0x164 <FND_Display+0x2a>
	else if (idx == 2)
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	91 05       	cpc	r25, r1
 154:	19 f4       	brne	.+6      	; 0x15c <FND_Display+0x22>
	PORTE = 0x20;
 156:	80 e2       	ldi	r24, 0x20	; 32
 158:	83 b9       	out	0x03, r24	; 3
 15a:	04 c0       	rjmp	.+8      	; 0x164 <FND_Display+0x2a>
	else if (idx == 3)
 15c:	03 97       	sbiw	r24, 0x03	; 3
 15e:	11 f4       	brne	.+4      	; 0x164 <FND_Display+0x2a>
	PORTE = 0x10;
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	83 b9       	out	0x03, r24	; 3
	
	if (number == 0)
 164:	61 15       	cp	r22, r1
 166:	71 05       	cpc	r23, r1
 168:	19 f4       	brne	.+6      	; 0x170 <FND_Display+0x36>
	PORTB = 0xc0;
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	88 bb       	out	0x18, r24	; 24
 16e:	35 c0       	rjmp	.+106    	; 0x1da <FND_Display+0xa0>
	else if (number == 1)
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	71 05       	cpc	r23, r1
 174:	19 f4       	brne	.+6      	; 0x17c <FND_Display+0x42>
	PORTB = 0xF9;
 176:	89 ef       	ldi	r24, 0xF9	; 249
 178:	88 bb       	out	0x18, r24	; 24
 17a:	2f c0       	rjmp	.+94     	; 0x1da <FND_Display+0xa0>
	else if (number == 2)
 17c:	62 30       	cpi	r22, 0x02	; 2
 17e:	71 05       	cpc	r23, r1
 180:	19 f4       	brne	.+6      	; 0x188 <FND_Display+0x4e>
	PORTB = 0xa4;
 182:	84 ea       	ldi	r24, 0xA4	; 164
 184:	88 bb       	out	0x18, r24	; 24
 186:	29 c0       	rjmp	.+82     	; 0x1da <FND_Display+0xa0>
	else if (number == 3)
 188:	63 30       	cpi	r22, 0x03	; 3
 18a:	71 05       	cpc	r23, r1
 18c:	19 f4       	brne	.+6      	; 0x194 <FND_Display+0x5a>
	PORTB = 0xb0;
 18e:	80 eb       	ldi	r24, 0xB0	; 176
 190:	88 bb       	out	0x18, r24	; 24
 192:	23 c0       	rjmp	.+70     	; 0x1da <FND_Display+0xa0>
	else if (number == 4)
 194:	64 30       	cpi	r22, 0x04	; 4
 196:	71 05       	cpc	r23, r1
 198:	19 f4       	brne	.+6      	; 0x1a0 <FND_Display+0x66>
	PORTB = 0x99;
 19a:	89 e9       	ldi	r24, 0x99	; 153
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	1d c0       	rjmp	.+58     	; 0x1da <FND_Display+0xa0>
	else if (number == 5)
 1a0:	65 30       	cpi	r22, 0x05	; 5
 1a2:	71 05       	cpc	r23, r1
 1a4:	19 f4       	brne	.+6      	; 0x1ac <FND_Display+0x72>
	PORTB = 0x92;
 1a6:	82 e9       	ldi	r24, 0x92	; 146
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	17 c0       	rjmp	.+46     	; 0x1da <FND_Display+0xa0>
	else if (number == 6)
 1ac:	66 30       	cpi	r22, 0x06	; 6
 1ae:	71 05       	cpc	r23, r1
 1b0:	19 f4       	brne	.+6      	; 0x1b8 <FND_Display+0x7e>
	PORTB = 0x82;
 1b2:	82 e8       	ldi	r24, 0x82	; 130
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	11 c0       	rjmp	.+34     	; 0x1da <FND_Display+0xa0>
	else if (number == 7)
 1b8:	67 30       	cpi	r22, 0x07	; 7
 1ba:	71 05       	cpc	r23, r1
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <FND_Display+0x8a>
	PORTB = 0xd8;
 1be:	88 ed       	ldi	r24, 0xD8	; 216
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	0b c0       	rjmp	.+22     	; 0x1da <FND_Display+0xa0>
	else if (number == 8)
 1c4:	68 30       	cpi	r22, 0x08	; 8
 1c6:	71 05       	cpc	r23, r1
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <FND_Display+0x96>
	PORTB = 0x80;
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	88 bb       	out	0x18, r24	; 24
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <FND_Display+0xa0>
	else if (number == 9)
 1d0:	69 30       	cpi	r22, 0x09	; 9
 1d2:	71 05       	cpc	r23, r1
 1d4:	11 f4       	brne	.+4      	; 0x1da <FND_Display+0xa0>
	PORTB = 0x90;
 1d6:	80 e9       	ldi	r24, 0x90	; 144
 1d8:	88 bb       	out	0x18, r24	; 24
	
	if (dot == 1) PORTB = PORTB - 0x80;      //MSB 1000_0000는 dot 점등 유무를 나타내므로 빼줘서 켜줌(0이 키는거)
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	51 05       	cpc	r21, r1
 1de:	19 f4       	brne	.+6      	; 0x1e6 <FND_Display+0xac>
 1e0:	88 b3       	in	r24, 0x18	; 24
 1e2:	80 58       	subi	r24, 0x80	; 128
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	08 95       	ret

000001e8 <row_scan>:
{
	
	char col = 0xff;
	char pin_info;
	
	if(row == 0) PORTC = 0x0e;         //1110
 1e8:	81 11       	cpse	r24, r1
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <row_scan+0xa>
 1ec:	8e e0       	ldi	r24, 0x0E	; 14
 1ee:	85 bb       	out	0x15, r24	; 21
 1f0:	0e c0       	rjmp	.+28     	; 0x20e <row_scan+0x26>
	else if(row == 1) PORTC = 0x0d;      //1101
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	19 f4       	brne	.+6      	; 0x1fc <row_scan+0x14>
 1f6:	8d e0       	ldi	r24, 0x0D	; 13
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	09 c0       	rjmp	.+18     	; 0x20e <row_scan+0x26>
	else if(row == 2) PORTC = 0x0b;      //1011
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	19 f4       	brne	.+6      	; 0x206 <row_scan+0x1e>
 200:	8b e0       	ldi	r24, 0x0B	; 11
 202:	85 bb       	out	0x15, r24	; 21
 204:	04 c0       	rjmp	.+8      	; 0x20e <row_scan+0x26>
	else if(row == 3) PORTC = 0x07;      //0111         //row어디를 활성화할지? 정하고
 206:	83 30       	cpi	r24, 0x03	; 3
 208:	11 f4       	brne	.+4      	; 0x20e <row_scan+0x26>
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	86 e6       	ldi	r24, 0x66	; 102
 210:	9e e0       	ldi	r25, 0x0E	; 14
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <row_scan+0x2a>
 216:	00 00       	nop
	
	_delay_ms(1);
	
	pin_info = PINC >> 4;
 218:	83 b3       	in	r24, 0x13	; 19
 21a:	82 95       	swap	r24
 21c:	8f 70       	andi	r24, 0x0F	; 15
	
	if (pin_info == 0x1) col =0;      //0001         //column 버튼을 누를 때 해당 값 반환한다
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	41 f0       	breq	.+16     	; 0x232 <row_scan+0x4a>
	else if(pin_info == 0x2) col = 1;   //0010
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	41 f0       	breq	.+16     	; 0x236 <row_scan+0x4e>
	else if(pin_info == 0x4) col = 2;   //0100
 226:	84 30       	cpi	r24, 0x04	; 4
 228:	41 f0       	breq	.+16     	; 0x23a <row_scan+0x52>
	else if(pin_info == 0x8) col = 3;   //1000
 22a:	88 30       	cpi	r24, 0x08	; 8
 22c:	41 f0       	breq	.+16     	; 0x23e <row_scan+0x56>
}

char row_scan(char row)         //char인 이유: 0,1,2,3 반환하기 위해
{
	
	char col = 0xff;
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	08 95       	ret
	
	_delay_ms(1);
	
	pin_info = PINC >> 4;
	
	if (pin_info == 0x1) col =0;      //0001         //column 버튼을 누를 때 해당 값 반환한다
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret
	else if(pin_info == 0x2) col = 1;   //0010
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	08 95       	ret
	else if(pin_info == 0x4) col = 2;   //0100
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	08 95       	ret
	else if(pin_info == 0x8) col = 3;   //1000
 23e:	83 e0       	ldi	r24, 0x03	; 3
	
	return (col);
}
 240:	08 95       	ret

00000242 <key_scan>:

char key_scan()      //row scan 반복문 돌려서 0이 되는 곳 col과 row 조합해서 반환
{
 242:	cf 93       	push	r28
	char key_index = 0xff;
	char col_scan;
	char row;
	for(row = 0; row< 4;row ++)
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	0a c0       	rjmp	.+20     	; 0x25c <key_scan+0x1a>
	{
		col_scan = row_scan(row);
 248:	8c 2f       	mov	r24, r28
 24a:	ce df       	rcall	.-100    	; 0x1e8 <row_scan>
		if(col_scan != 0xff){
 24c:	8f 3f       	cpi	r24, 0xFF	; 255
 24e:	29 f0       	breq	.+10     	; 0x25a <key_scan+0x18>
			key_index = 4 * row + col_scan + 1;
 250:	cc 0f       	add	r28, r28
 252:	cc 0f       	add	r28, r28
 254:	8c 0f       	add	r24, r28
 256:	8f 5f       	subi	r24, 0xFF	; 255
			return key_index;
 258:	04 c0       	rjmp	.+8      	; 0x262 <key_scan+0x20>
char key_scan()      //row scan 반복문 돌려서 0이 되는 곳 col과 row 조합해서 반환
{
	char key_index = 0xff;
	char col_scan;
	char row;
	for(row = 0; row< 4;row ++)
 25a:	cf 5f       	subi	r28, 0xFF	; 255
 25c:	c4 30       	cpi	r28, 0x04	; 4
 25e:	a0 f3       	brcs	.-24     	; 0x248 <key_scan+0x6>
			key_index = 4 * row + col_scan + 1;
			return key_index;
		}
		
	}
	return(0xff);
 260:	8f ef       	ldi	r24, 0xFF	; 255
}
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <get_value>:

int get_value(int display_key[], int count)
{
 266:	6f 92       	push	r6
 268:	7f 92       	push	r7
 26a:	8f 92       	push	r8
 26c:	9f 92       	push	r9
 26e:	af 92       	push	r10
 270:	bf 92       	push	r11
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	6c 01       	movw	r12, r24
 284:	7b 01       	movw	r14, r22
	int v = 0;
	for (int i = 3; i >= 0; i--)
 286:	c3 e0       	ldi	r28, 0x03	; 3
 288:	d0 e0       	ldi	r29, 0x00	; 0
	return(0xff);
}

int get_value(int display_key[], int count)
{
	int v = 0;
 28a:	61 2c       	mov	r6, r1
 28c:	71 2c       	mov	r7, r1
	for (int i = 3; i >= 0; i--)
 28e:	2e c0       	rjmp	.+92     	; 0x2ec <get_value+0x86>
	{
		v += display_key[i] * pow(10, count);
 290:	fe 01       	movw	r30, r28
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	ec 0d       	add	r30, r12
 298:	fd 1d       	adc	r31, r13
 29a:	00 81       	ld	r16, Z
 29c:	11 81       	ldd	r17, Z+1	; 0x01
 29e:	b7 01       	movw	r22, r14
 2a0:	0f 2c       	mov	r0, r15
 2a2:	00 0c       	add	r0, r0
 2a4:	88 0b       	sbc	r24, r24
 2a6:	99 0b       	sbc	r25, r25
 2a8:	db d1       	rcall	.+950    	; 0x660 <__floatsisf>
 2aa:	9b 01       	movw	r18, r22
 2ac:	ac 01       	movw	r20, r24
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	80 e2       	ldi	r24, 0x20	; 32
 2b4:	91 e4       	ldi	r25, 0x41	; 65
 2b6:	c3 d2       	rcall	.+1414   	; 0x83e <pow>
 2b8:	4b 01       	movw	r8, r22
 2ba:	5c 01       	movw	r10, r24
 2bc:	b8 01       	movw	r22, r16
 2be:	11 0f       	add	r17, r17
 2c0:	88 0b       	sbc	r24, r24
 2c2:	99 0b       	sbc	r25, r25
 2c4:	cd d1       	rcall	.+922    	; 0x660 <__floatsisf>
 2c6:	a5 01       	movw	r20, r10
 2c8:	94 01       	movw	r18, r8
 2ca:	56 d2       	rcall	.+1196   	; 0x778 <__mulsf3>
 2cc:	4b 01       	movw	r8, r22
 2ce:	5c 01       	movw	r10, r24
 2d0:	b3 01       	movw	r22, r6
 2d2:	77 0c       	add	r7, r7
 2d4:	88 0b       	sbc	r24, r24
 2d6:	99 0b       	sbc	r25, r25
 2d8:	c3 d1       	rcall	.+902    	; 0x660 <__floatsisf>
 2da:	a5 01       	movw	r20, r10
 2dc:	94 01       	movw	r18, r8
 2de:	29 d1       	rcall	.+594    	; 0x532 <__addsf3>
 2e0:	8c d1       	rcall	.+792    	; 0x5fa <__fixsfsi>
 2e2:	3b 01       	movw	r6, r22
		count -= 1;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	e8 1a       	sub	r14, r24
 2e8:	f1 08       	sbc	r15, r1
}

int get_value(int display_key[], int count)
{
	int v = 0;
	for (int i = 3; i >= 0; i--)
 2ea:	21 97       	sbiw	r28, 0x01	; 1
 2ec:	dd 23       	and	r29, r29
 2ee:	84 f6       	brge	.-96     	; 0x290 <get_value+0x2a>
	{
		v += display_key[i] * pow(10, count);
		count -= 1;
	}
	return v;
}
 2f0:	c3 01       	movw	r24, r6
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	df 90       	pop	r13
 300:	cf 90       	pop	r12
 302:	bf 90       	pop	r11
 304:	af 90       	pop	r10
 306:	9f 90       	pop	r9
 308:	8f 90       	pop	r8
 30a:	7f 90       	pop	r7
 30c:	6f 90       	pop	r6
 30e:	08 95       	ret

00000310 <TimeDisplay>:


void TimeDisplay(int idx, long unsigned int t)
{
 310:	cf 92       	push	r12
 312:	df 92       	push	r13
 314:	ef 92       	push	r14
 316:	ff 92       	push	r15
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	ec 01       	movw	r28, r24
	int number = 0;
	if(idx == 0) number = (t/10)%10;   //일의자리
 31e:	00 97       	sbiw	r24, 0x00	; 0
 320:	91 f4       	brne	.+36     	; 0x346 <TimeDisplay+0x36>
 322:	0f 2e       	mov	r0, r31
 324:	fa e0       	ldi	r31, 0x0A	; 10
 326:	cf 2e       	mov	r12, r31
 328:	d1 2c       	mov	r13, r1
 32a:	e1 2c       	mov	r14, r1
 32c:	f1 2c       	mov	r15, r1
 32e:	f0 2d       	mov	r31, r0
 330:	cb 01       	movw	r24, r22
 332:	ba 01       	movw	r22, r20
 334:	a7 01       	movw	r20, r14
 336:	96 01       	movw	r18, r12
 338:	4f d4       	rcall	.+2206   	; 0xbd8 <__udivmodsi4>
 33a:	ca 01       	movw	r24, r20
 33c:	b9 01       	movw	r22, r18
 33e:	a7 01       	movw	r20, r14
 340:	96 01       	movw	r18, r12
 342:	4a d4       	rcall	.+2196   	; 0xbd8 <__udivmodsi4>
 344:	37 c0       	rjmp	.+110    	; 0x3b4 <TimeDisplay+0xa4>
	else if (idx == 1) number = (t/100)%10;   //십의자리
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	91 05       	cpc	r25, r1
 34a:	79 f4       	brne	.+30     	; 0x36a <TimeDisplay+0x5a>
 34c:	cb 01       	movw	r24, r22
 34e:	ba 01       	movw	r22, r20
 350:	24 e6       	ldi	r18, 0x64	; 100
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	3f d4       	rcall	.+2174   	; 0xbd8 <__udivmodsi4>
 35a:	ca 01       	movw	r24, r20
 35c:	b9 01       	movw	r22, r18
 35e:	2a e0       	ldi	r18, 0x0A	; 10
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	38 d4       	rcall	.+2160   	; 0xbd8 <__udivmodsi4>
 368:	25 c0       	rjmp	.+74     	; 0x3b4 <TimeDisplay+0xa4>
	else if (idx == 2) number = (t/1000)%10;   //백의자리
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	91 05       	cpc	r25, r1
 36e:	79 f4       	brne	.+30     	; 0x38e <TimeDisplay+0x7e>
 370:	cb 01       	movw	r24, r22
 372:	ba 01       	movw	r22, r20
 374:	28 ee       	ldi	r18, 0xE8	; 232
 376:	33 e0       	ldi	r19, 0x03	; 3
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	2d d4       	rcall	.+2138   	; 0xbd8 <__udivmodsi4>
 37e:	ca 01       	movw	r24, r20
 380:	b9 01       	movw	r22, r18
 382:	2a e0       	ldi	r18, 0x0A	; 10
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	26 d4       	rcall	.+2124   	; 0xbd8 <__udivmodsi4>
 38c:	13 c0       	rjmp	.+38     	; 0x3b4 <TimeDisplay+0xa4>
	else if (idx == 3) number = (t/10000)%10;   //천의자리
 38e:	03 97       	sbiw	r24, 0x03	; 3
 390:	79 f4       	brne	.+30     	; 0x3b0 <TimeDisplay+0xa0>
 392:	cb 01       	movw	r24, r22
 394:	ba 01       	movw	r22, r20
 396:	20 e1       	ldi	r18, 0x10	; 16
 398:	37 e2       	ldi	r19, 0x27	; 39
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	1c d4       	rcall	.+2104   	; 0xbd8 <__udivmodsi4>
 3a0:	ca 01       	movw	r24, r20
 3a2:	b9 01       	movw	r22, r18
 3a4:	2a e0       	ldi	r18, 0x0A	; 10
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	15 d4       	rcall	.+2090   	; 0xbd8 <__udivmodsi4>
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <TimeDisplay+0xa4>
}


void TimeDisplay(int idx, long unsigned int t)
{
	int number = 0;
 3b0:	60 e0       	ldi	r22, 0x00	; 0
	else if (idx == 1) number = (t/100)%10;   //십의자리
	else if (idx == 2) number = (t/1000)%10;   //백의자리
	else if (idx == 3) number = (t/10000)%10;   //천의자리
	
	//도트 표시문
	if (idx != 2) FND_Display(idx, number, 0);
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	c2 30       	cpi	r28, 0x02	; 2
 3b6:	d1 05       	cpc	r29, r1
 3b8:	29 f0       	breq	.+10     	; 0x3c4 <TimeDisplay+0xb4>
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	ce 01       	movw	r24, r28
 3c0:	bc de       	rcall	.-648    	; 0x13a <FND_Display>
	else FND_Display(idx, number, 1);
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <TimeDisplay+0xbc>
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	ce 01       	movw	r24, r28
 3ca:	b7 de       	rcall	.-658    	; 0x13a <FND_Display>
	
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	cf 90       	pop	r12
 3d8:	08 95       	ret

000003da <main>:
char key_scan();
int get_value(int display_key[], int count);
void TimeDisplay(int idx, long unsigned int t);

int main(void)
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	a8 97       	sbiw	r28, 0x28	; 40
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	87 bb       	out	0x17, r24	; 23
   DDRE = 0xF0;
 3f2:	80 ef       	ldi	r24, 0xF0	; 240
 3f4:	82 b9       	out	0x02, r24	; 2
   DDRD = 0x0;
 3f6:	11 ba       	out	0x11, r1	; 17
   DDRC = 0x0f;
 3f8:	8f e0       	ldi	r24, 0x0F	; 15
 3fa:	84 bb       	out	0x14, r24	; 20
   PORTB = 0x0;
 3fc:	18 ba       	out	0x18, r1	; 24
   int idx=0;
   int key;
   int seg_delay = 4;
   int Keyinfo[16] = {1,2,3,100,4,5,6,101,7,8,9,102,200,0,201,103};
 3fe:	80 e2       	ldi	r24, 0x20	; 32
 400:	e0 e0       	ldi	r30, 0x00	; 0
 402:	f1 e0       	ldi	r31, 0x01	; 1
 404:	de 01       	movw	r26, r28
 406:	11 96       	adiw	r26, 0x01	; 1
 408:	01 90       	ld	r0, Z+
 40a:	0d 92       	st	X+, r0
 40c:	8a 95       	dec	r24
 40e:	e1 f7       	brne	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
   int t;
   int timer_state=0;
   int display_key[4]={0,0,0,0};
 410:	fe 01       	movw	r30, r28
 412:	b1 96       	adiw	r30, 0x21	; 33
 414:	88 e0       	ldi	r24, 0x08	; 8
 416:	df 01       	movw	r26, r30
 418:	1d 92       	st	X+, r1
 41a:	8a 95       	dec	r24
 41c:	e9 f7       	brne	.-6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
   FND_Display(0,0,0);
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	87 de       	rcall	.-754    	; 0x13a <FND_Display>
   int idx=0;
   int key;
   int seg_delay = 4;
   int Keyinfo[16] = {1,2,3,100,4,5,6,101,7,8,9,102,200,0,201,103};
   int t;
   int timer_state=0;
 42c:	e1 2c       	mov	r14, r1
 42e:	f1 2c       	mov	r15, r1
    DDRB = 0xFF;
   DDRE = 0xF0;
   DDRD = 0x0;
   DDRC = 0x0f;
   PORTB = 0x0;
   int idx=0;
 430:	00 e0       	ldi	r16, 0x00	; 0
   int display_key[4]={0,0,0,0};
   FND_Display(0,0,0);
   
    while (1)
    { 
      key = key_scan();
 432:	10 e0       	ldi	r17, 0x00	; 0
 434:	06 df       	rcall	.-500    	; 0x242 <key_scan>
 436:	90 e0       	ldi	r25, 0x00	; 0
      if (key != 0xff)
 438:	8f 3f       	cpi	r24, 0xFF	; 255
 43a:	91 05       	cpc	r25, r1
 43c:	09 f4       	brne	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	54 c0       	rjmp	.+168    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
      {
         if ((Keyinfo[key-1] >= 0)&&(Keyinfo[key-1] <=9))
 440:	fc 01       	movw	r30, r24
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	ee 0f       	add	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	2c 0f       	add	r18, r28
 44e:	3d 1f       	adc	r19, r29
 450:	e2 0f       	add	r30, r18
 452:	f3 1f       	adc	r31, r19
 454:	80 81       	ld	r24, Z
 456:	91 81       	ldd	r25, Z+1	; 0x01
 458:	8a 30       	cpi	r24, 0x0A	; 10
 45a:	91 05       	cpc	r25, r1
 45c:	40 f4       	brcc	.+16     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			display_key[idx] = Keyinfo[key-1];
 45e:	f8 01       	movw	r30, r16
 460:	ee 0f       	add	r30, r30
 462:	ff 1f       	adc	r31, r31
 464:	e2 0f       	add	r30, r18
 466:	f3 1f       	adc	r31, r19
 468:	91 a3       	std	Z+33, r25	; 0x21
 46a:	80 a3       	std	Z+32, r24	; 0x20
 46c:	3d c0       	rjmp	.+122    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
         else if (Keyinfo[key-1] == 100)
 46e:	84 36       	cpi	r24, 0x64	; 100
 470:	91 05       	cpc	r25, r1
 472:	61 f1       	breq	.+88     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
            idx = 0;
         else if (Keyinfo[key-1] == 101)
 474:	85 36       	cpi	r24, 0x65	; 101
 476:	91 05       	cpc	r25, r1
 478:	61 f1       	breq	.+88     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
            idx = 1;
         else if (Keyinfo[key-1] == 102)
 47a:	86 36       	cpi	r24, 0x66	; 102
 47c:	91 05       	cpc	r25, r1
 47e:	61 f1       	breq	.+88     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
            idx = 2;
         else if (Keyinfo[key-1] == 103)
 480:	87 36       	cpi	r24, 0x67	; 103
 482:	91 05       	cpc	r25, r1
 484:	61 f1       	breq	.+88     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
            idx = 3;
         
         else if (Keyinfo[key-1] == 200 && timer_state == 0){
 486:	88 3c       	cpi	r24, 0xC8	; 200
 488:	91 05       	cpc	r25, r1
 48a:	b9 f4       	brne	.+46     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 48c:	e1 14       	cp	r14, r1
 48e:	f1 04       	cpc	r15, r1
 490:	71 f0       	breq	.+28     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 492:	13 c0       	rjmp	.+38     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
            for (int i = 0; i < 4; i++) {
               display_key[i] = 0;
 494:	fc 01       	movw	r30, r24
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	a1 e0       	ldi	r26, 0x01	; 1
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	ac 0f       	add	r26, r28
 4a0:	bd 1f       	adc	r27, r29
 4a2:	ea 0f       	add	r30, r26
 4a4:	fb 1f       	adc	r31, r27
 4a6:	11 a2       	std	Z+33, r1	; 0x21
 4a8:	10 a2       	std	Z+32, r1	; 0x20
            idx = 2;
         else if (Keyinfo[key-1] == 103)
            idx = 3;
         
         else if (Keyinfo[key-1] == 200 && timer_state == 0){
            for (int i = 0; i < 4; i++) {
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	84 30       	cpi	r24, 0x04	; 4
 4b4:	91 05       	cpc	r25, r1
 4b6:	74 f3       	brlt	.-36     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 4b8:	17 c0       	rjmp	.+46     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
               display_key[i] = 0;
            }
       }
         else if (Keyinfo[key-1] == 201){
 4ba:	89 3c       	cpi	r24, 0xC9	; 201
 4bc:	91 05       	cpc	r25, r1
 4be:	a1 f4       	brne	.+40     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
          if(timer_state==0) timer_state = 1;
 4c0:	ef 28       	or	r14, r15
 4c2:	81 f4       	brne	.+32     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4c4:	ee 24       	eor	r14, r14
 4c6:	e3 94       	inc	r14
 4c8:	f1 2c       	mov	r15, r1
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
      if (key != 0xff)
      {
         if ((Keyinfo[key-1] >= 0)&&(Keyinfo[key-1] <=9))
			display_key[idx] = Keyinfo[key-1];
         else if (Keyinfo[key-1] == 100)
            idx = 0;
 4cc:	00 e0       	ldi	r16, 0x00	; 0
 4ce:	10 e0       	ldi	r17, 0x00	; 0
 4d0:	0b c0       	rjmp	.+22     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
         else if (Keyinfo[key-1] == 101)
            idx = 1;
 4d2:	01 e0       	ldi	r16, 0x01	; 1
 4d4:	10 e0       	ldi	r17, 0x00	; 0
 4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
         else if (Keyinfo[key-1] == 102)
            idx = 2;
 4d8:	02 e0       	ldi	r16, 0x02	; 2
 4da:	10 e0       	ldi	r17, 0x00	; 0
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
         else if (Keyinfo[key-1] == 103)
            idx = 3;
 4de:	03 e0       	ldi	r16, 0x03	; 3
 4e0:	10 e0       	ldi	r17, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
               display_key[i] = 0;
            }
       }
         else if (Keyinfo[key-1] == 201){
          if(timer_state==0) timer_state = 1;
          else timer_state = 0;
 4e4:	e1 2c       	mov	r14, r1
 4e6:	f1 2c       	mov	r15, r1
       }
      }
	  
     t = get_value(display_key,3);
 4e8:	63 e0       	ldi	r22, 0x03	; 3
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	ce 01       	movw	r24, r28
 4ee:	81 96       	adiw	r24, 0x21	; 33
 4f0:	ba de       	rcall	.-652    	; 0x266 <get_value>
 4f2:	6c 01       	movw	r12, r24
     TimeDisplay(idx,t);
 4f4:	ac 01       	movw	r20, r24
 4f6:	99 0f       	add	r25, r25
 4f8:	66 0b       	sbc	r22, r22
 4fa:	77 0b       	sbc	r23, r23
 4fc:	c8 01       	movw	r24, r16
 4fe:	08 df       	rcall	.-496    	; 0x310 <TimeDisplay>
     if(idx == 3)idx = 0;
 500:	03 30       	cpi	r16, 0x03	; 3
 502:	11 05       	cpc	r17, r1
 504:	19 f0       	breq	.+6      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     else idx++;
 506:	0f 5f       	subi	r16, 0xFF	; 255
 508:	1f 4f       	sbci	r17, 0xFF	; 255
 50a:	02 c0       	rjmp	.+4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
       }
      }
	  
     t = get_value(display_key,3);
     TimeDisplay(idx,t);
     if(idx == 3)idx = 0;
 50c:	00 e0       	ldi	r16, 0x00	; 0
 50e:	10 e0       	ldi	r17, 0x00	; 0
     else idx++;
     
     if(t <= 0){
 510:	1c 14       	cp	r1, r12
 512:	1d 04       	cpc	r1, r13
 514:	14 f0       	brlt	.+4      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
        timer_state = 0;
 516:	e1 2c       	mov	r14, r1
 518:	f1 2c       	mov	r15, r1
        t = 0;
     }
     
     if(timer_state == 1){
 51a:	b1 e0       	ldi	r27, 0x01	; 1
 51c:	eb 16       	cp	r14, r27
 51e:	f1 04       	cpc	r15, r1
 520:	09 f0       	breq	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 522:	88 cf       	rjmp	.-240    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 524:	89 e9       	ldi	r24, 0x99	; 153
 526:	99 e3       	ldi	r25, 0x39	; 57
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52e:	82 cf       	rjmp	.-252    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>

00000530 <__subsf3>:
 530:	50 58       	subi	r21, 0x80	; 128

00000532 <__addsf3>:
 532:	bb 27       	eor	r27, r27
 534:	aa 27       	eor	r26, r26
 536:	0e d0       	rcall	.+28     	; 0x554 <__addsf3x>
 538:	e5 c0       	rjmp	.+458    	; 0x704 <__fp_round>
 53a:	d6 d0       	rcall	.+428    	; 0x6e8 <__fp_pscA>
 53c:	30 f0       	brcs	.+12     	; 0x54a <__addsf3+0x18>
 53e:	db d0       	rcall	.+438    	; 0x6f6 <__fp_pscB>
 540:	20 f0       	brcs	.+8      	; 0x54a <__addsf3+0x18>
 542:	31 f4       	brne	.+12     	; 0x550 <__addsf3+0x1e>
 544:	9f 3f       	cpi	r25, 0xFF	; 255
 546:	11 f4       	brne	.+4      	; 0x54c <__addsf3+0x1a>
 548:	1e f4       	brtc	.+6      	; 0x550 <__addsf3+0x1e>
 54a:	cb c0       	rjmp	.+406    	; 0x6e2 <__fp_nan>
 54c:	0e f4       	brtc	.+2      	; 0x550 <__addsf3+0x1e>
 54e:	e0 95       	com	r30
 550:	e7 fb       	bst	r30, 7
 552:	c1 c0       	rjmp	.+386    	; 0x6d6 <__fp_inf>

00000554 <__addsf3x>:
 554:	e9 2f       	mov	r30, r25
 556:	e7 d0       	rcall	.+462    	; 0x726 <__fp_split3>
 558:	80 f3       	brcs	.-32     	; 0x53a <__addsf3+0x8>
 55a:	ba 17       	cp	r27, r26
 55c:	62 07       	cpc	r22, r18
 55e:	73 07       	cpc	r23, r19
 560:	84 07       	cpc	r24, r20
 562:	95 07       	cpc	r25, r21
 564:	18 f0       	brcs	.+6      	; 0x56c <__addsf3x+0x18>
 566:	71 f4       	brne	.+28     	; 0x584 <__addsf3x+0x30>
 568:	9e f5       	brtc	.+102    	; 0x5d0 <__addsf3x+0x7c>
 56a:	ff c0       	rjmp	.+510    	; 0x76a <__fp_zero>
 56c:	0e f4       	brtc	.+2      	; 0x570 <__addsf3x+0x1c>
 56e:	e0 95       	com	r30
 570:	0b 2e       	mov	r0, r27
 572:	ba 2f       	mov	r27, r26
 574:	a0 2d       	mov	r26, r0
 576:	0b 01       	movw	r0, r22
 578:	b9 01       	movw	r22, r18
 57a:	90 01       	movw	r18, r0
 57c:	0c 01       	movw	r0, r24
 57e:	ca 01       	movw	r24, r20
 580:	a0 01       	movw	r20, r0
 582:	11 24       	eor	r1, r1
 584:	ff 27       	eor	r31, r31
 586:	59 1b       	sub	r21, r25
 588:	99 f0       	breq	.+38     	; 0x5b0 <__addsf3x+0x5c>
 58a:	59 3f       	cpi	r21, 0xF9	; 249
 58c:	50 f4       	brcc	.+20     	; 0x5a2 <__addsf3x+0x4e>
 58e:	50 3e       	cpi	r21, 0xE0	; 224
 590:	68 f1       	brcs	.+90     	; 0x5ec <__addsf3x+0x98>
 592:	1a 16       	cp	r1, r26
 594:	f0 40       	sbci	r31, 0x00	; 0
 596:	a2 2f       	mov	r26, r18
 598:	23 2f       	mov	r18, r19
 59a:	34 2f       	mov	r19, r20
 59c:	44 27       	eor	r20, r20
 59e:	58 5f       	subi	r21, 0xF8	; 248
 5a0:	f3 cf       	rjmp	.-26     	; 0x588 <__addsf3x+0x34>
 5a2:	46 95       	lsr	r20
 5a4:	37 95       	ror	r19
 5a6:	27 95       	ror	r18
 5a8:	a7 95       	ror	r26
 5aa:	f0 40       	sbci	r31, 0x00	; 0
 5ac:	53 95       	inc	r21
 5ae:	c9 f7       	brne	.-14     	; 0x5a2 <__addsf3x+0x4e>
 5b0:	7e f4       	brtc	.+30     	; 0x5d0 <__addsf3x+0x7c>
 5b2:	1f 16       	cp	r1, r31
 5b4:	ba 0b       	sbc	r27, r26
 5b6:	62 0b       	sbc	r22, r18
 5b8:	73 0b       	sbc	r23, r19
 5ba:	84 0b       	sbc	r24, r20
 5bc:	ba f0       	brmi	.+46     	; 0x5ec <__addsf3x+0x98>
 5be:	91 50       	subi	r25, 0x01	; 1
 5c0:	a1 f0       	breq	.+40     	; 0x5ea <__addsf3x+0x96>
 5c2:	ff 0f       	add	r31, r31
 5c4:	bb 1f       	adc	r27, r27
 5c6:	66 1f       	adc	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	88 1f       	adc	r24, r24
 5cc:	c2 f7       	brpl	.-16     	; 0x5be <__addsf3x+0x6a>
 5ce:	0e c0       	rjmp	.+28     	; 0x5ec <__addsf3x+0x98>
 5d0:	ba 0f       	add	r27, r26
 5d2:	62 1f       	adc	r22, r18
 5d4:	73 1f       	adc	r23, r19
 5d6:	84 1f       	adc	r24, r20
 5d8:	48 f4       	brcc	.+18     	; 0x5ec <__addsf3x+0x98>
 5da:	87 95       	ror	r24
 5dc:	77 95       	ror	r23
 5de:	67 95       	ror	r22
 5e0:	b7 95       	ror	r27
 5e2:	f7 95       	ror	r31
 5e4:	9e 3f       	cpi	r25, 0xFE	; 254
 5e6:	08 f0       	brcs	.+2      	; 0x5ea <__addsf3x+0x96>
 5e8:	b3 cf       	rjmp	.-154    	; 0x550 <__addsf3+0x1e>
 5ea:	93 95       	inc	r25
 5ec:	88 0f       	add	r24, r24
 5ee:	08 f0       	brcs	.+2      	; 0x5f2 <__addsf3x+0x9e>
 5f0:	99 27       	eor	r25, r25
 5f2:	ee 0f       	add	r30, r30
 5f4:	97 95       	ror	r25
 5f6:	87 95       	ror	r24
 5f8:	08 95       	ret

000005fa <__fixsfsi>:
 5fa:	04 d0       	rcall	.+8      	; 0x604 <__fixunssfsi>
 5fc:	68 94       	set
 5fe:	b1 11       	cpse	r27, r1
 600:	b5 c0       	rjmp	.+362    	; 0x76c <__fp_szero>
 602:	08 95       	ret

00000604 <__fixunssfsi>:
 604:	98 d0       	rcall	.+304    	; 0x736 <__fp_splitA>
 606:	88 f0       	brcs	.+34     	; 0x62a <__fixunssfsi+0x26>
 608:	9f 57       	subi	r25, 0x7F	; 127
 60a:	90 f0       	brcs	.+36     	; 0x630 <__fixunssfsi+0x2c>
 60c:	b9 2f       	mov	r27, r25
 60e:	99 27       	eor	r25, r25
 610:	b7 51       	subi	r27, 0x17	; 23
 612:	a0 f0       	brcs	.+40     	; 0x63c <__fixunssfsi+0x38>
 614:	d1 f0       	breq	.+52     	; 0x64a <__fixunssfsi+0x46>
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	1a f0       	brmi	.+6      	; 0x626 <__fixunssfsi+0x22>
 620:	ba 95       	dec	r27
 622:	c9 f7       	brne	.-14     	; 0x616 <__fixunssfsi+0x12>
 624:	12 c0       	rjmp	.+36     	; 0x64a <__fixunssfsi+0x46>
 626:	b1 30       	cpi	r27, 0x01	; 1
 628:	81 f0       	breq	.+32     	; 0x64a <__fixunssfsi+0x46>
 62a:	9f d0       	rcall	.+318    	; 0x76a <__fp_zero>
 62c:	b1 e0       	ldi	r27, 0x01	; 1
 62e:	08 95       	ret
 630:	9c c0       	rjmp	.+312    	; 0x76a <__fp_zero>
 632:	67 2f       	mov	r22, r23
 634:	78 2f       	mov	r23, r24
 636:	88 27       	eor	r24, r24
 638:	b8 5f       	subi	r27, 0xF8	; 248
 63a:	39 f0       	breq	.+14     	; 0x64a <__fixunssfsi+0x46>
 63c:	b9 3f       	cpi	r27, 0xF9	; 249
 63e:	cc f3       	brlt	.-14     	; 0x632 <__fixunssfsi+0x2e>
 640:	86 95       	lsr	r24
 642:	77 95       	ror	r23
 644:	67 95       	ror	r22
 646:	b3 95       	inc	r27
 648:	d9 f7       	brne	.-10     	; 0x640 <__fixunssfsi+0x3c>
 64a:	3e f4       	brtc	.+14     	; 0x65a <__fixunssfsi+0x56>
 64c:	90 95       	com	r25
 64e:	80 95       	com	r24
 650:	70 95       	com	r23
 652:	61 95       	neg	r22
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	8f 4f       	sbci	r24, 0xFF	; 255
 658:	9f 4f       	sbci	r25, 0xFF	; 255
 65a:	08 95       	ret

0000065c <__floatunsisf>:
 65c:	e8 94       	clt
 65e:	09 c0       	rjmp	.+18     	; 0x672 <__floatsisf+0x12>

00000660 <__floatsisf>:
 660:	97 fb       	bst	r25, 7
 662:	3e f4       	brtc	.+14     	; 0x672 <__floatsisf+0x12>
 664:	90 95       	com	r25
 666:	80 95       	com	r24
 668:	70 95       	com	r23
 66a:	61 95       	neg	r22
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8f 4f       	sbci	r24, 0xFF	; 255
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	99 23       	and	r25, r25
 674:	a9 f0       	breq	.+42     	; 0x6a0 <__floatsisf+0x40>
 676:	f9 2f       	mov	r31, r25
 678:	96 e9       	ldi	r25, 0x96	; 150
 67a:	bb 27       	eor	r27, r27
 67c:	93 95       	inc	r25
 67e:	f6 95       	lsr	r31
 680:	87 95       	ror	r24
 682:	77 95       	ror	r23
 684:	67 95       	ror	r22
 686:	b7 95       	ror	r27
 688:	f1 11       	cpse	r31, r1
 68a:	f8 cf       	rjmp	.-16     	; 0x67c <__floatsisf+0x1c>
 68c:	fa f4       	brpl	.+62     	; 0x6cc <__floatsisf+0x6c>
 68e:	bb 0f       	add	r27, r27
 690:	11 f4       	brne	.+4      	; 0x696 <__floatsisf+0x36>
 692:	60 ff       	sbrs	r22, 0
 694:	1b c0       	rjmp	.+54     	; 0x6cc <__floatsisf+0x6c>
 696:	6f 5f       	subi	r22, 0xFF	; 255
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	16 c0       	rjmp	.+44     	; 0x6cc <__floatsisf+0x6c>
 6a0:	88 23       	and	r24, r24
 6a2:	11 f0       	breq	.+4      	; 0x6a8 <__floatsisf+0x48>
 6a4:	96 e9       	ldi	r25, 0x96	; 150
 6a6:	11 c0       	rjmp	.+34     	; 0x6ca <__floatsisf+0x6a>
 6a8:	77 23       	and	r23, r23
 6aa:	21 f0       	breq	.+8      	; 0x6b4 <__floatsisf+0x54>
 6ac:	9e e8       	ldi	r25, 0x8E	; 142
 6ae:	87 2f       	mov	r24, r23
 6b0:	76 2f       	mov	r23, r22
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <__floatsisf+0x5e>
 6b4:	66 23       	and	r22, r22
 6b6:	71 f0       	breq	.+28     	; 0x6d4 <__floatsisf+0x74>
 6b8:	96 e8       	ldi	r25, 0x86	; 134
 6ba:	86 2f       	mov	r24, r22
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	2a f0       	brmi	.+10     	; 0x6cc <__floatsisf+0x6c>
 6c2:	9a 95       	dec	r25
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	da f7       	brpl	.-10     	; 0x6c2 <__floatsisf+0x62>
 6cc:	88 0f       	add	r24, r24
 6ce:	96 95       	lsr	r25
 6d0:	87 95       	ror	r24
 6d2:	97 f9       	bld	r25, 7
 6d4:	08 95       	ret

000006d6 <__fp_inf>:
 6d6:	97 f9       	bld	r25, 7
 6d8:	9f 67       	ori	r25, 0x7F	; 127
 6da:	80 e8       	ldi	r24, 0x80	; 128
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	08 95       	ret

000006e2 <__fp_nan>:
 6e2:	9f ef       	ldi	r25, 0xFF	; 255
 6e4:	80 ec       	ldi	r24, 0xC0	; 192
 6e6:	08 95       	ret

000006e8 <__fp_pscA>:
 6e8:	00 24       	eor	r0, r0
 6ea:	0a 94       	dec	r0
 6ec:	16 16       	cp	r1, r22
 6ee:	17 06       	cpc	r1, r23
 6f0:	18 06       	cpc	r1, r24
 6f2:	09 06       	cpc	r0, r25
 6f4:	08 95       	ret

000006f6 <__fp_pscB>:
 6f6:	00 24       	eor	r0, r0
 6f8:	0a 94       	dec	r0
 6fa:	12 16       	cp	r1, r18
 6fc:	13 06       	cpc	r1, r19
 6fe:	14 06       	cpc	r1, r20
 700:	05 06       	cpc	r0, r21
 702:	08 95       	ret

00000704 <__fp_round>:
 704:	09 2e       	mov	r0, r25
 706:	03 94       	inc	r0
 708:	00 0c       	add	r0, r0
 70a:	11 f4       	brne	.+4      	; 0x710 <__fp_round+0xc>
 70c:	88 23       	and	r24, r24
 70e:	52 f0       	brmi	.+20     	; 0x724 <__fp_round+0x20>
 710:	bb 0f       	add	r27, r27
 712:	40 f4       	brcc	.+16     	; 0x724 <__fp_round+0x20>
 714:	bf 2b       	or	r27, r31
 716:	11 f4       	brne	.+4      	; 0x71c <__fp_round+0x18>
 718:	60 ff       	sbrs	r22, 0
 71a:	04 c0       	rjmp	.+8      	; 0x724 <__fp_round+0x20>
 71c:	6f 5f       	subi	r22, 0xFF	; 255
 71e:	7f 4f       	sbci	r23, 0xFF	; 255
 720:	8f 4f       	sbci	r24, 0xFF	; 255
 722:	9f 4f       	sbci	r25, 0xFF	; 255
 724:	08 95       	ret

00000726 <__fp_split3>:
 726:	57 fd       	sbrc	r21, 7
 728:	90 58       	subi	r25, 0x80	; 128
 72a:	44 0f       	add	r20, r20
 72c:	55 1f       	adc	r21, r21
 72e:	59 f0       	breq	.+22     	; 0x746 <__fp_splitA+0x10>
 730:	5f 3f       	cpi	r21, 0xFF	; 255
 732:	71 f0       	breq	.+28     	; 0x750 <__fp_splitA+0x1a>
 734:	47 95       	ror	r20

00000736 <__fp_splitA>:
 736:	88 0f       	add	r24, r24
 738:	97 fb       	bst	r25, 7
 73a:	99 1f       	adc	r25, r25
 73c:	61 f0       	breq	.+24     	; 0x756 <__fp_splitA+0x20>
 73e:	9f 3f       	cpi	r25, 0xFF	; 255
 740:	79 f0       	breq	.+30     	; 0x760 <__fp_splitA+0x2a>
 742:	87 95       	ror	r24
 744:	08 95       	ret
 746:	12 16       	cp	r1, r18
 748:	13 06       	cpc	r1, r19
 74a:	14 06       	cpc	r1, r20
 74c:	55 1f       	adc	r21, r21
 74e:	f2 cf       	rjmp	.-28     	; 0x734 <__fp_split3+0xe>
 750:	46 95       	lsr	r20
 752:	f1 df       	rcall	.-30     	; 0x736 <__fp_splitA>
 754:	08 c0       	rjmp	.+16     	; 0x766 <__fp_splitA+0x30>
 756:	16 16       	cp	r1, r22
 758:	17 06       	cpc	r1, r23
 75a:	18 06       	cpc	r1, r24
 75c:	99 1f       	adc	r25, r25
 75e:	f1 cf       	rjmp	.-30     	; 0x742 <__fp_splitA+0xc>
 760:	86 95       	lsr	r24
 762:	71 05       	cpc	r23, r1
 764:	61 05       	cpc	r22, r1
 766:	08 94       	sec
 768:	08 95       	ret

0000076a <__fp_zero>:
 76a:	e8 94       	clt

0000076c <__fp_szero>:
 76c:	bb 27       	eor	r27, r27
 76e:	66 27       	eor	r22, r22
 770:	77 27       	eor	r23, r23
 772:	cb 01       	movw	r24, r22
 774:	97 f9       	bld	r25, 7
 776:	08 95       	ret

00000778 <__mulsf3>:
 778:	0b d0       	rcall	.+22     	; 0x790 <__mulsf3x>
 77a:	c4 cf       	rjmp	.-120    	; 0x704 <__fp_round>
 77c:	b5 df       	rcall	.-150    	; 0x6e8 <__fp_pscA>
 77e:	28 f0       	brcs	.+10     	; 0x78a <__mulsf3+0x12>
 780:	ba df       	rcall	.-140    	; 0x6f6 <__fp_pscB>
 782:	18 f0       	brcs	.+6      	; 0x78a <__mulsf3+0x12>
 784:	95 23       	and	r25, r21
 786:	09 f0       	breq	.+2      	; 0x78a <__mulsf3+0x12>
 788:	a6 cf       	rjmp	.-180    	; 0x6d6 <__fp_inf>
 78a:	ab cf       	rjmp	.-170    	; 0x6e2 <__fp_nan>
 78c:	11 24       	eor	r1, r1
 78e:	ee cf       	rjmp	.-36     	; 0x76c <__fp_szero>

00000790 <__mulsf3x>:
 790:	ca df       	rcall	.-108    	; 0x726 <__fp_split3>
 792:	a0 f3       	brcs	.-24     	; 0x77c <__mulsf3+0x4>

00000794 <__mulsf3_pse>:
 794:	95 9f       	mul	r25, r21
 796:	d1 f3       	breq	.-12     	; 0x78c <__mulsf3+0x14>
 798:	95 0f       	add	r25, r21
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	55 1f       	adc	r21, r21
 79e:	62 9f       	mul	r22, r18
 7a0:	f0 01       	movw	r30, r0
 7a2:	72 9f       	mul	r23, r18
 7a4:	bb 27       	eor	r27, r27
 7a6:	f0 0d       	add	r31, r0
 7a8:	b1 1d       	adc	r27, r1
 7aa:	63 9f       	mul	r22, r19
 7ac:	aa 27       	eor	r26, r26
 7ae:	f0 0d       	add	r31, r0
 7b0:	b1 1d       	adc	r27, r1
 7b2:	aa 1f       	adc	r26, r26
 7b4:	64 9f       	mul	r22, r20
 7b6:	66 27       	eor	r22, r22
 7b8:	b0 0d       	add	r27, r0
 7ba:	a1 1d       	adc	r26, r1
 7bc:	66 1f       	adc	r22, r22
 7be:	82 9f       	mul	r24, r18
 7c0:	22 27       	eor	r18, r18
 7c2:	b0 0d       	add	r27, r0
 7c4:	a1 1d       	adc	r26, r1
 7c6:	62 1f       	adc	r22, r18
 7c8:	73 9f       	mul	r23, r19
 7ca:	b0 0d       	add	r27, r0
 7cc:	a1 1d       	adc	r26, r1
 7ce:	62 1f       	adc	r22, r18
 7d0:	83 9f       	mul	r24, r19
 7d2:	a0 0d       	add	r26, r0
 7d4:	61 1d       	adc	r22, r1
 7d6:	22 1f       	adc	r18, r18
 7d8:	74 9f       	mul	r23, r20
 7da:	33 27       	eor	r19, r19
 7dc:	a0 0d       	add	r26, r0
 7de:	61 1d       	adc	r22, r1
 7e0:	23 1f       	adc	r18, r19
 7e2:	84 9f       	mul	r24, r20
 7e4:	60 0d       	add	r22, r0
 7e6:	21 1d       	adc	r18, r1
 7e8:	82 2f       	mov	r24, r18
 7ea:	76 2f       	mov	r23, r22
 7ec:	6a 2f       	mov	r22, r26
 7ee:	11 24       	eor	r1, r1
 7f0:	9f 57       	subi	r25, 0x7F	; 127
 7f2:	50 40       	sbci	r21, 0x00	; 0
 7f4:	8a f0       	brmi	.+34     	; 0x818 <__mulsf3_pse+0x84>
 7f6:	e1 f0       	breq	.+56     	; 0x830 <__mulsf3_pse+0x9c>
 7f8:	88 23       	and	r24, r24
 7fa:	4a f0       	brmi	.+18     	; 0x80e <__mulsf3_pse+0x7a>
 7fc:	ee 0f       	add	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	bb 1f       	adc	r27, r27
 802:	66 1f       	adc	r22, r22
 804:	77 1f       	adc	r23, r23
 806:	88 1f       	adc	r24, r24
 808:	91 50       	subi	r25, 0x01	; 1
 80a:	50 40       	sbci	r21, 0x00	; 0
 80c:	a9 f7       	brne	.-22     	; 0x7f8 <__mulsf3_pse+0x64>
 80e:	9e 3f       	cpi	r25, 0xFE	; 254
 810:	51 05       	cpc	r21, r1
 812:	70 f0       	brcs	.+28     	; 0x830 <__mulsf3_pse+0x9c>
 814:	60 cf       	rjmp	.-320    	; 0x6d6 <__fp_inf>
 816:	aa cf       	rjmp	.-172    	; 0x76c <__fp_szero>
 818:	5f 3f       	cpi	r21, 0xFF	; 255
 81a:	ec f3       	brlt	.-6      	; 0x816 <__mulsf3_pse+0x82>
 81c:	98 3e       	cpi	r25, 0xE8	; 232
 81e:	dc f3       	brlt	.-10     	; 0x816 <__mulsf3_pse+0x82>
 820:	86 95       	lsr	r24
 822:	77 95       	ror	r23
 824:	67 95       	ror	r22
 826:	b7 95       	ror	r27
 828:	f7 95       	ror	r31
 82a:	e7 95       	ror	r30
 82c:	9f 5f       	subi	r25, 0xFF	; 255
 82e:	c1 f7       	brne	.-16     	; 0x820 <__mulsf3_pse+0x8c>
 830:	fe 2b       	or	r31, r30
 832:	88 0f       	add	r24, r24
 834:	91 1d       	adc	r25, r1
 836:	96 95       	lsr	r25
 838:	87 95       	ror	r24
 83a:	97 f9       	bld	r25, 7
 83c:	08 95       	ret

0000083e <pow>:
 83e:	fa 01       	movw	r30, r20
 840:	ee 0f       	add	r30, r30
 842:	ff 1f       	adc	r31, r31
 844:	30 96       	adiw	r30, 0x00	; 0
 846:	21 05       	cpc	r18, r1
 848:	31 05       	cpc	r19, r1
 84a:	99 f1       	breq	.+102    	; 0x8b2 <pow+0x74>
 84c:	61 15       	cp	r22, r1
 84e:	71 05       	cpc	r23, r1
 850:	61 f4       	brne	.+24     	; 0x86a <pow+0x2c>
 852:	80 38       	cpi	r24, 0x80	; 128
 854:	bf e3       	ldi	r27, 0x3F	; 63
 856:	9b 07       	cpc	r25, r27
 858:	49 f1       	breq	.+82     	; 0x8ac <pow+0x6e>
 85a:	68 94       	set
 85c:	90 38       	cpi	r25, 0x80	; 128
 85e:	81 05       	cpc	r24, r1
 860:	61 f0       	breq	.+24     	; 0x87a <pow+0x3c>
 862:	80 38       	cpi	r24, 0x80	; 128
 864:	bf ef       	ldi	r27, 0xFF	; 255
 866:	9b 07       	cpc	r25, r27
 868:	41 f0       	breq	.+16     	; 0x87a <pow+0x3c>
 86a:	99 23       	and	r25, r25
 86c:	42 f5       	brpl	.+80     	; 0x8be <pow+0x80>
 86e:	ff 3f       	cpi	r31, 0xFF	; 255
 870:	e1 05       	cpc	r30, r1
 872:	31 05       	cpc	r19, r1
 874:	21 05       	cpc	r18, r1
 876:	11 f1       	breq	.+68     	; 0x8bc <pow+0x7e>
 878:	e8 94       	clt
 87a:	08 94       	sec
 87c:	e7 95       	ror	r30
 87e:	d9 01       	movw	r26, r18
 880:	aa 23       	and	r26, r26
 882:	29 f4       	brne	.+10     	; 0x88e <pow+0x50>
 884:	ab 2f       	mov	r26, r27
 886:	be 2f       	mov	r27, r30
 888:	f8 5f       	subi	r31, 0xF8	; 248
 88a:	d0 f3       	brcs	.-12     	; 0x880 <pow+0x42>
 88c:	10 c0       	rjmp	.+32     	; 0x8ae <pow+0x70>
 88e:	ff 5f       	subi	r31, 0xFF	; 255
 890:	70 f4       	brcc	.+28     	; 0x8ae <pow+0x70>
 892:	a6 95       	lsr	r26
 894:	e0 f7       	brcc	.-8      	; 0x88e <pow+0x50>
 896:	f7 39       	cpi	r31, 0x97	; 151
 898:	50 f0       	brcs	.+20     	; 0x8ae <pow+0x70>
 89a:	19 f0       	breq	.+6      	; 0x8a2 <pow+0x64>
 89c:	ff 3a       	cpi	r31, 0xAF	; 175
 89e:	38 f4       	brcc	.+14     	; 0x8ae <pow+0x70>
 8a0:	9f 77       	andi	r25, 0x7F	; 127
 8a2:	9f 93       	push	r25
 8a4:	0c d0       	rcall	.+24     	; 0x8be <pow+0x80>
 8a6:	0f 90       	pop	r0
 8a8:	07 fc       	sbrc	r0, 7
 8aa:	90 58       	subi	r25, 0x80	; 128
 8ac:	08 95       	ret
 8ae:	3e f0       	brts	.+14     	; 0x8be <pow+0x80>
 8b0:	18 cf       	rjmp	.-464    	; 0x6e2 <__fp_nan>
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	70 e0       	ldi	r23, 0x00	; 0
 8b6:	80 e8       	ldi	r24, 0x80	; 128
 8b8:	9f e3       	ldi	r25, 0x3F	; 63
 8ba:	08 95       	ret
 8bc:	4f e7       	ldi	r20, 0x7F	; 127
 8be:	9f 77       	andi	r25, 0x7F	; 127
 8c0:	5f 93       	push	r21
 8c2:	4f 93       	push	r20
 8c4:	3f 93       	push	r19
 8c6:	2f 93       	push	r18
 8c8:	9e d0       	rcall	.+316    	; 0xa06 <log>
 8ca:	2f 91       	pop	r18
 8cc:	3f 91       	pop	r19
 8ce:	4f 91       	pop	r20
 8d0:	5f 91       	pop	r21
 8d2:	52 df       	rcall	.-348    	; 0x778 <__mulsf3>
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <exp>
 8d6:	19 f4       	brne	.+6      	; 0x8de <pow+0xa0>
 8d8:	0e f0       	brts	.+2      	; 0x8dc <pow+0x9e>
 8da:	fd ce       	rjmp	.-518    	; 0x6d6 <__fp_inf>
 8dc:	46 cf       	rjmp	.-372    	; 0x76a <__fp_zero>
 8de:	01 cf       	rjmp	.-510    	; 0x6e2 <__fp_nan>

000008e0 <exp>:
 8e0:	2a df       	rcall	.-428    	; 0x736 <__fp_splitA>
 8e2:	c8 f3       	brcs	.-14     	; 0x8d6 <pow+0x98>
 8e4:	96 38       	cpi	r25, 0x86	; 134
 8e6:	c0 f7       	brcc	.-16     	; 0x8d8 <pow+0x9a>
 8e8:	07 f8       	bld	r0, 7
 8ea:	0f 92       	push	r0
 8ec:	e8 94       	clt
 8ee:	2b e3       	ldi	r18, 0x3B	; 59
 8f0:	3a ea       	ldi	r19, 0xAA	; 170
 8f2:	48 eb       	ldi	r20, 0xB8	; 184
 8f4:	5f e7       	ldi	r21, 0x7F	; 127
 8f6:	4e df       	rcall	.-356    	; 0x794 <__mulsf3_pse>
 8f8:	0f 92       	push	r0
 8fa:	0f 92       	push	r0
 8fc:	0f 92       	push	r0
 8fe:	4d b7       	in	r20, 0x3d	; 61
 900:	5e b7       	in	r21, 0x3e	; 62
 902:	0f 92       	push	r0
 904:	c0 d0       	rcall	.+384    	; 0xa86 <modf>
 906:	ec e8       	ldi	r30, 0x8C	; 140
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	16 d0       	rcall	.+44     	; 0x938 <__fp_powser>
 90c:	4f 91       	pop	r20
 90e:	5f 91       	pop	r21
 910:	ef 91       	pop	r30
 912:	ff 91       	pop	r31
 914:	e5 95       	asr	r30
 916:	ee 1f       	adc	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	49 f0       	breq	.+18     	; 0x92e <exp+0x4e>
 91c:	fe 57       	subi	r31, 0x7E	; 126
 91e:	e0 68       	ori	r30, 0x80	; 128
 920:	44 27       	eor	r20, r20
 922:	ee 0f       	add	r30, r30
 924:	44 1f       	adc	r20, r20
 926:	fa 95       	dec	r31
 928:	e1 f7       	brne	.-8      	; 0x922 <exp+0x42>
 92a:	41 95       	neg	r20
 92c:	55 0b       	sbc	r21, r21
 92e:	32 d0       	rcall	.+100    	; 0x994 <ldexp>
 930:	0f 90       	pop	r0
 932:	07 fe       	sbrs	r0, 7
 934:	26 c0       	rjmp	.+76     	; 0x982 <inverse>
 936:	08 95       	ret

00000938 <__fp_powser>:
 938:	df 93       	push	r29
 93a:	cf 93       	push	r28
 93c:	1f 93       	push	r17
 93e:	0f 93       	push	r16
 940:	ff 92       	push	r15
 942:	ef 92       	push	r14
 944:	df 92       	push	r13
 946:	7b 01       	movw	r14, r22
 948:	8c 01       	movw	r16, r24
 94a:	68 94       	set
 94c:	05 c0       	rjmp	.+10     	; 0x958 <__fp_powser+0x20>
 94e:	da 2e       	mov	r13, r26
 950:	ef 01       	movw	r28, r30
 952:	1e df       	rcall	.-452    	; 0x790 <__mulsf3x>
 954:	fe 01       	movw	r30, r28
 956:	e8 94       	clt
 958:	a5 91       	lpm	r26, Z+
 95a:	25 91       	lpm	r18, Z+
 95c:	35 91       	lpm	r19, Z+
 95e:	45 91       	lpm	r20, Z+
 960:	55 91       	lpm	r21, Z+
 962:	ae f3       	brts	.-22     	; 0x94e <__fp_powser+0x16>
 964:	ef 01       	movw	r28, r30
 966:	f6 dd       	rcall	.-1044   	; 0x554 <__addsf3x>
 968:	fe 01       	movw	r30, r28
 96a:	97 01       	movw	r18, r14
 96c:	a8 01       	movw	r20, r16
 96e:	da 94       	dec	r13
 970:	79 f7       	brne	.-34     	; 0x950 <__fp_powser+0x18>
 972:	df 90       	pop	r13
 974:	ef 90       	pop	r14
 976:	ff 90       	pop	r15
 978:	0f 91       	pop	r16
 97a:	1f 91       	pop	r17
 97c:	cf 91       	pop	r28
 97e:	df 91       	pop	r29
 980:	08 95       	ret

00000982 <inverse>:
 982:	9b 01       	movw	r18, r22
 984:	ac 01       	movw	r20, r24
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	70 e0       	ldi	r23, 0x00	; 0
 98a:	80 e8       	ldi	r24, 0x80	; 128
 98c:	9f e3       	ldi	r25, 0x3F	; 63
 98e:	ae c0       	rjmp	.+348    	; 0xaec <__divsf3>
 990:	a2 ce       	rjmp	.-700    	; 0x6d6 <__fp_inf>
 992:	14 c1       	rjmp	.+552    	; 0xbbc <__fp_mpack>

00000994 <ldexp>:
 994:	d0 de       	rcall	.-608    	; 0x736 <__fp_splitA>
 996:	e8 f3       	brcs	.-6      	; 0x992 <inverse+0x10>
 998:	99 23       	and	r25, r25
 99a:	d9 f3       	breq	.-10     	; 0x992 <inverse+0x10>
 99c:	94 0f       	add	r25, r20
 99e:	51 1d       	adc	r21, r1
 9a0:	bb f3       	brvs	.-18     	; 0x990 <inverse+0xe>
 9a2:	91 50       	subi	r25, 0x01	; 1
 9a4:	50 40       	sbci	r21, 0x00	; 0
 9a6:	94 f0       	brlt	.+36     	; 0x9cc <ldexp+0x38>
 9a8:	59 f0       	breq	.+22     	; 0x9c0 <ldexp+0x2c>
 9aa:	88 23       	and	r24, r24
 9ac:	32 f0       	brmi	.+12     	; 0x9ba <ldexp+0x26>
 9ae:	66 0f       	add	r22, r22
 9b0:	77 1f       	adc	r23, r23
 9b2:	88 1f       	adc	r24, r24
 9b4:	91 50       	subi	r25, 0x01	; 1
 9b6:	50 40       	sbci	r21, 0x00	; 0
 9b8:	c1 f7       	brne	.-16     	; 0x9aa <ldexp+0x16>
 9ba:	9e 3f       	cpi	r25, 0xFE	; 254
 9bc:	51 05       	cpc	r21, r1
 9be:	44 f7       	brge	.-48     	; 0x990 <inverse+0xe>
 9c0:	88 0f       	add	r24, r24
 9c2:	91 1d       	adc	r25, r1
 9c4:	96 95       	lsr	r25
 9c6:	87 95       	ror	r24
 9c8:	97 f9       	bld	r25, 7
 9ca:	08 95       	ret
 9cc:	5f 3f       	cpi	r21, 0xFF	; 255
 9ce:	ac f0       	brlt	.+42     	; 0x9fa <ldexp+0x66>
 9d0:	98 3e       	cpi	r25, 0xE8	; 232
 9d2:	9c f0       	brlt	.+38     	; 0x9fa <ldexp+0x66>
 9d4:	bb 27       	eor	r27, r27
 9d6:	86 95       	lsr	r24
 9d8:	77 95       	ror	r23
 9da:	67 95       	ror	r22
 9dc:	b7 95       	ror	r27
 9de:	08 f4       	brcc	.+2      	; 0x9e2 <ldexp+0x4e>
 9e0:	b1 60       	ori	r27, 0x01	; 1
 9e2:	93 95       	inc	r25
 9e4:	c1 f7       	brne	.-16     	; 0x9d6 <ldexp+0x42>
 9e6:	bb 0f       	add	r27, r27
 9e8:	58 f7       	brcc	.-42     	; 0x9c0 <ldexp+0x2c>
 9ea:	11 f4       	brne	.+4      	; 0x9f0 <ldexp+0x5c>
 9ec:	60 ff       	sbrs	r22, 0
 9ee:	e8 cf       	rjmp	.-48     	; 0x9c0 <ldexp+0x2c>
 9f0:	6f 5f       	subi	r22, 0xFF	; 255
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	e3 cf       	rjmp	.-58     	; 0x9c0 <ldexp+0x2c>
 9fa:	b8 ce       	rjmp	.-656    	; 0x76c <__fp_szero>
 9fc:	0e f0       	brts	.+2      	; 0xa00 <ldexp+0x6c>
 9fe:	de c0       	rjmp	.+444    	; 0xbbc <__fp_mpack>
 a00:	70 ce       	rjmp	.-800    	; 0x6e2 <__fp_nan>
 a02:	68 94       	set
 a04:	68 ce       	rjmp	.-816    	; 0x6d6 <__fp_inf>

00000a06 <log>:
 a06:	97 de       	rcall	.-722    	; 0x736 <__fp_splitA>
 a08:	c8 f3       	brcs	.-14     	; 0x9fc <ldexp+0x68>
 a0a:	99 23       	and	r25, r25
 a0c:	d1 f3       	breq	.-12     	; 0xa02 <ldexp+0x6e>
 a0e:	c6 f3       	brts	.-16     	; 0xa00 <ldexp+0x6c>
 a10:	df 93       	push	r29
 a12:	cf 93       	push	r28
 a14:	1f 93       	push	r17
 a16:	0f 93       	push	r16
 a18:	ff 92       	push	r15
 a1a:	c9 2f       	mov	r28, r25
 a1c:	dd 27       	eor	r29, r29
 a1e:	88 23       	and	r24, r24
 a20:	2a f0       	brmi	.+10     	; 0xa2c <log+0x26>
 a22:	21 97       	sbiw	r28, 0x01	; 1
 a24:	66 0f       	add	r22, r22
 a26:	77 1f       	adc	r23, r23
 a28:	88 1f       	adc	r24, r24
 a2a:	da f7       	brpl	.-10     	; 0xa22 <log+0x1c>
 a2c:	20 e0       	ldi	r18, 0x00	; 0
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	40 e8       	ldi	r20, 0x80	; 128
 a32:	5f eb       	ldi	r21, 0xBF	; 191
 a34:	9f e3       	ldi	r25, 0x3F	; 63
 a36:	88 39       	cpi	r24, 0x98	; 152
 a38:	20 f0       	brcs	.+8      	; 0xa42 <log+0x3c>
 a3a:	80 3e       	cpi	r24, 0xE0	; 224
 a3c:	30 f0       	brcs	.+12     	; 0xa4a <log+0x44>
 a3e:	21 96       	adiw	r28, 0x01	; 1
 a40:	8f 77       	andi	r24, 0x7F	; 127
 a42:	77 dd       	rcall	.-1298   	; 0x532 <__addsf3>
 a44:	e4 eb       	ldi	r30, 0xB4	; 180
 a46:	f0 e0       	ldi	r31, 0x00	; 0
 a48:	03 c0       	rjmp	.+6      	; 0xa50 <log+0x4a>
 a4a:	73 dd       	rcall	.-1306   	; 0x532 <__addsf3>
 a4c:	e1 ee       	ldi	r30, 0xE1	; 225
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	73 df       	rcall	.-282    	; 0x938 <__fp_powser>
 a52:	8b 01       	movw	r16, r22
 a54:	be 01       	movw	r22, r28
 a56:	ec 01       	movw	r28, r24
 a58:	fb 2e       	mov	r15, r27
 a5a:	6f 57       	subi	r22, 0x7F	; 127
 a5c:	71 09       	sbc	r23, r1
 a5e:	75 95       	asr	r23
 a60:	77 1f       	adc	r23, r23
 a62:	88 0b       	sbc	r24, r24
 a64:	99 0b       	sbc	r25, r25
 a66:	fc dd       	rcall	.-1032   	; 0x660 <__floatsisf>
 a68:	28 e1       	ldi	r18, 0x18	; 24
 a6a:	32 e7       	ldi	r19, 0x72	; 114
 a6c:	41 e3       	ldi	r20, 0x31	; 49
 a6e:	5f e3       	ldi	r21, 0x3F	; 63
 a70:	8f de       	rcall	.-738    	; 0x790 <__mulsf3x>
 a72:	af 2d       	mov	r26, r15
 a74:	98 01       	movw	r18, r16
 a76:	ae 01       	movw	r20, r28
 a78:	ff 90       	pop	r15
 a7a:	0f 91       	pop	r16
 a7c:	1f 91       	pop	r17
 a7e:	cf 91       	pop	r28
 a80:	df 91       	pop	r29
 a82:	68 dd       	rcall	.-1328   	; 0x554 <__addsf3x>
 a84:	3f ce       	rjmp	.-898    	; 0x704 <__fp_round>

00000a86 <modf>:
 a86:	fa 01       	movw	r30, r20
 a88:	dc 01       	movw	r26, r24
 a8a:	aa 0f       	add	r26, r26
 a8c:	bb 1f       	adc	r27, r27
 a8e:	9b 01       	movw	r18, r22
 a90:	ac 01       	movw	r20, r24
 a92:	bf 57       	subi	r27, 0x7F	; 127
 a94:	28 f4       	brcc	.+10     	; 0xaa0 <modf+0x1a>
 a96:	22 27       	eor	r18, r18
 a98:	33 27       	eor	r19, r19
 a9a:	44 27       	eor	r20, r20
 a9c:	50 78       	andi	r21, 0x80	; 128
 a9e:	1f c0       	rjmp	.+62     	; 0xade <modf+0x58>
 aa0:	b7 51       	subi	r27, 0x17	; 23
 aa2:	88 f4       	brcc	.+34     	; 0xac6 <modf+0x40>
 aa4:	ab 2f       	mov	r26, r27
 aa6:	00 24       	eor	r0, r0
 aa8:	46 95       	lsr	r20
 aaa:	37 95       	ror	r19
 aac:	27 95       	ror	r18
 aae:	01 1c       	adc	r0, r1
 ab0:	a3 95       	inc	r26
 ab2:	d2 f3       	brmi	.-12     	; 0xaa8 <modf+0x22>
 ab4:	00 20       	and	r0, r0
 ab6:	69 f0       	breq	.+26     	; 0xad2 <modf+0x4c>
 ab8:	22 0f       	add	r18, r18
 aba:	33 1f       	adc	r19, r19
 abc:	44 1f       	adc	r20, r20
 abe:	b3 95       	inc	r27
 ac0:	da f3       	brmi	.-10     	; 0xab8 <modf+0x32>
 ac2:	0d d0       	rcall	.+26     	; 0xade <modf+0x58>
 ac4:	35 cd       	rjmp	.-1430   	; 0x530 <__subsf3>
 ac6:	61 30       	cpi	r22, 0x01	; 1
 ac8:	71 05       	cpc	r23, r1
 aca:	a0 e8       	ldi	r26, 0x80	; 128
 acc:	8a 07       	cpc	r24, r26
 ace:	b9 46       	sbci	r27, 0x69	; 105
 ad0:	30 f4       	brcc	.+12     	; 0xade <modf+0x58>
 ad2:	9b 01       	movw	r18, r22
 ad4:	ac 01       	movw	r20, r24
 ad6:	66 27       	eor	r22, r22
 ad8:	77 27       	eor	r23, r23
 ada:	88 27       	eor	r24, r24
 adc:	90 78       	andi	r25, 0x80	; 128
 ade:	30 96       	adiw	r30, 0x00	; 0
 ae0:	21 f0       	breq	.+8      	; 0xaea <modf+0x64>
 ae2:	20 83       	st	Z, r18
 ae4:	31 83       	std	Z+1, r19	; 0x01
 ae6:	42 83       	std	Z+2, r20	; 0x02
 ae8:	53 83       	std	Z+3, r21	; 0x03
 aea:	08 95       	ret

00000aec <__divsf3>:
 aec:	0c d0       	rcall	.+24     	; 0xb06 <__divsf3x>
 aee:	0a ce       	rjmp	.-1004   	; 0x704 <__fp_round>
 af0:	02 de       	rcall	.-1020   	; 0x6f6 <__fp_pscB>
 af2:	40 f0       	brcs	.+16     	; 0xb04 <__divsf3+0x18>
 af4:	f9 dd       	rcall	.-1038   	; 0x6e8 <__fp_pscA>
 af6:	30 f0       	brcs	.+12     	; 0xb04 <__divsf3+0x18>
 af8:	21 f4       	brne	.+8      	; 0xb02 <__divsf3+0x16>
 afa:	5f 3f       	cpi	r21, 0xFF	; 255
 afc:	19 f0       	breq	.+6      	; 0xb04 <__divsf3+0x18>
 afe:	eb cd       	rjmp	.-1066   	; 0x6d6 <__fp_inf>
 b00:	51 11       	cpse	r21, r1
 b02:	34 ce       	rjmp	.-920    	; 0x76c <__fp_szero>
 b04:	ee cd       	rjmp	.-1060   	; 0x6e2 <__fp_nan>

00000b06 <__divsf3x>:
 b06:	0f de       	rcall	.-994    	; 0x726 <__fp_split3>
 b08:	98 f3       	brcs	.-26     	; 0xaf0 <__divsf3+0x4>

00000b0a <__divsf3_pse>:
 b0a:	99 23       	and	r25, r25
 b0c:	c9 f3       	breq	.-14     	; 0xb00 <__divsf3+0x14>
 b0e:	55 23       	and	r21, r21
 b10:	b1 f3       	breq	.-20     	; 0xafe <__divsf3+0x12>
 b12:	95 1b       	sub	r25, r21
 b14:	55 0b       	sbc	r21, r21
 b16:	bb 27       	eor	r27, r27
 b18:	aa 27       	eor	r26, r26
 b1a:	62 17       	cp	r22, r18
 b1c:	73 07       	cpc	r23, r19
 b1e:	84 07       	cpc	r24, r20
 b20:	38 f0       	brcs	.+14     	; 0xb30 <__divsf3_pse+0x26>
 b22:	9f 5f       	subi	r25, 0xFF	; 255
 b24:	5f 4f       	sbci	r21, 0xFF	; 255
 b26:	22 0f       	add	r18, r18
 b28:	33 1f       	adc	r19, r19
 b2a:	44 1f       	adc	r20, r20
 b2c:	aa 1f       	adc	r26, r26
 b2e:	a9 f3       	breq	.-22     	; 0xb1a <__divsf3_pse+0x10>
 b30:	33 d0       	rcall	.+102    	; 0xb98 <__divsf3_pse+0x8e>
 b32:	0e 2e       	mov	r0, r30
 b34:	3a f0       	brmi	.+14     	; 0xb44 <__divsf3_pse+0x3a>
 b36:	e0 e8       	ldi	r30, 0x80	; 128
 b38:	30 d0       	rcall	.+96     	; 0xb9a <__divsf3_pse+0x90>
 b3a:	91 50       	subi	r25, 0x01	; 1
 b3c:	50 40       	sbci	r21, 0x00	; 0
 b3e:	e6 95       	lsr	r30
 b40:	00 1c       	adc	r0, r0
 b42:	ca f7       	brpl	.-14     	; 0xb36 <__divsf3_pse+0x2c>
 b44:	29 d0       	rcall	.+82     	; 0xb98 <__divsf3_pse+0x8e>
 b46:	fe 2f       	mov	r31, r30
 b48:	27 d0       	rcall	.+78     	; 0xb98 <__divsf3_pse+0x8e>
 b4a:	66 0f       	add	r22, r22
 b4c:	77 1f       	adc	r23, r23
 b4e:	88 1f       	adc	r24, r24
 b50:	bb 1f       	adc	r27, r27
 b52:	26 17       	cp	r18, r22
 b54:	37 07       	cpc	r19, r23
 b56:	48 07       	cpc	r20, r24
 b58:	ab 07       	cpc	r26, r27
 b5a:	b0 e8       	ldi	r27, 0x80	; 128
 b5c:	09 f0       	breq	.+2      	; 0xb60 <__divsf3_pse+0x56>
 b5e:	bb 0b       	sbc	r27, r27
 b60:	80 2d       	mov	r24, r0
 b62:	bf 01       	movw	r22, r30
 b64:	ff 27       	eor	r31, r31
 b66:	93 58       	subi	r25, 0x83	; 131
 b68:	5f 4f       	sbci	r21, 0xFF	; 255
 b6a:	2a f0       	brmi	.+10     	; 0xb76 <__divsf3_pse+0x6c>
 b6c:	9e 3f       	cpi	r25, 0xFE	; 254
 b6e:	51 05       	cpc	r21, r1
 b70:	68 f0       	brcs	.+26     	; 0xb8c <__divsf3_pse+0x82>
 b72:	b1 cd       	rjmp	.-1182   	; 0x6d6 <__fp_inf>
 b74:	fb cd       	rjmp	.-1034   	; 0x76c <__fp_szero>
 b76:	5f 3f       	cpi	r21, 0xFF	; 255
 b78:	ec f3       	brlt	.-6      	; 0xb74 <__divsf3_pse+0x6a>
 b7a:	98 3e       	cpi	r25, 0xE8	; 232
 b7c:	dc f3       	brlt	.-10     	; 0xb74 <__divsf3_pse+0x6a>
 b7e:	86 95       	lsr	r24
 b80:	77 95       	ror	r23
 b82:	67 95       	ror	r22
 b84:	b7 95       	ror	r27
 b86:	f7 95       	ror	r31
 b88:	9f 5f       	subi	r25, 0xFF	; 255
 b8a:	c9 f7       	brne	.-14     	; 0xb7e <__divsf3_pse+0x74>
 b8c:	88 0f       	add	r24, r24
 b8e:	91 1d       	adc	r25, r1
 b90:	96 95       	lsr	r25
 b92:	87 95       	ror	r24
 b94:	97 f9       	bld	r25, 7
 b96:	08 95       	ret
 b98:	e1 e0       	ldi	r30, 0x01	; 1
 b9a:	66 0f       	add	r22, r22
 b9c:	77 1f       	adc	r23, r23
 b9e:	88 1f       	adc	r24, r24
 ba0:	bb 1f       	adc	r27, r27
 ba2:	62 17       	cp	r22, r18
 ba4:	73 07       	cpc	r23, r19
 ba6:	84 07       	cpc	r24, r20
 ba8:	ba 07       	cpc	r27, r26
 baa:	20 f0       	brcs	.+8      	; 0xbb4 <__divsf3_pse+0xaa>
 bac:	62 1b       	sub	r22, r18
 bae:	73 0b       	sbc	r23, r19
 bb0:	84 0b       	sbc	r24, r20
 bb2:	ba 0b       	sbc	r27, r26
 bb4:	ee 1f       	adc	r30, r30
 bb6:	88 f7       	brcc	.-30     	; 0xb9a <__divsf3_pse+0x90>
 bb8:	e0 95       	com	r30
 bba:	08 95       	ret

00000bbc <__fp_mpack>:
 bbc:	9f 3f       	cpi	r25, 0xFF	; 255
 bbe:	31 f0       	breq	.+12     	; 0xbcc <__fp_mpack_finite+0xc>

00000bc0 <__fp_mpack_finite>:
 bc0:	91 50       	subi	r25, 0x01	; 1
 bc2:	20 f4       	brcc	.+8      	; 0xbcc <__fp_mpack_finite+0xc>
 bc4:	87 95       	ror	r24
 bc6:	77 95       	ror	r23
 bc8:	67 95       	ror	r22
 bca:	b7 95       	ror	r27
 bcc:	88 0f       	add	r24, r24
 bce:	91 1d       	adc	r25, r1
 bd0:	96 95       	lsr	r25
 bd2:	87 95       	ror	r24
 bd4:	97 f9       	bld	r25, 7
 bd6:	08 95       	ret

00000bd8 <__udivmodsi4>:
 bd8:	a1 e2       	ldi	r26, 0x21	; 33
 bda:	1a 2e       	mov	r1, r26
 bdc:	aa 1b       	sub	r26, r26
 bde:	bb 1b       	sub	r27, r27
 be0:	fd 01       	movw	r30, r26
 be2:	0d c0       	rjmp	.+26     	; 0xbfe <__udivmodsi4_ep>

00000be4 <__udivmodsi4_loop>:
 be4:	aa 1f       	adc	r26, r26
 be6:	bb 1f       	adc	r27, r27
 be8:	ee 1f       	adc	r30, r30
 bea:	ff 1f       	adc	r31, r31
 bec:	a2 17       	cp	r26, r18
 bee:	b3 07       	cpc	r27, r19
 bf0:	e4 07       	cpc	r30, r20
 bf2:	f5 07       	cpc	r31, r21
 bf4:	20 f0       	brcs	.+8      	; 0xbfe <__udivmodsi4_ep>
 bf6:	a2 1b       	sub	r26, r18
 bf8:	b3 0b       	sbc	r27, r19
 bfa:	e4 0b       	sbc	r30, r20
 bfc:	f5 0b       	sbc	r31, r21

00000bfe <__udivmodsi4_ep>:
 bfe:	66 1f       	adc	r22, r22
 c00:	77 1f       	adc	r23, r23
 c02:	88 1f       	adc	r24, r24
 c04:	99 1f       	adc	r25, r25
 c06:	1a 94       	dec	r1
 c08:	69 f7       	brne	.-38     	; 0xbe4 <__udivmodsi4_loop>
 c0a:	60 95       	com	r22
 c0c:	70 95       	com	r23
 c0e:	80 95       	com	r24
 c10:	90 95       	com	r25
 c12:	9b 01       	movw	r18, r22
 c14:	ac 01       	movw	r20, r24
 c16:	bd 01       	movw	r22, r26
 c18:	cf 01       	movw	r24, r30
 c1a:	08 95       	ret

00000c1c <_exit>:
 c1c:	f8 94       	cli

00000c1e <__stop_program>:
 c1e:	ff cf       	rjmp	.-2      	; 0xc1e <__stop_program>
