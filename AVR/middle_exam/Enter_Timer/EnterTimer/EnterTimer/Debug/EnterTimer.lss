
EnterTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000294  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b25  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000938  00000000  00000000  00000f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000443  00000000  00000000  0000183d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  00001c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047b  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c6  00000000  00000000  00002157  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000241d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	60 d0       	rcall	.+192    	; 0x174 <main>
  b4:	ed c0       	rjmp	.+474    	; 0x290 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <row_scan>:

char row_scan(char row) // row  0,1,2,3
{
	char col = -1; //0xff
	char pin_info;
	if (row == 0)
  b8:	81 11       	cpse	r24, r1
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <row_scan+0xa>
	PORTC = 0x0e; //1110
  bc:	8e e0       	ldi	r24, 0x0E	; 14
  be:	85 bb       	out	0x15, r24	; 21
  c0:	0e c0       	rjmp	.+28     	; 0xde <row_scan+0x26>
	else if (row == 1)
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	19 f4       	brne	.+6      	; 0xcc <row_scan+0x14>
	PORTC = 0x0d; //1101
  c6:	8d e0       	ldi	r24, 0x0D	; 13
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	09 c0       	rjmp	.+18     	; 0xde <row_scan+0x26>
	else if (row == 2)
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	19 f4       	brne	.+6      	; 0xd6 <row_scan+0x1e>
	PORTC = 0x0b; //1011
  d0:	8b e0       	ldi	r24, 0x0B	; 11
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	04 c0       	rjmp	.+8      	; 0xde <row_scan+0x26>
	else if (row == 3)
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	11 f4       	brne	.+4      	; 0xde <row_scan+0x26>
	PORTC = 0x07; //0111
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	81 e3       	ldi	r24, 0x31	; 49
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <row_scan+0x28>
  e4:	00 00       	nop

	_delay_us(10);

	pin_info = PINC >> 4;
  e6:	83 b3       	in	r24, 0x13	; 19
  e8:	82 95       	swap	r24
  ea:	8f 70       	andi	r24, 0x0F	; 15

	if (pin_info == 0x1)
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	41 f0       	breq	.+16     	; 0x100 <row_scan+0x48>
	col = 0; // 0001
	else if (pin_info == 0x2)
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	41 f0       	breq	.+16     	; 0x104 <row_scan+0x4c>
	col = 1; // 0010
	else if (pin_info == 0x4)
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	41 f0       	breq	.+16     	; 0x108 <row_scan+0x50>
	col = 2; // 0100
	else if (pin_info == 0x8)
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	41 f0       	breq	.+16     	; 0x10c <row_scan+0x54>
	}
}

char row_scan(char row) // row  0,1,2,3
{
	char col = -1; //0xff
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	08 95       	ret
	_delay_us(10);

	pin_info = PINC >> 4;

	if (pin_info == 0x1)
	col = 0; // 0001
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret
	else if (pin_info == 0x2)
	col = 1; // 0010
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret
	else if (pin_info == 0x4)
	col = 2; // 0100
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	08 95       	ret
	else if (pin_info == 0x8)
	col = 3; // 1000
 10c:	83 e0       	ldi	r24, 0x03	; 3

	return (col); //0,1,2,3
}
 10e:	08 95       	ret

00000110 <key_scan>:

char key_scan()
{
 110:	cf 93       	push	r28
	char col;
	char row;
	char key = 0xff;

	for (row = 0; row < 4; row++)
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	09 c0       	rjmp	.+18     	; 0x128 <key_scan+0x18>
	{
		col = row_scan(row);
 116:	8c 2f       	mov	r24, r28
 118:	cf df       	rcall	.-98     	; 0xb8 <row_scan>
		if (col != 0xff)
 11a:	8f 3f       	cpi	r24, 0xFF	; 255
 11c:	21 f0       	breq	.+8      	; 0x126 <key_scan+0x16>
		{
			key = 4 * row + col;
 11e:	cc 0f       	add	r28, r28
 120:	cc 0f       	add	r28, r28
 122:	8c 0f       	add	r24, r28
			return key; // key 변수 할당 없이 바로 반환
 124:	04 c0       	rjmp	.+8      	; 0x12e <key_scan+0x1e>
{
	char col;
	char row;
	char key = 0xff;

	for (row = 0; row < 4; row++)
 126:	cf 5f       	subi	r28, 0xFF	; 255
 128:	c4 30       	cpi	r28, 0x04	; 4
 12a:	a8 f3       	brcs	.-22     	; 0x116 <key_scan+0x6>
			return key; // key 변수 할당 없이 바로 반환
			break;
		}
	}

	return (0xff);
 12c:	8f ef       	ldi	r24, 0xFF	; 255
}
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <FND_Display>:

void FND_Display(int idx, int number, int dot)
{
	if (idx == 0)
 132:	00 97       	sbiw	r24, 0x00	; 0
 134:	19 f4       	brne	.+6      	; 0x13c <FND_Display+0xa>
	PORTE = 0x10;
 136:	80 e1       	ldi	r24, 0x10	; 16
 138:	83 b9       	out	0x03, r24	; 3
 13a:	10 c0       	rjmp	.+32     	; 0x15c <FND_Display+0x2a>
	else if (idx == 1)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	91 05       	cpc	r25, r1
 140:	19 f4       	brne	.+6      	; 0x148 <FND_Display+0x16>
	PORTE = 0x20;
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	83 b9       	out	0x03, r24	; 3
 146:	0a c0       	rjmp	.+20     	; 0x15c <FND_Display+0x2a>
	else if (idx == 2)
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	91 05       	cpc	r25, r1
 14c:	19 f4       	brne	.+6      	; 0x154 <FND_Display+0x22>
	PORTE = 0x40;
 14e:	80 e4       	ldi	r24, 0x40	; 64
 150:	83 b9       	out	0x03, r24	; 3
 152:	04 c0       	rjmp	.+8      	; 0x15c <FND_Display+0x2a>
	else if (idx == 3)
 154:	03 97       	sbiw	r24, 0x03	; 3
 156:	11 f4       	brne	.+4      	; 0x15c <FND_Display+0x2a>
	PORTE = 0x80;
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	83 b9       	out	0x03, r24	; 3

	PORTB = Port_char[number];
 15c:	fb 01       	movw	r30, r22
 15e:	e0 5e       	subi	r30, 0xE0	; 224
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	80 81       	ld	r24, Z
 164:	88 bb       	out	0x18, r24	; 24

	if (dot == 1)
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	51 05       	cpc	r21, r1
 16a:	19 f4       	brne	.+6      	; 0x172 <FND_Display+0x40>
	PORTB = PORTB & 0x7f;
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	8f 77       	andi	r24, 0x7F	; 127
 170:	88 bb       	out	0x18, r24	; 24
 172:	08 95       	ret

00000174 <main>:
char key_scan(void);
void FND_Display(int idx, int number, int dot);

int main(void)
{
	DDRB = 0xff;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x0f;
 178:	9f e0       	ldi	r25, 0x0F	; 15
 17a:	94 bb       	out	0x14, r25	; 20
	DDRD = 0;
 17c:	11 ba       	out	0x11, r1	; 17
	DDRE = 0xff;
 17e:	82 b9       	out	0x02, r24	; 2

	PORTE = 0x80;
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	83 b9       	out	0x03, r24	; 3

	int minute_timer = 0; // 분 타이머 변수 초기화
	int second_timer = 0; // 초 타이머 변수 초기화
	int dot = 0;          // dot 변수 초기화

	FND_Display(0, 0, 0);
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	d0 df       	rcall	.-96     	; 0x132 <FND_Display>
	DDRD = 0;
	DDRE = 0xff;

	PORTE = 0x80;

	int minute_timer = 0; // 분 타이머 변수 초기화
 192:	c0 e0       	ldi	r28, 0x00	; 0
	FND_Display(0, 0, 0);

	/* Replace with your application code */
	while (1)
	{
		char key = key_scan();
 194:	d0 e0       	ldi	r29, 0x00	; 0
 196:	bc df       	rcall	.-136    	; 0x110 <key_scan>
		int key_value = key_info[key];
 198:	e8 2f       	mov	r30, r24
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	e0 50       	subi	r30, 0x00	; 0
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	20 81       	ld	r18, Z
 1a6:	31 81       	ldd	r19, Z+1	; 0x01
		if (key != 0xff)
 1a8:	8f 3f       	cpi	r24, 0xFF	; 255
 1aa:	a9 f3       	breq	.-22     	; 0x196 <main+0x22>
		{
			if ((key_value >= 0) && (key_value <= 9))
 1ac:	2a 30       	cpi	r18, 0x0A	; 10
 1ae:	31 05       	cpc	r19, r1
 1b0:	70 f4       	brcc	.+28     	; 0x1ce <main+0x5a>
			{
				minute_timer = minute_timer * 10 + key_value;
 1b2:	ce 01       	movw	r24, r28
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	cc 0f       	add	r28, r28
 1ba:	dd 1f       	adc	r29, r29
 1bc:	cc 0f       	add	r28, r28
 1be:	dd 1f       	adc	r29, r29
 1c0:	cc 0f       	add	r28, r28
 1c2:	dd 1f       	adc	r29, r29
 1c4:	c8 0f       	add	r28, r24
 1c6:	d9 1f       	adc	r29, r25
 1c8:	c2 0f       	add	r28, r18
 1ca:	d3 1f       	adc	r29, r19
 1cc:	4a c0       	rjmp	.+148    	; 0x262 <main+0xee>
				if (minute_timer >= 100) // 분 타이머가 100분 이상이면 초 타이머를 0으로 초기화
				second_timer = 0;
			}
			else if ((key_value >= 100) && (key_value <= 103))
 1ce:	c9 01       	movw	r24, r18
 1d0:	84 56       	subi	r24, 0x64	; 100
 1d2:	91 09       	sbc	r25, r1
 1d4:	04 97       	sbiw	r24, 0x04	; 4
 1d6:	08 f0       	brcs	.+2      	; 0x1da <main+0x66>
 1d8:	3f c0       	rjmp	.+126    	; 0x258 <main+0xe4>
			{
				switch (key_value)
 1da:	25 36       	cpi	r18, 0x65	; 101
 1dc:	31 05       	cpc	r19, r1
 1de:	c1 f0       	breq	.+48     	; 0x210 <main+0x9c>
 1e0:	24 f4       	brge	.+8      	; 0x1ea <main+0x76>
 1e2:	24 36       	cpi	r18, 0x64	; 100
 1e4:	31 05       	cpc	r19, r1
 1e6:	41 f0       	breq	.+16     	; 0x1f8 <main+0x84>
 1e8:	3c c0       	rjmp	.+120    	; 0x262 <main+0xee>
 1ea:	26 36       	cpi	r18, 0x66	; 102
 1ec:	31 05       	cpc	r19, r1
 1ee:	e1 f0       	breq	.+56     	; 0x228 <main+0xb4>
 1f0:	27 36       	cpi	r18, 0x67	; 103
 1f2:	31 05       	cpc	r19, r1
 1f4:	29 f1       	breq	.+74     	; 0x240 <main+0xcc>
 1f6:	35 c0       	rjmp	.+106    	; 0x262 <main+0xee>
				{
					case 100:
					minute_timer *= 10;
 1f8:	ce 01       	movw	r24, r28
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	cc 0f       	add	r28, r28
 200:	dd 1f       	adc	r29, r29
 202:	cc 0f       	add	r28, r28
 204:	dd 1f       	adc	r29, r29
 206:	cc 0f       	add	r28, r28
 208:	dd 1f       	adc	r29, r29
 20a:	c8 0f       	add	r28, r24
 20c:	d9 1f       	adc	r29, r25
					break;
 20e:	29 c0       	rjmp	.+82     	; 0x262 <main+0xee>

					case 101:
					minute_timer *= 10;
 210:	ce 01       	movw	r24, r28
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	cc 0f       	add	r28, r28
 218:	dd 1f       	adc	r29, r29
 21a:	cc 0f       	add	r28, r28
 21c:	dd 1f       	adc	r29, r29
 21e:	cc 0f       	add	r28, r28
 220:	dd 1f       	adc	r29, r29
 222:	c8 0f       	add	r28, r24
 224:	d9 1f       	adc	r29, r25
					break;
 226:	1d c0       	rjmp	.+58     	; 0x262 <main+0xee>

					case 102:
					minute_timer *= 10;
 228:	ce 01       	movw	r24, r28
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	cc 0f       	add	r28, r28
 230:	dd 1f       	adc	r29, r29
 232:	cc 0f       	add	r28, r28
 234:	dd 1f       	adc	r29, r29
 236:	cc 0f       	add	r28, r28
 238:	dd 1f       	adc	r29, r29
 23a:	c8 0f       	add	r28, r24
 23c:	d9 1f       	adc	r29, r25
					break;
 23e:	11 c0       	rjmp	.+34     	; 0x262 <main+0xee>

					case 103:
					minute_timer *= 10;
 240:	ce 01       	movw	r24, r28
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	cc 0f       	add	r28, r28
 248:	dd 1f       	adc	r29, r29
 24a:	cc 0f       	add	r28, r28
 24c:	dd 1f       	adc	r29, r29
 24e:	cc 0f       	add	r28, r28
 250:	dd 1f       	adc	r29, r29
 252:	c8 0f       	add	r28, r24
 254:	d9 1f       	adc	r29, r25
					break;
 256:	05 c0       	rjmp	.+10     	; 0x262 <main+0xee>
				}
			}
			else if (key_value == 200) // 왼쪽 하단 버튼을 눌렀을 때 모든 변수 초기화
 258:	28 3c       	cpi	r18, 0xC8	; 200
 25a:	31 05       	cpc	r19, r1
 25c:	11 f4       	brne	.+4      	; 0x262 <main+0xee>
			{
				minute_timer = 0;
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	d0 e0       	ldi	r29, 0x00	; 0
			else if (key_value == 201) // 오른쪽 하단 버튼을 눌렀을 때는 엔터키로 동작
			{
				// Enter key action here (optional)
			}

			FND_Display(0, minute_timer, dot);
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	be 01       	movw	r22, r28
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	62 df       	rcall	.-316    	; 0x132 <FND_Display>
			FND_Display(2, second_timer, 0); // 초 단위 타이머 표시
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	5b df       	rcall	.-330    	; 0x132 <FND_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	8f e7       	ldi	r24, 0x7F	; 127
 280:	96 e1       	ldi	r25, 0x16	; 22
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x10e>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x118>
 28c:	00 00       	nop
 28e:	83 cf       	rjmp	.-250    	; 0x196 <main+0x22>

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
