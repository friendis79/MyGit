
week4_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b49  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d7  00000000  00000000  00000e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000432  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000328  00000000  00000000  00002027  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000234f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	8c d0       	rcall	.+280    	; 0x1b2 <main>
  9a:	b1 c0       	rjmp	.+354    	; 0x1fe <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <PushButtonDet>:
	}
}

int PushButtonDet(int number)
{
	if (((~PIND >> number) & 0x1) == 1) // 비트 연산자 (~) : 0000 0000 -> 1111 1111
  9e:	20 b3       	in	r18, 0x10	; 16
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	20 95       	com	r18
  a4:	30 95       	com	r19
  a6:	02 c0       	rjmp	.+4      	; 0xac <PushButtonDet+0xe>
  a8:	35 95       	asr	r19
  aa:	27 95       	ror	r18
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <PushButtonDet+0xa>
  b0:	c9 01       	movw	r24, r18
  b2:	81 70       	andi	r24, 0x01	; 1
  b4:	99 27       	eor	r25, r25
  b6:	20 ff       	sbrs	r18, 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <PushButtonDet+0x20>
		return 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
	
	else
		return 0;
}
  be:	08 95       	ret

000000c0 <LEDOnOff>:

void LEDOnOff (int number, int onoff)
{
	char led_state;
	led_state = ~PORTB;
  c0:	98 b3       	in	r25, 0x18	; 24
  c2:	90 95       	com	r25
	
	// 특정 위치를 1로 바꾸고 위치만 1인 비트열을 만듦
	if (onoff == 1){
  c4:	61 30       	cpi	r22, 0x01	; 1
  c6:	71 05       	cpc	r23, r1
  c8:	59 f4       	brne	.+22     	; 0xe0 <LEDOnOff+0x20>
		led_state = led_state | (1 << number); // 지정된 위치에만 1을 추가 하고 싶을 때 사용 number 만큼 이동
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <LEDOnOff+0x14>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <LEDOnOff+0x10>
  d8:	92 2b       	or	r25, r18
		PORTB = ~led_state;
  da:	90 95       	com	r25
  dc:	98 bb       	out	0x18, r25	; 24
  de:	08 95       	ret
	}
	
	else{
		led_state = led_state & ~(1 << number); // 원하는 자리의 LED 끄기
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <LEDOnOff+0x2a>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <LEDOnOff+0x26>
  ee:	20 95       	com	r18
  f0:	92 23       	and	r25, r18
		PORTB = ~led_state;
  f2:	90 95       	com	r25
  f4:	98 bb       	out	0x18, r25	; 24
  f6:	08 95       	ret

000000f8 <LEDTimeOnOFF>:
	}
	return 0;
}

void LEDTimeOnOFF(unsigned t)
{
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	int i;
	unsigned t_s;
	t_s = t / 1000;
 100:	9c 01       	movw	r18, r24
 102:	36 95       	lsr	r19
 104:	27 95       	ror	r18
 106:	36 95       	lsr	r19
 108:	27 95       	ror	r18
 10a:	36 95       	lsr	r19
 10c:	27 95       	ror	r18
 10e:	a5 ec       	ldi	r26, 0xC5	; 197
 110:	b0 e2       	ldi	r27, 0x20	; 32
 112:	66 d0       	rcall	.+204    	; 0x1e0 <__umulhisi3>
 114:	8c 01       	movw	r16, r24
 116:	12 95       	swap	r17
 118:	02 95       	swap	r16
 11a:	0f 70       	andi	r16, 0x0F	; 15
 11c:	01 27       	eor	r16, r17
 11e:	1f 70       	andi	r17, 0x0F	; 15
 120:	01 27       	eor	r16, r17
	
	for (i=0; i<8; i++)		
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	05 c0       	rjmp	.+10     	; 0x132 <LEDTimeOnOFF+0x3a>
		LEDOnOff(i, 0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	ce 01       	movw	r24, r28
 12e:	c8 df       	rcall	.-112    	; 0xc0 <LEDOnOff>
{
	int i;
	unsigned t_s;
	t_s = t / 1000;
	
	for (i=0; i<8; i++)		
 130:	21 96       	adiw	r28, 0x01	; 1
 132:	c8 30       	cpi	r28, 0x08	; 8
 134:	d1 05       	cpc	r29, r1
 136:	c4 f3       	brlt	.-16     	; 0x128 <LEDTimeOnOFF+0x30>
		LEDOnOff(i, 0);
	
	if ((t_s >= 1) && (t_s <= 8))	
 138:	c8 01       	movw	r24, r16
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	88 30       	cpi	r24, 0x08	; 8
 13e:	91 05       	cpc	r25, r1
 140:	20 f4       	brcc	.+8      	; 0x14a <LEDTimeOnOFF+0x52>
		LEDOnOff(t_s-1, 1);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	bc df       	rcall	.-136    	; 0xc0 <LEDOnOff>
 148:	2f c0       	rjmp	.+94     	; 0x1a8 <LEDTimeOnOFF+0xb0>
	
	else if (t_s == 9){
 14a:	09 30       	cpi	r16, 0x09	; 9
 14c:	11 05       	cpc	r17, r1
 14e:	69 f4       	brne	.+26     	; 0x16a <LEDTimeOnOFF+0x72>
 150:	06 c0       	rjmp	.+12     	; 0x15e <LEDTimeOnOFF+0x66>
		for (i=0; i<4; i++)	
			LEDOnOff(i, 1);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	ce 01       	movw	r24, r28
 158:	b3 df       	rcall	.-154    	; 0xc0 <LEDOnOff>
	
	if ((t_s >= 1) && (t_s <= 8))	
		LEDOnOff(t_s-1, 1);
	
	else if (t_s == 9){
		for (i=0; i<4; i++)	
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	02 c0       	rjmp	.+4      	; 0x162 <LEDTimeOnOFF+0x6a>
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	c4 30       	cpi	r28, 0x04	; 4
 164:	d1 05       	cpc	r29, r1
 166:	ac f3       	brlt	.-22     	; 0x152 <LEDTimeOnOFF+0x5a>
 168:	1f c0       	rjmp	.+62     	; 0x1a8 <LEDTimeOnOFF+0xb0>
			LEDOnOff(i, 1);
	}
	
	else if (t_s == 10){
 16a:	0a 30       	cpi	r16, 0x0A	; 10
 16c:	11 05       	cpc	r17, r1
 16e:	69 f4       	brne	.+26     	; 0x18a <LEDTimeOnOFF+0x92>
		for (i=4; i<8; i++) 
			LEDOnOff(i, 1);
 170:	06 c0       	rjmp	.+12     	; 0x17e <LEDTimeOnOFF+0x86>
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	ce 01       	movw	r24, r28
 178:	a3 df       	rcall	.-186    	; 0xc0 <LEDOnOff>
		for (i=0; i<4; i++)	
			LEDOnOff(i, 1);
	}
	
	else if (t_s == 10){
		for (i=4; i<8; i++) 
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	02 c0       	rjmp	.+4      	; 0x182 <LEDTimeOnOFF+0x8a>
 17e:	c4 e0       	ldi	r28, 0x04	; 4
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	c8 30       	cpi	r28, 0x08	; 8
 184:	d1 05       	cpc	r29, r1
 186:	ac f3       	brlt	.-22     	; 0x172 <LEDTimeOnOFF+0x7a>
 188:	0f c0       	rjmp	.+30     	; 0x1a8 <LEDTimeOnOFF+0xb0>
			LEDOnOff(i, 1);
	}
	
	else if (t_s >= 11){
 18a:	0b 30       	cpi	r16, 0x0B	; 11
 18c:	11 05       	cpc	r17, r1
 18e:	38 f4       	brcc	.+14     	; 0x19e <LEDTimeOnOFF+0xa6>
		for (i=0; i<8; i++)	
			LEDOnOff(i, 1);
 190:	0b c0       	rjmp	.+22     	; 0x1a8 <LEDTimeOnOFF+0xb0>
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	ce 01       	movw	r24, r28
 198:	93 df       	rcall	.-218    	; 0xc0 <LEDOnOff>
		for (i=4; i<8; i++) 
			LEDOnOff(i, 1);
	}
	
	else if (t_s >= 11){
		for (i=0; i<8; i++)	
 19a:	21 96       	adiw	r28, 0x01	; 1
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <LEDTimeOnOFF+0xaa>
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	c8 30       	cpi	r28, 0x08	; 8
 1a4:	d1 05       	cpc	r29, r1
 1a6:	ac f3       	brlt	.-22     	; 0x192 <LEDTimeOnOFF+0x9a>
			LEDOnOff(i, 1);
	}
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <main>:
int ClickDet (int number, int polarity);
void LEDTimeOnOFF(unsigned t);

int main(void)
{
	DDRB = 0xff;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff; // 전원을 키고 난 후의 초깃값을 지정
 1b6:	88 bb       	out	0x18, r24	; 24
	
	DDRD = 0;
 1b8:	11 ba       	out	0x11, r1	; 17
	
	unsigned time_count = 0;
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1)
	{
		if (PushButtonDet(1)){
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	6d df       	rcall	.-294    	; 0x9e <PushButtonDet>
 1c4:	89 2b       	or	r24, r25
 1c6:	21 f0       	breq	.+8      	; 0x1d0 <main+0x1e>
			time_count++;
 1c8:	21 96       	adiw	r28, 0x01	; 1
			LEDTimeOnOFF(time_count);
 1ca:	ce 01       	movw	r24, r28
 1cc:	95 df       	rcall	.-214    	; 0xf8 <LEDTimeOnOFF>
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <main+0x22>
		}
	
		else{
			time_count = 0;
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	86 e6       	ldi	r24, 0x66	; 102
 1d6:	9e e0       	ldi	r25, 0x0E	; 14
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x26>
 1dc:	00 00       	nop
 1de:	ef cf       	rjmp	.-34     	; 0x1be <main+0xc>

000001e0 <__umulhisi3>:
 1e0:	a2 9f       	mul	r26, r18
 1e2:	b0 01       	movw	r22, r0
 1e4:	b3 9f       	mul	r27, r19
 1e6:	c0 01       	movw	r24, r0
 1e8:	a3 9f       	mul	r26, r19
 1ea:	70 0d       	add	r23, r0
 1ec:	81 1d       	adc	r24, r1
 1ee:	11 24       	eor	r1, r1
 1f0:	91 1d       	adc	r25, r1
 1f2:	b2 9f       	mul	r27, r18
 1f4:	70 0d       	add	r23, r0
 1f6:	81 1d       	adc	r24, r1
 1f8:	11 24       	eor	r1, r1
 1fa:	91 1d       	adc	r25, r1
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
