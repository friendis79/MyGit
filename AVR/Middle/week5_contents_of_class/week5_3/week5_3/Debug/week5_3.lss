
week5_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002fa  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bf3  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008dd  00000000  00000000  00001017  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000461  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004af  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000533  00000000  00000000  0000227b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000027ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	82 d0       	rcall	.+260    	; 0x1b8 <main>
  b4:	20 c1       	rjmp	.+576    	; 0x2f6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <FND_Display>:
		}
	}
}

void FND_Display(int idx, int number, int dot){
	if (idx == 0)
  b8:	00 97       	sbiw	r24, 0x00	; 0
  ba:	19 f4       	brne	.+6      	; 0xc2 <FND_Display+0xa>
		PORTE = 0x10;
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	83 b9       	out	0x03, r24	; 3
  c0:	10 c0       	rjmp	.+32     	; 0xe2 <FND_Display+0x2a>
	else if (idx == 1)
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	91 05       	cpc	r25, r1
  c6:	19 f4       	brne	.+6      	; 0xce <FND_Display+0x16>
		PORTE = 0x20;
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	83 b9       	out	0x03, r24	; 3
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <FND_Display+0x2a>
	else if (idx == 2)
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	91 05       	cpc	r25, r1
  d2:	19 f4       	brne	.+6      	; 0xda <FND_Display+0x22>
		PORTE = 0x40;
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	83 b9       	out	0x03, r24	; 3
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <FND_Display+0x2a>
	else if (idx == 3)
  da:	03 97       	sbiw	r24, 0x03	; 3
  dc:	11 f4       	brne	.+4      	; 0xe2 <FND_Display+0x2a>
		PORTE = 0x80;
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	83 b9       	out	0x03, r24	; 3
	
	PORTB = Port_char[number];
  e2:	fb 01       	movw	r30, r22
  e4:	e0 50       	subi	r30, 0x00	; 0
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	80 81       	ld	r24, Z
  ea:	88 bb       	out	0x18, r24	; 24
	
	if (dot == 1)
  ec:	41 30       	cpi	r20, 0x01	; 1
  ee:	51 05       	cpc	r21, r1
  f0:	19 f4       	brne	.+6      	; 0xf8 <FND_Display+0x40>
		PORTB = PORTB & 0x7f;
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	8f 77       	andi	r24, 0x7F	; 127
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	08 95       	ret

000000fa <FND_Timer>:
}

void FND_Timer(int time){
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
	int buffer = 0;
	
	FND_Display(0, time / 1000, 0);
 106:	68 ee       	ldi	r22, 0xE8	; 232
 108:	73 e0       	ldi	r23, 0x03	; 3
 10a:	ce d0       	rcall	.+412    	; 0x2a8 <__divmodhi4>
 10c:	ec 01       	movw	r28, r24
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	d0 df       	rcall	.-96     	; 0xb8 <FND_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	93 e2       	ldi	r25, 0x23	; 35
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <FND_Timer+0x22>
 120:	00 c0       	rjmp	.+0      	; 0x122 <FND_Timer+0x28>
 122:	00 00       	nop
	buffer= time%1000;
	_delay_ms(2.5);
			
	FND_Display(1, buffer / 100, 1);
 124:	04 e6       	ldi	r16, 0x64	; 100
 126:	10 e0       	ldi	r17, 0x00	; 0
 128:	ce 01       	movw	r24, r28
 12a:	b8 01       	movw	r22, r16
 12c:	bd d0       	rcall	.+378    	; 0x2a8 <__divmodhi4>
 12e:	7c 01       	movw	r14, r24
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	bf df       	rcall	.-130    	; 0xb8 <FND_Display>
 13a:	ef ef       	ldi	r30, 0xFF	; 255
 13c:	f3 e2       	ldi	r31, 0x23	; 35
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <FND_Timer+0x44>
 142:	00 c0       	rjmp	.+0      	; 0x144 <FND_Timer+0x4a>
 144:	00 00       	nop
	buffer= buffer%100;
	_delay_ms(2.5);
			
	FND_Display(2, buffer / 10 , 0);
 146:	ca e0       	ldi	r28, 0x0A	; 10
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	c7 01       	movw	r24, r14
 14c:	be 01       	movw	r22, r28
 14e:	ac d0       	rcall	.+344    	; 0x2a8 <__divmodhi4>
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	90 e0       	ldi	r25, 0x00	; 0
	buffer= buffer%100;
 158:	af df       	rcall	.-162    	; 0xb8 <FND_Display>
 15a:	c7 01       	movw	r24, r14
 15c:	b8 01       	movw	r22, r16
 15e:	a4 d0       	rcall	.+328    	; 0x2a8 <__divmodhi4>
 160:	ef ef       	ldi	r30, 0xFF	; 255
 162:	f3 e2       	ldi	r31, 0x23	; 35
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <FND_Timer+0x6a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <FND_Timer+0x70>
	_delay_ms(2.5);
			
	FND_Display(3, buffer % 10, 0);
 16a:	00 00       	nop
 16c:	be 01       	movw	r22, r28
 16e:	9c d0       	rcall	.+312    	; 0x2a8 <__divmodhi4>
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	bc 01       	movw	r22, r24
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	9e df       	rcall	.-196    	; 0xb8 <FND_Display>
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	93 e2       	ldi	r25, 0x23	; 35
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <FND_Timer+0x86>
 184:	00 c0       	rjmp	.+0      	; 0x186 <FND_Timer+0x8c>
 186:	00 00       	nop
	_delay_ms(2.5);
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <PushButtonDet>:

int PushButtonDet(int number)
{
	if (((~PIND >> number) & 0x1) == 1) // 비트 연산자 (~) : 0000 0000 -> 1111 1111
 196:	20 b3       	in	r18, 0x10	; 16
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	20 95       	com	r18
 19c:	30 95       	com	r19
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <PushButtonDet+0xe>
 1a0:	35 95       	asr	r19
 1a2:	27 95       	ror	r18
 1a4:	8a 95       	dec	r24
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <PushButtonDet+0xa>
 1a8:	c9 01       	movw	r24, r18
 1aa:	81 70       	andi	r24, 0x01	; 1
 1ac:	99 27       	eor	r25, r25
 1ae:	20 ff       	sbrs	r18, 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <PushButtonDet+0x20>
		return 1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
	
	else
		return 0;
 1b6:	08 95       	ret

000001b8 <main>:
// FND 문자표 및 FND포트 핀 설정
unsigned char Port_char[] ={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xd8,0x80,0x90,0x88,0x83,0xc6, 0xa1,0x86,0x8e,0xbf}; // 애노드 공통

int main(void)
{
	DDRD = 0;
 1b8:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xff;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff;
 1be:	82 b9       	out	0x02, r24	; 2
	
	PORTE = 0x80;
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	83 b9       	out	0x03, r24	; 3
	int button_press_count = 0; // 버튼 누름 횟수를 나타내는 변수
	int timer_started = 0; // 타이머 시작 여부를 나타내는 변수
	int prev_button_state = 0; // 이전 버튼 상태를 저장하는 변수
	int stopped_time = 0; // 타이머가 멈춘 시간을 나타내는 변수
	int display_zero = 0; // 초기화를 기다리는 동안 0을 표시할 변수
	int timer_stopped = 0; // 타이머가 멈추었는지를 나타내는 변수
 1c4:	a1 2c       	mov	r10, r1
 1c6:	b1 2c       	mov	r11, r1
	int time_count = 0;
	int button_press_count = 0; // 버튼 누름 횟수를 나타내는 변수
	int timer_started = 0; // 타이머 시작 여부를 나타내는 변수
	int prev_button_state = 0; // 이전 버튼 상태를 저장하는 변수
	int stopped_time = 0; // 타이머가 멈춘 시간을 나타내는 변수
	int display_zero = 0; // 초기화를 기다리는 동안 0을 표시할 변수
 1c8:	c1 2c       	mov	r12, r1
 1ca:	d1 2c       	mov	r13, r1
	
	int time_count = 0;
	int button_press_count = 0; // 버튼 누름 횟수를 나타내는 변수
	int timer_started = 0; // 타이머 시작 여부를 나타내는 변수
	int prev_button_state = 0; // 이전 버튼 상태를 저장하는 변수
	int stopped_time = 0; // 타이머가 멈춘 시간을 나타내는 변수
 1cc:	21 2c       	mov	r2, r1
 1ce:	31 2c       	mov	r3, r1
	PORTE = 0x80;
	
	int time_count = 0;
	int button_press_count = 0; // 버튼 누름 횟수를 나타내는 변수
	int timer_started = 0; // 타이머 시작 여부를 나타내는 변수
	int prev_button_state = 0; // 이전 버튼 상태를 저장하는 변수
 1d0:	61 2c       	mov	r6, r1
 1d2:	71 2c       	mov	r7, r1
	
	PORTE = 0x80;
	
	int time_count = 0;
	int button_press_count = 0; // 버튼 누름 횟수를 나타내는 변수
	int timer_started = 0; // 타이머 시작 여부를 나타내는 변수
 1d4:	e1 2c       	mov	r14, r1
 1d6:	f1 2c       	mov	r15, r1
	DDRE = 0xff;
	
	PORTE = 0x80;
	
	int time_count = 0;
	int button_press_count = 0; // 버튼 누름 횟수를 나타내는 변수
 1d8:	81 2c       	mov	r8, r1
 1da:	91 2c       	mov	r9, r1
	DDRB = 0xff;
	DDRE = 0xff;
	
	PORTE = 0x80;
	
	int time_count = 0;
 1dc:	00 e0       	ldi	r16, 0x00	; 0
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	0d c0       	rjmp	.+26     	; 0x1fc <main+0x44>
			button_press_count = 0; // 버튼 누름 횟수를 나타내는 변수
			timer_started = 0; // 타이머 시작 여부를 나타내는 변수
			prev_button_state = 0; // 이전 버튼 상태를 저장하는 변수
			stopped_time = 0; // 타이머가 멈춘 시간을 나타내는 변수
			display_zero = 0; // 0 표시 시작
			timer_stopped = 0; // 타이머 멈춤 상태 해제
 1e2:	a1 2c       	mov	r10, r1
 1e4:	b1 2c       	mov	r11, r1
			time_count = 0;
			button_press_count = 0; // 버튼 누름 횟수를 나타내는 변수
			timer_started = 0; // 타이머 시작 여부를 나타내는 변수
			prev_button_state = 0; // 이전 버튼 상태를 저장하는 변수
			stopped_time = 0; // 타이머가 멈춘 시간을 나타내는 변수
			display_zero = 0; // 0 표시 시작
 1e6:	c1 2c       	mov	r12, r1
 1e8:	d1 2c       	mov	r13, r1
		if (PushButtonDet(1) == 1 && !timer_started) { // 타이머가 실행 중이 아닐 때만 초기화 가능
			time_count = 0;
			button_press_count = 0; // 버튼 누름 횟수를 나타내는 변수
			timer_started = 0; // 타이머 시작 여부를 나타내는 변수
			prev_button_state = 0; // 이전 버튼 상태를 저장하는 변수
			stopped_time = 0; // 타이머가 멈춘 시간을 나타내는 변수
 1ea:	21 2c       	mov	r2, r1
 1ec:	31 2c       	mov	r3, r1
		// 1번 버튼을 누를 경우 초기화
		if (PushButtonDet(1) == 1 && !timer_started) { // 타이머가 실행 중이 아닐 때만 초기화 가능
			time_count = 0;
			button_press_count = 0; // 버튼 누름 횟수를 나타내는 변수
			timer_started = 0; // 타이머 시작 여부를 나타내는 변수
			prev_button_state = 0; // 이전 버튼 상태를 저장하는 변수
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
		prev_button_state = button_state; // 현재 버튼 상태를 이전 버튼 상태로 저장

		// 1번 버튼을 누를 경우 초기화
		if (PushButtonDet(1) == 1 && !timer_started) { // 타이머가 실행 중이 아닐 때만 초기화 가능
			time_count = 0;
			button_press_count = 0; // 버튼 누름 횟수를 나타내는 변수
 1f2:	81 2c       	mov	r8, r1
 1f4:	91 2c       	mov	r9, r1

		prev_button_state = button_state; // 현재 버튼 상태를 이전 버튼 상태로 저장

		// 1번 버튼을 누를 경우 초기화
		if (PushButtonDet(1) == 1 && !timer_started) { // 타이머가 실행 중이 아닐 때만 초기화 가능
			time_count = 0;
 1f6:	00 e0       	ldi	r16, 0x00	; 0
 1f8:	10 e0       	ldi	r17, 0x00	; 0
 1fa:	3e 01       	movw	r6, r28
	int stopped_time = 0; // 타이머가 멈춘 시간을 나타내는 변수
	int display_zero = 0; // 초기화를 기다리는 동안 0을 표시할 변수
	int timer_stopped = 0; // 타이머가 멈추었는지를 나타내는 변수

	while (1) {
		int button_state = PushButtonDet(0); // 현재 버튼 상태 확인
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	ca df       	rcall	.-108    	; 0x196 <PushButtonDet>
 202:	ec 01       	movw	r28, r24

		// 0번 버튼이 눌리지 않았을 때만 0을 표시하고 타이머가 실행 중이 아니면 초기화 가능
		if (!display_zero && !timer_stopped) {
 204:	c1 14       	cp	r12, r1
 206:	d1 04       	cpc	r13, r1
 208:	a1 f4       	brne	.+40     	; 0x232 <main+0x7a>
 20a:	a1 14       	cp	r10, r1
 20c:	b1 04       	cpc	r11, r1
 20e:	59 f0       	breq	.+22     	; 0x226 <main+0x6e>
 210:	10 c0       	rjmp	.+32     	; 0x232 <main+0x7a>
			for (int i = 0; i < 4; i++) {
				FND_Display(i, 0, 0);
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	c2 01       	movw	r24, r4
 21c:	4d df       	rcall	.-358    	; 0xb8 <FND_Display>
	while (1) {
		int button_state = PushButtonDet(0); // 현재 버튼 상태 확인

		// 0번 버튼이 눌리지 않았을 때만 0을 표시하고 타이머가 실행 중이 아니면 초기화 가능
		if (!display_zero && !timer_stopped) {
			for (int i = 0; i < 4; i++) {
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	48 1a       	sub	r4, r24
 222:	58 0a       	sbc	r5, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <main+0x72>
 226:	41 2c       	mov	r4, r1
 228:	51 2c       	mov	r5, r1
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	48 16       	cp	r4, r24
 22e:	51 04       	cpc	r5, r1
 230:	84 f3       	brlt	.-32     	; 0x212 <main+0x5a>
				FND_Display(i, 0, 0);
			}
		}

		// 버튼이 눌린 상태에서 이전에 눌리지 않았을 경우
		if (button_state == 1 && prev_button_state == 0) {
 232:	c1 30       	cpi	r28, 0x01	; 1
 234:	d1 05       	cpc	r29, r1
 236:	11 f5       	brne	.+68     	; 0x27c <main+0xc4>
 238:	67 28       	or	r6, r7
 23a:	01 f5       	brne	.+64     	; 0x27c <main+0xc4>
			button_press_count++;
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	88 1a       	sub	r8, r24
 240:	98 0a       	sbc	r9, r24
			if (button_press_count == 1) { // 0번 버튼을 처음 누른 경우
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	88 16       	cp	r8, r24
 246:	91 04       	cpc	r9, r1
 248:	29 f0       	breq	.+10     	; 0x254 <main+0x9c>
				timer_started = 1; // 타이머 시작
				display_zero = 1; // 0 표시 중지
				timer_stopped = 0; // 타이머 멈춤 상태 해제
				}
				
			else if (button_press_count == 2) { // 0번 버튼을 두 번째 누른 경우
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	88 16       	cp	r8, r24
 24e:	91 04       	cpc	r9, r1
 250:	a9 f4       	brne	.+42     	; 0x27c <main+0xc4>
 252:	09 c0       	rjmp	.+18     	; 0x266 <main+0xae>
		if (button_state == 1 && prev_button_state == 0) {
			button_press_count++;
			if (button_press_count == 1) { // 0번 버튼을 처음 누른 경우
				timer_started = 1; // 타이머 시작
				display_zero = 1; // 0 표시 중지
				timer_stopped = 0; // 타이머 멈춤 상태 해제
 254:	a1 2c       	mov	r10, r1
 256:	b1 2c       	mov	r11, r1
		// 버튼이 눌린 상태에서 이전에 눌리지 않았을 경우
		if (button_state == 1 && prev_button_state == 0) {
			button_press_count++;
			if (button_press_count == 1) { // 0번 버튼을 처음 누른 경우
				timer_started = 1; // 타이머 시작
				display_zero = 1; // 0 표시 중지
 258:	cc 24       	eor	r12, r12
 25a:	c3 94       	inc	r12
 25c:	d1 2c       	mov	r13, r1

		// 버튼이 눌린 상태에서 이전에 눌리지 않았을 경우
		if (button_state == 1 && prev_button_state == 0) {
			button_press_count++;
			if (button_press_count == 1) { // 0번 버튼을 처음 누른 경우
				timer_started = 1; // 타이머 시작
 25e:	ee 24       	eor	r14, r14
 260:	e3 94       	inc	r14
 262:	f1 2c       	mov	r15, r1
 264:	0b c0       	rjmp	.+22     	; 0x27c <main+0xc4>
				display_zero = 1; // 0 표시 중지
				timer_stopped = 0; // 타이머 멈춤 상태 해제
				}
				
			else if (button_press_count == 2) { // 0번 버튼을 두 번째 누른 경우
				stopped_time = time_count; // 타이머가 멈춘 시간 기록
 266:	20 2e       	mov	r2, r16
 268:	31 2e       	mov	r3, r17
				timer_started = 0; // 타이머 멈춤
				button_press_count = 0; // 버튼 누름 횟수 초기화
				display_zero = 0; // 0 표시 시작
				timer_stopped = 1; // 타이머 멈춤 상태 설정
 26a:	aa 24       	eor	r10, r10
 26c:	a3 94       	inc	r10
 26e:	b1 2c       	mov	r11, r1
				
			else if (button_press_count == 2) { // 0번 버튼을 두 번째 누른 경우
				stopped_time = time_count; // 타이머가 멈춘 시간 기록
				timer_started = 0; // 타이머 멈춤
				button_press_count = 0; // 버튼 누름 횟수 초기화
				display_zero = 0; // 0 표시 시작
 270:	c1 2c       	mov	r12, r1
 272:	d1 2c       	mov	r13, r1
				timer_stopped = 0; // 타이머 멈춤 상태 해제
				}
				
			else if (button_press_count == 2) { // 0번 버튼을 두 번째 누른 경우
				stopped_time = time_count; // 타이머가 멈춘 시간 기록
				timer_started = 0; // 타이머 멈춤
 274:	e1 2c       	mov	r14, r1
 276:	f1 2c       	mov	r15, r1
				button_press_count = 0; // 버튼 누름 횟수 초기화
 278:	81 2c       	mov	r8, r1
 27a:	91 2c       	mov	r9, r1
				display_zero = 0; // 0 표시 시작
				timer_stopped = 1; // 타이머 멈춤 상태 설정
			}
		}

		if (timer_started) { // 타이머가 시작된 경우에만 실행
 27c:	e1 14       	cp	r14, r1
 27e:	f1 04       	cpc	r15, r1
			FND_Timer(time_count);
 280:	29 f0       	breq	.+10     	; 0x28c <main+0xd4>
 282:	c8 01       	movw	r24, r16
 284:	3a df       	rcall	.-396    	; 0xfa <FND_Timer>
			time_count++;
 286:	0f 5f       	subi	r16, 0xFF	; 255
 288:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			
		else { // 타이머가 멈춘 경우
			FND_Timer(stopped_time); // 멈춘 시간 표시
 28a:	03 c0       	rjmp	.+6      	; 0x292 <main+0xda>
 28c:	82 2d       	mov	r24, r2
 28e:	93 2d       	mov	r25, r3
		}

		prev_button_state = button_state; // 현재 버튼 상태를 이전 버튼 상태로 저장

		// 1번 버튼을 누를 경우 초기화
		if (PushButtonDet(1) == 1 && !timer_started) { // 타이머가 실행 중이 아닐 때만 초기화 가능
 290:	34 df       	rcall	.-408    	; 0xfa <FND_Timer>
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	7f df       	rcall	.-258    	; 0x196 <PushButtonDet>
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	09 f0       	breq	.+2      	; 0x29e <main+0xe6>
 29c:	ae cf       	rjmp	.-164    	; 0x1fa <main+0x42>
 29e:	e1 14       	cp	r14, r1
 2a0:	f1 04       	cpc	r15, r1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <main+0xee>
 2a4:	9e cf       	rjmp	.-196    	; 0x1e2 <main+0x2a>
 2a6:	a9 cf       	rjmp	.-174    	; 0x1fa <main+0x42>

000002a8 <__divmodhi4>:
 2a8:	97 fb       	bst	r25, 7
 2aa:	07 2e       	mov	r0, r23
 2ac:	16 f4       	brtc	.+4      	; 0x2b2 <__divmodhi4+0xa>
 2ae:	00 94       	com	r0
 2b0:	06 d0       	rcall	.+12     	; 0x2be <__divmodhi4_neg1>
 2b2:	77 fd       	sbrc	r23, 7
 2b4:	08 d0       	rcall	.+16     	; 0x2c6 <__divmodhi4_neg2>
 2b6:	0b d0       	rcall	.+22     	; 0x2ce <__udivmodhi4>
 2b8:	07 fc       	sbrc	r0, 7
 2ba:	05 d0       	rcall	.+10     	; 0x2c6 <__divmodhi4_neg2>
 2bc:	3e f4       	brtc	.+14     	; 0x2cc <__divmodhi4_exit>

000002be <__divmodhi4_neg1>:
 2be:	90 95       	com	r25
 2c0:	81 95       	neg	r24
 2c2:	9f 4f       	sbci	r25, 0xFF	; 255
 2c4:	08 95       	ret

000002c6 <__divmodhi4_neg2>:
 2c6:	70 95       	com	r23
 2c8:	61 95       	neg	r22
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255

000002cc <__divmodhi4_exit>:
 2cc:	08 95       	ret

000002ce <__udivmodhi4>:
 2ce:	aa 1b       	sub	r26, r26
 2d0:	bb 1b       	sub	r27, r27
 2d2:	51 e1       	ldi	r21, 0x11	; 17
 2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <__udivmodhi4_ep>

000002d6 <__udivmodhi4_loop>:
 2d6:	aa 1f       	adc	r26, r26
 2d8:	bb 1f       	adc	r27, r27
 2da:	a6 17       	cp	r26, r22
 2dc:	b7 07       	cpc	r27, r23
 2de:	10 f0       	brcs	.+4      	; 0x2e4 <__udivmodhi4_ep>
 2e0:	a6 1b       	sub	r26, r22
 2e2:	b7 0b       	sbc	r27, r23

000002e4 <__udivmodhi4_ep>:
 2e4:	88 1f       	adc	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	5a 95       	dec	r21
 2ea:	a9 f7       	brne	.-22     	; 0x2d6 <__udivmodhi4_loop>
 2ec:	80 95       	com	r24
 2ee:	90 95       	com	r25
 2f0:	bc 01       	movw	r22, r24
 2f2:	cd 01       	movw	r24, r26
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
