
week6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000943  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000859  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000387  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000004c  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019b  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001d4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	3e d0       	rcall	.+124    	; 0x116 <main>
  9a:	48 c0       	rjmp	.+144    	; 0x12c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <row_scan>:

char row_scan(char row) // row  0,1,2,3
{
	char col = -1; //0xff
	char pin_info;
	if (row == 0)      PORTC = 0x0e; //1110
  9e:	81 11       	cpse	r24, r1
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <row_scan+0xa>
  a2:	8e e0       	ldi	r24, 0x0E	; 14
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	0e c0       	rjmp	.+28     	; 0xc4 <row_scan+0x26>
	else if (row == 1) PORTC = 0x0d; //1101
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	19 f4       	brne	.+6      	; 0xb2 <row_scan+0x14>
  ac:	8d e0       	ldi	r24, 0x0D	; 13
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <row_scan+0x26>
	else if (row == 2) PORTC = 0x0b; //1011
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	19 f4       	brne	.+6      	; 0xbc <row_scan+0x1e>
  b6:	8b e0       	ldi	r24, 0x0B	; 11
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <row_scan+0x26>
	else if (row == 3) PORTC = 0x07; //0111
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	11 f4       	brne	.+4      	; 0xc4 <row_scan+0x26>
  c0:	87 e0       	ldi	r24, 0x07	; 7
  c2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	85 e0       	ldi	r24, 0x05	; 5
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <row_scan+0x28>
	
	_delay_us(1);
	pin_info = PINC >> 4;
  ca:	83 b3       	in	r24, 0x13	; 19
  cc:	82 95       	swap	r24
  ce:	8f 70       	andi	r24, 0x0F	; 15
	
	if (pin_info == 0x1)      col = 0; // 0001
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	41 f0       	breq	.+16     	; 0xe4 <row_scan+0x46>
	else if (pin_info == 0x2) col = 1; // 0010
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	41 f0       	breq	.+16     	; 0xe8 <row_scan+0x4a>
	else if (pin_info == 0x4) col = 2; // 0100
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	41 f0       	breq	.+16     	; 0xec <row_scan+0x4e>
	else if (pin_info == 0x8) col = 3; // 1000
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	41 f0       	breq	.+16     	; 0xf0 <row_scan+0x52>
	}
}

char row_scan(char row) // row  0,1,2,3
{
	char col = -1; //0xff
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	08 95       	ret
	else if (row == 3) PORTC = 0x07; //0111
	
	_delay_us(1);
	pin_info = PINC >> 4;
	
	if (pin_info == 0x1)      col = 0; // 0001
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	08 95       	ret
	else if (pin_info == 0x2) col = 1; // 0010
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	08 95       	ret
	else if (pin_info == 0x4) col = 2; // 0100
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	08 95       	ret
	else if (pin_info == 0x8) col = 3; // 1000
  f0:	83 e0       	ldi	r24, 0x03	; 3
	
	return (col); //0,1,2,3
}
  f2:	08 95       	ret

000000f4 <key_scan>:

char key_scan()
{
  f4:	cf 93       	push	r28
	char col;
	char row;
	char key = 0xff;
	
	for(row = 0; row <4; row ++)
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	09 c0       	rjmp	.+18     	; 0x10c <key_scan+0x18>
	{
		col = row_scan(row);
  fa:	8c 2f       	mov	r24, r28
  fc:	d0 df       	rcall	.-96     	; 0x9e <row_scan>
		if (col != 0xff)
  fe:	8f 3f       	cpi	r24, 0xFF	; 255
 100:	21 f0       	breq	.+8      	; 0x10a <key_scan+0x16>
		{
			key = 4 * row +col;
 102:	cc 0f       	add	r28, r28
 104:	cc 0f       	add	r28, r28
 106:	8c 0f       	add	r24, r28
			return (key);
 108:	04 c0       	rjmp	.+8      	; 0x112 <key_scan+0x1e>
{
	char col;
	char row;
	char key = 0xff;
	
	for(row = 0; row <4; row ++)
 10a:	cf 5f       	subi	r28, 0xFF	; 255
 10c:	c4 30       	cpi	r28, 0x04	; 4
 10e:	a8 f3       	brcs	.-22     	; 0xfa <key_scan+0x6>
			key = 4 * row +col;
			return (key);
		}
	}

	return (0xff);
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <main>:
char row_scan(char row);
char key_scan();

int main(void)
{
	DDRB = 0xff;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x0f;
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	94 bb       	out	0x14, r25	; 20
	DDRD = 0;
 11e:	11 ba       	out	0x11, r1	; 17
	DDRE = 0xff;
 120:	82 b9       	out	0x02, r24	; 2
		
	PORTE = 0x80;
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	83 b9       	out	0x03, r24	; 3
	
	/* Replace with your application code */
	while (1)
	{
		PORTB = key_scan();
 126:	e6 df       	rcall	.-52     	; 0xf4 <key_scan>
 128:	88 bb       	out	0x18, r24	; 24
 12a:	fd cf       	rjmp	.-6      	; 0x126 <main+0x10>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
