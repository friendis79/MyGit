
week_6_edit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000266  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ad0  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a5  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042e  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000479  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000316  00000000  00000000  00001fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000022ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e6       	ldi	r30, 0x66	; 102
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	30 d0       	rcall	.+96     	; 0x114 <main>
  b4:	d6 c0       	rjmp	.+428    	; 0x262 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <FND_Display>:
		}
	}
}

void FND_Display(int number)
{
  b8:	dc 01       	movw	r26, r24
	for (int idx = 0; idx < 4; idx++)
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	18 c0       	rjmp	.+48     	; 0xf0 <FND_Display+0x38>
	{
		PORTE = 1 << (4 + idx);
  c0:	b9 01       	movw	r22, r18
  c2:	6c 5f       	subi	r22, 0xFC	; 252
  c4:	7f 4f       	sbci	r23, 0xFF	; 255
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <FND_Display+0x18>
  cc:	44 0f       	add	r20, r20
  ce:	55 1f       	adc	r21, r21
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <FND_Display+0x14>
  d4:	43 b9       	out	0x03, r20	; 3
		PORTB = Port_char[number];
  d6:	fd 01       	movw	r30, r26
  d8:	e0 50       	subi	r30, 0x00	; 0
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	90 81       	ld	r25, Z
  de:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	93 e2       	ldi	r25, 0x23	; 35
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <FND_Display+0x2c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <FND_Display+0x32>
  ea:	00 00       	nop
	}
}

void FND_Display(int number)
{
	for (int idx = 0; idx < 4; idx++)
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	3f 4f       	sbci	r19, 0xFF	; 255
  f0:	24 30       	cpi	r18, 0x04	; 4
  f2:	31 05       	cpc	r19, r1
  f4:	2c f3       	brlt	.-54     	; 0xc0 <FND_Display+0x8>
	{
		PORTE = 1 << (4 + idx);
		PORTB = Port_char[number];
		_delay_ms(2.5);
	}
}
  f6:	08 95       	ret

000000f8 <PushButtonDet>:

int PushButtonDet(int number)
{
	return ((~PIND >> number) & 0x1);
  f8:	20 b3       	in	r18, 0x10	; 16
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	20 95       	com	r18
  fe:	30 95       	com	r19
 100:	a9 01       	movw	r20, r18
 102:	02 c0       	rjmp	.+4      	; 0x108 <PushButtonDet+0x10>
 104:	55 95       	asr	r21
 106:	47 95       	ror	r20
 108:	8a 95       	dec	r24
 10a:	e2 f7       	brpl	.-8      	; 0x104 <PushButtonDet+0xc>
 10c:	ca 01       	movw	r24, r20
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	99 27       	eor	r25, r25
 112:	08 95       	ret

00000114 <main>:

unsigned char Port_char[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x90, 0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e, 0xbf};

int main(void)
{
	DDRD = 0;
 114:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xff;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff;
 11a:	82 b9       	out	0x02, r24	; 2
	PORTE = 0x80;
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	83 b9       	out	0x03, r24	; 3

	int time_count = 0;
	int timer_started = 0;
	int stopped_time = 0;
 120:	00 e0       	ldi	r16, 0x00	; 0
 122:	10 e0       	ldi	r17, 0x00	; 0
	DDRB = 0xff;
	DDRE = 0xff;
	PORTE = 0x80;

	int time_count = 0;
	int timer_started = 0;
 124:	a1 2c       	mov	r10, r1
 126:	b1 2c       	mov	r11, r1
	DDRD = 0;
	DDRB = 0xff;
	DDRE = 0xff;
	PORTE = 0x80;

	int time_count = 0;
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	04 c0       	rjmp	.+8      	; 0x136 <main+0x22>
		}

		if (PushButtonDet(1) && !timer_started)
		{
			time_count = 0;
			stopped_time = 0;
 12e:	00 e0       	ldi	r16, 0x00	; 0
 130:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		if (PushButtonDet(1) && !timer_started)
		{
			time_count = 0;
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	d0 e0       	ldi	r29, 0x00	; 0
	int timer_started = 0;
	int stopped_time = 0;

	while (1)
	{
		int button_state = PushButtonDet(0);
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	de df       	rcall	.-68     	; 0xf8 <PushButtonDet>
 13c:	6c 01       	movw	r12, r24

		if (!timer_started && !stopped_time)
 13e:	a1 14       	cp	r10, r1
 140:	b1 04       	cpc	r11, r1
 142:	89 f4       	brne	.+34     	; 0x166 <main+0x52>
 144:	01 15       	cp	r16, r1
 146:	11 05       	cpc	r17, r1
 148:	41 f0       	breq	.+16     	; 0x15a <main+0x46>
 14a:	0d c0       	rjmp	.+26     	; 0x166 <main+0x52>
		{
			for (int i = 0; i < 4; i++)
			FND_Display(0);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	b3 df       	rcall	.-154    	; 0xb8 <FND_Display>
	{
		int button_state = PushButtonDet(0);

		if (!timer_started && !stopped_time)
		{
			for (int i = 0; i < 4; i++)
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	e8 1a       	sub	r14, r24
 156:	f8 0a       	sbc	r15, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <main+0x4a>
 15a:	e1 2c       	mov	r14, r1
 15c:	f1 2c       	mov	r15, r1
 15e:	94 e0       	ldi	r25, 0x04	; 4
 160:	e9 16       	cp	r14, r25
 162:	f1 04       	cpc	r15, r1
 164:	9c f3       	brlt	.-26     	; 0x14c <main+0x38>
			FND_Display(0);
		}

		if (button_state && !timer_started)
 166:	c1 14       	cp	r12, r1
 168:	d1 04       	cpc	r13, r1
 16a:	19 f0       	breq	.+6      	; 0x172 <main+0x5e>
 16c:	a1 14       	cp	r10, r1
 16e:	b1 04       	cpc	r11, r1
 170:	31 f0       	breq	.+12     	; 0x17e <main+0x6a>
		{
			timer_started = 1;
			stopped_time = 0;
		}
		else if (button_state && timer_started)
 172:	cd 28       	or	r12, r13
 174:	69 f0       	breq	.+26     	; 0x190 <main+0x7c>
 176:	a1 14       	cp	r10, r1
 178:	b1 04       	cpc	r11, r1
 17a:	39 f4       	brne	.+14     	; 0x18a <main+0x76>
 17c:	09 c0       	rjmp	.+18     	; 0x190 <main+0x7c>
		}

		if (button_state && !timer_started)
		{
			timer_started = 1;
			stopped_time = 0;
 17e:	00 e0       	ldi	r16, 0x00	; 0
 180:	10 e0       	ldi	r17, 0x00	; 0
			FND_Display(0);
		}

		if (button_state && !timer_started)
		{
			timer_started = 1;
 182:	aa 24       	eor	r10, r10
 184:	a3 94       	inc	r10
 186:	b1 2c       	mov	r11, r1
 188:	03 c0       	rjmp	.+6      	; 0x190 <main+0x7c>
			stopped_time = 0;
		}
		else if (button_state && timer_started)
		{
			timer_started = 0;
			stopped_time = time_count;
 18a:	8e 01       	movw	r16, r28
			timer_started = 1;
			stopped_time = 0;
		}
		else if (button_state && timer_started)
		{
			timer_started = 0;
 18c:	a1 2c       	mov	r10, r1
 18e:	b1 2c       	mov	r11, r1
			stopped_time = time_count;
		}

		if (timer_started)
 190:	a1 14       	cp	r10, r1
 192:	b1 04       	cpc	r11, r1
 194:	b1 f4       	brne	.+44     	; 0x1c2 <main+0xae>
 196:	e1 2c       	mov	r14, r1
 198:	f1 2c       	mov	r15, r1
 19a:	2d c0       	rjmp	.+90     	; 0x1f6 <main+0xe2>
		{
			for (int i = 0; i < 4; i++)
			{
				int digit = time_count % 10;
 19c:	ce 01       	movw	r24, r28
 19e:	6a e0       	ldi	r22, 0x0A	; 10
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	38 d0       	rcall	.+112    	; 0x214 <__divmodhi4>
 1a4:	c6 2e       	mov	r12, r22
				FND_Display(digit);
 1a6:	d7 2e       	mov	r13, r23
 1a8:	87 df       	rcall	.-242    	; 0xb8 <FND_Display>
				time_count /= 10;
 1aa:	cc 2d       	mov	r28, r12
 1ac:	dd 2d       	mov	r29, r13
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	93 e2       	ldi	r25, 0x23	; 35
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x9e>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0xa4>
 1b8:	00 00       	nop
			stopped_time = time_count;
		}

		if (timer_started)
		{
			for (int i = 0; i < 4; i++)
 1ba:	9f ef       	ldi	r25, 0xFF	; 255
 1bc:	e9 1a       	sub	r14, r25
 1be:	f9 0a       	sbc	r15, r25
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <main+0xb2>
 1c2:	e1 2c       	mov	r14, r1
 1c4:	f1 2c       	mov	r15, r1
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	e8 16       	cp	r14, r24
 1ca:	f1 04       	cpc	r15, r1
 1cc:	3c f3       	brlt	.-50     	; 0x19c <main+0x88>
				int digit = time_count % 10;
				FND_Display(digit);
				time_count /= 10;
				_delay_ms(2.5);
			}
			time_count++;
 1ce:	21 96       	adiw	r28, 0x01	; 1
		}
		else
		{
			for (int i = 0; i < 4; i++)
			{
				int digit = stopped_time % 10;
 1d0:	16 c0       	rjmp	.+44     	; 0x1fe <main+0xea>
 1d2:	c8 01       	movw	r24, r16
 1d4:	6a e0       	ldi	r22, 0x0A	; 10
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	1d d0       	rcall	.+58     	; 0x214 <__divmodhi4>
 1da:	c6 2e       	mov	r12, r22
				FND_Display(digit);
 1dc:	d7 2e       	mov	r13, r23
 1de:	6c df       	rcall	.-296    	; 0xb8 <FND_Display>
				stopped_time /= 10;
 1e0:	0c 2d       	mov	r16, r12
 1e2:	1d 2d       	mov	r17, r13
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	93 e2       	ldi	r25, 0x23	; 35
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0xd4>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0xda>
 1ee:	00 00       	nop
			}
			time_count++;
		}
		else
		{
			for (int i = 0; i < 4; i++)
 1f0:	9f ef       	ldi	r25, 0xFF	; 255
 1f2:	e9 1a       	sub	r14, r25
 1f4:	f9 0a       	sbc	r15, r25
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	e8 16       	cp	r14, r24
 1fa:	f1 04       	cpc	r15, r1
				stopped_time /= 10;
				_delay_ms(2.5);
			}
		}

		if (PushButtonDet(1) && !timer_started)
 1fc:	54 f3       	brlt	.-44     	; 0x1d2 <main+0xbe>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	7a df       	rcall	.-268    	; 0xf8 <PushButtonDet>
 204:	89 2b       	or	r24, r25
 206:	09 f4       	brne	.+2      	; 0x20a <main+0xf6>
 208:	96 cf       	rjmp	.-212    	; 0x136 <main+0x22>
 20a:	a1 14       	cp	r10, r1
 20c:	b1 04       	cpc	r11, r1
 20e:	09 f4       	brne	.+2      	; 0x212 <main+0xfe>
 210:	8e cf       	rjmp	.-228    	; 0x12e <main+0x1a>
 212:	91 cf       	rjmp	.-222    	; 0x136 <main+0x22>

00000214 <__divmodhi4>:
 214:	97 fb       	bst	r25, 7
 216:	07 2e       	mov	r0, r23
 218:	16 f4       	brtc	.+4      	; 0x21e <__divmodhi4+0xa>
 21a:	00 94       	com	r0
 21c:	06 d0       	rcall	.+12     	; 0x22a <__divmodhi4_neg1>
 21e:	77 fd       	sbrc	r23, 7
 220:	08 d0       	rcall	.+16     	; 0x232 <__divmodhi4_neg2>
 222:	0b d0       	rcall	.+22     	; 0x23a <__udivmodhi4>
 224:	07 fc       	sbrc	r0, 7
 226:	05 d0       	rcall	.+10     	; 0x232 <__divmodhi4_neg2>
 228:	3e f4       	brtc	.+14     	; 0x238 <__divmodhi4_exit>

0000022a <__divmodhi4_neg1>:
 22a:	90 95       	com	r25
 22c:	81 95       	neg	r24
 22e:	9f 4f       	sbci	r25, 0xFF	; 255
 230:	08 95       	ret

00000232 <__divmodhi4_neg2>:
 232:	70 95       	com	r23
 234:	61 95       	neg	r22
 236:	7f 4f       	sbci	r23, 0xFF	; 255

00000238 <__divmodhi4_exit>:
 238:	08 95       	ret

0000023a <__udivmodhi4>:
 23a:	aa 1b       	sub	r26, r26
 23c:	bb 1b       	sub	r27, r27
 23e:	51 e1       	ldi	r21, 0x11	; 17
 240:	07 c0       	rjmp	.+14     	; 0x250 <__udivmodhi4_ep>

00000242 <__udivmodhi4_loop>:
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a6 17       	cp	r26, r22
 248:	b7 07       	cpc	r27, r23
 24a:	10 f0       	brcs	.+4      	; 0x250 <__udivmodhi4_ep>
 24c:	a6 1b       	sub	r26, r22
 24e:	b7 0b       	sbc	r27, r23

00000250 <__udivmodhi4_ep>:
 250:	88 1f       	adc	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	5a 95       	dec	r21
 256:	a9 f7       	brne	.-22     	; 0x242 <__udivmodhi4_loop>
 258:	80 95       	com	r24
 25a:	90 95       	com	r25
 25c:	bc 01       	movw	r22, r24
 25e:	cd 01       	movw	r24, r26
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
