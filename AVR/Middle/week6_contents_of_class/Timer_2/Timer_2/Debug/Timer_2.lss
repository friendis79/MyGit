
Timer_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000366  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000366  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c0c  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e6  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a7  00000000  00000000  00001982  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c5  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004fd  00000000  00000000  00002375  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e6       	ldi	r30, 0x66	; 102
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	8e d0       	rcall	.+284    	; 0x1d0 <main>
  b4:	56 c1       	rjmp	.+684    	; 0x362 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <FND_Display>:
	}
}

void FND_Display(int idx, int number, int dot)
{
	if (idx == 0)
  b8:	00 97       	sbiw	r24, 0x00	; 0
  ba:	19 f4       	brne	.+6      	; 0xc2 <FND_Display+0xa>
	PORTE = 0x10;
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	83 b9       	out	0x03, r24	; 3
  c0:	10 c0       	rjmp	.+32     	; 0xe2 <FND_Display+0x2a>
	else if (idx == 1)
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	91 05       	cpc	r25, r1
  c6:	19 f4       	brne	.+6      	; 0xce <FND_Display+0x16>
	PORTE = 0x20;
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	83 b9       	out	0x03, r24	; 3
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <FND_Display+0x2a>
	else if (idx == 2)
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	91 05       	cpc	r25, r1
  d2:	19 f4       	brne	.+6      	; 0xda <FND_Display+0x22>
	PORTE = 0x40;
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	83 b9       	out	0x03, r24	; 3
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <FND_Display+0x2a>
	else if (idx == 3)
  da:	03 97       	sbiw	r24, 0x03	; 3
  dc:	11 f4       	brne	.+4      	; 0xe2 <FND_Display+0x2a>
	PORTE = 0x80;
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	83 b9       	out	0x03, r24	; 3

	PORTB = Port_char[number];
  e2:	fb 01       	movw	r30, r22
  e4:	e0 50       	subi	r30, 0x00	; 0
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	80 81       	ld	r24, Z
  ea:	88 bb       	out	0x18, r24	; 24

	if (dot == 1)
  ec:	41 30       	cpi	r20, 0x01	; 1
  ee:	51 05       	cpc	r21, r1
  f0:	19 f4       	brne	.+6      	; 0xf8 <FND_Display+0x40>
	PORTB = PORTB & 0x7f;
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	8f 77       	andi	r24, 0x7F	; 127
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	08 95       	ret

000000fa <FND_Timer>:
}

void FND_Timer(int time)
{
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	9c 01       	movw	r18, r24
	int minutes = time / 60;
	int seconds = time % 60;
 108:	6c e3       	ldi	r22, 0x3C	; 60
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	03 d1       	rcall	.+518    	; 0x314 <__divmodhi4>
 10e:	eb 01       	movw	r28, r22
 110:	8c 01       	movw	r16, r24

	if (minutes == 0 && seconds == 0)
 112:	20 97       	sbiw	r28, 0x00	; 0
 114:	f9 f4       	brne	.+62     	; 0x154 <FND_Timer+0x5a>
 116:	89 2b       	or	r24, r25
 118:	e9 f4       	brne	.+58     	; 0x154 <FND_Timer+0x5a>
	{
		FND_Display(0, 0, 0);
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	c8 df       	rcall	.-112    	; 0xb8 <FND_Display>
		FND_Display(1, 0, 0);
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	c1 df       	rcall	.-126    	; 0xb8 <FND_Display>
		FND_Display(2, 0, 0);
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	ba df       	rcall	.-140    	; 0xb8 <FND_Display>
		FND_Display(3, 0, 0);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	b3 df       	rcall	.-154    	; 0xb8 <FND_Display>
	}
	else
	{
		FND_Display(0, minutes / 10, 0);
 152:	26 c0       	rjmp	.+76     	; 0x1a0 <FND_Timer+0xa6>
 154:	c9 01       	movw	r24, r18
 156:	68 e5       	ldi	r22, 0x58	; 88
 158:	72 e0       	ldi	r23, 0x02	; 2
 15a:	dc d0       	rcall	.+440    	; 0x314 <__divmodhi4>
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	a9 df       	rcall	.-174    	; 0xb8 <FND_Display>
		FND_Display(1, minutes % 10, 1);
 166:	0f 2e       	mov	r0, r31
 168:	fa e0       	ldi	r31, 0x0A	; 10
 16a:	ef 2e       	mov	r14, r31
 16c:	f1 2c       	mov	r15, r1
 16e:	f0 2d       	mov	r31, r0
 170:	ce 01       	movw	r24, r28
 172:	b7 01       	movw	r22, r14
 174:	cf d0       	rcall	.+414    	; 0x314 <__divmodhi4>
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	bc 01       	movw	r22, r24
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
		FND_Display(2, seconds / 10, 0);
 180:	9b df       	rcall	.-202    	; 0xb8 <FND_Display>
 182:	c8 01       	movw	r24, r16
 184:	b7 01       	movw	r22, r14
 186:	c6 d0       	rcall	.+396    	; 0x314 <__divmodhi4>
 188:	ec 01       	movw	r28, r24
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	92 df       	rcall	.-220    	; 0xb8 <FND_Display>
		FND_Display(3, seconds % 10, 0);
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	be 01       	movw	r22, r28
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	8c df       	rcall	.-232    	; 0xb8 <FND_Display>
 1a0:	df 91       	pop	r29
	}
}
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	08 95       	ret

000001ae <PushButtonDet>:
 1ae:	20 b3       	in	r18, 0x10	; 16

int PushButtonDet(int number)
{
	if (((~PIND >> number) & 0x01) == 0x01)
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	20 95       	com	r18
 1b4:	30 95       	com	r19
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <PushButtonDet+0xe>
 1b8:	35 95       	asr	r19
 1ba:	27 95       	ror	r18
 1bc:	8a 95       	dec	r24
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <PushButtonDet+0xa>
 1c0:	c9 01       	movw	r24, r18
 1c2:	81 70       	andi	r24, 0x01	; 1
 1c4:	99 27       	eor	r25, r25
 1c6:	20 ff       	sbrs	r18, 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <PushButtonDet+0x20>
	return 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
	else
	return 0;
 1ce:	08 95       	ret

000001d0 <main>:
int PushButtonDet(int number);

unsigned char Port_char[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x90, 0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e, 0xbf};

int main(void)
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <main+0x6>
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <main+0x8>
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0; // 버튼 입력 설정
 1dc:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xff; // FND 출력 설정
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff; // FND 선택 설정
 1e2:	82 b9       	out	0x02, r24	; 2

	PORTE = 0x80; // 초기에는 FND가 모두 꺼져있는 상태로 설정
 1e4:	80 e8       	ldi	r24, 0x80	; 128
 1e6:	83 b9       	out	0x03, r24	; 3
	int timer_started = 0; // 타이머 시작 여부 변수
	int prev_button_state = 0; // 이전 버튼 상태 저장 변수
	int stopped_time = 0; // 타이머가 정지된 시간 저장 변수
	int display_zero = 0; // FND에 0을 표시하는지 여부를 나타내는 변수
	int timer_stopped = 0; // 타이머가 정지되었는지 여부를 나타내는 변수
	int button_timer = 0; // 버튼을 누른 시간을 측정하는 타이머
 1e8:	00 e0       	ldi	r16, 0x00	; 0
 1ea:	10 e0       	ldi	r17, 0x00	; 0
	int button_press_count = 0; // 버튼 누른 횟수 카운트 변수
	int timer_started = 0; // 타이머 시작 여부 변수
	int prev_button_state = 0; // 이전 버튼 상태 저장 변수
	int stopped_time = 0; // 타이머가 정지된 시간 저장 변수
	int display_zero = 0; // FND에 0을 표시하는지 여부를 나타내는 변수
	int timer_stopped = 0; // 타이머가 정지되었는지 여부를 나타내는 변수
 1ec:	a1 2c       	mov	r10, r1
 1ee:	b1 2c       	mov	r11, r1
	int time_count = 0; // 타이머 카운트 변수
	int button_press_count = 0; // 버튼 누른 횟수 카운트 변수
	int timer_started = 0; // 타이머 시작 여부 변수
	int prev_button_state = 0; // 이전 버튼 상태 저장 변수
	int stopped_time = 0; // 타이머가 정지된 시간 저장 변수
	int display_zero = 0; // FND에 0을 표시하는지 여부를 나타내는 변수
 1f0:	81 2c       	mov	r8, r1
 1f2:	91 2c       	mov	r9, r1

	int time_count = 0; // 타이머 카운트 변수
	int button_press_count = 0; // 버튼 누른 횟수 카운트 변수
	int timer_started = 0; // 타이머 시작 여부 변수
	int prev_button_state = 0; // 이전 버튼 상태 저장 변수
	int stopped_time = 0; // 타이머가 정지된 시간 저장 변수
 1f4:	19 82       	std	Y+1, r1	; 0x01
 1f6:	1a 82       	std	Y+2, r1	; 0x02
	PORTE = 0x80; // 초기에는 FND가 모두 꺼져있는 상태로 설정

	int time_count = 0; // 타이머 카운트 변수
	int button_press_count = 0; // 버튼 누른 횟수 카운트 변수
	int timer_started = 0; // 타이머 시작 여부 변수
	int prev_button_state = 0; // 이전 버튼 상태 저장 변수
 1f8:	41 2c       	mov	r4, r1
 1fa:	51 2c       	mov	r5, r1

	PORTE = 0x80; // 초기에는 FND가 모두 꺼져있는 상태로 설정

	int time_count = 0; // 타이머 카운트 변수
	int button_press_count = 0; // 버튼 누른 횟수 카운트 변수
	int timer_started = 0; // 타이머 시작 여부 변수
 1fc:	c1 2c       	mov	r12, r1
 1fe:	d1 2c       	mov	r13, r1
	DDRE = 0xff; // FND 선택 설정

	PORTE = 0x80; // 초기에는 FND가 모두 꺼져있는 상태로 설정

	int time_count = 0; // 타이머 카운트 변수
	int button_press_count = 0; // 버튼 누른 횟수 카운트 변수
 200:	61 2c       	mov	r6, r1
 202:	71 2c       	mov	r7, r1
	DDRB = 0xff; // FND 출력 설정
	DDRE = 0xff; // FND 선택 설정

	PORTE = 0x80; // 초기에는 FND가 모두 꺼져있는 상태로 설정

	int time_count = 0; // 타이머 카운트 변수
 204:	e1 2c       	mov	r14, r1
 206:	f1 2c       	mov	r15, r1
	int timer_stopped = 0; // 타이머가 정지되었는지 여부를 나타내는 변수
	int button_timer = 0; // 버튼을 누른 시간을 측정하는 타이머

	while (1)
	{
		int button_state = PushButtonDet(0); // 0번 버튼의 상태 확인
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	d0 df       	rcall	.-96     	; 0x1ae <PushButtonDet>
 20e:	9c 83       	std	Y+4, r25	; 0x04
 210:	8b 83       	std	Y+3, r24	; 0x03

		if (!display_zero && !timer_stopped)
 212:	81 14       	cp	r8, r1
 214:	91 04       	cpc	r9, r1
 216:	a1 f4       	brne	.+40     	; 0x240 <main+0x70>
 218:	a1 14       	cp	r10, r1
 21a:	b1 04       	cpc	r11, r1
 21c:	59 f0       	breq	.+22     	; 0x234 <main+0x64>
 21e:	10 c0       	rjmp	.+32     	; 0x240 <main+0x70>
		{
			for (int i = 0; i < 4; i++)
			FND_Display(i, 0, 0); // 타이머가 시작되지 않았을 때 0을 표시
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	c1 01       	movw	r24, r2
 22a:	46 df       	rcall	.-372    	; 0xb8 <FND_Display>
	{
		int button_state = PushButtonDet(0); // 0번 버튼의 상태 확인

		if (!display_zero && !timer_stopped)
		{
			for (int i = 0; i < 4; i++)
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	28 1a       	sub	r2, r24
 230:	38 0a       	sbc	r3, r24
 232:	02 c0       	rjmp	.+4      	; 0x238 <main+0x68>
 234:	21 2c       	mov	r2, r1
 236:	31 2c       	mov	r3, r1
 238:	94 e0       	ldi	r25, 0x04	; 4
 23a:	29 16       	cp	r2, r25
 23c:	31 04       	cpc	r3, r1
 23e:	84 f3       	brlt	.-32     	; 0x220 <main+0x50>
			FND_Display(i, 0, 0); // 타이머가 시작되지 않았을 때 0을 표시
		}

		if (button_state == 1 && prev_button_state == 0)
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	31 f5       	brne	.+76     	; 0x294 <main+0xc4>
 248:	45 28       	or	r4, r5
 24a:	21 f5       	brne	.+72     	; 0x294 <main+0xc4>
		{
			button_press_count++;
 24c:	9f ef       	ldi	r25, 0xFF	; 255
 24e:	69 1a       	sub	r6, r25
 250:	79 0a       	sbc	r7, r25
			if (button_press_count == 1)
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	68 16       	cp	r6, r24
 256:	71 04       	cpc	r7, r1
 258:	29 f0       	breq	.+10     	; 0x264 <main+0x94>
				timer_started = 1;
				display_zero = 1;
				timer_stopped = 0;
				button_timer = 0;
			}
			else if (button_press_count == 2)
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	69 16       	cp	r6, r25
 25e:	71 04       	cpc	r7, r1
 260:	c9 f4       	brne	.+50     	; 0x294 <main+0xc4>
 262:	0b c0       	rjmp	.+22     	; 0x27a <main+0xaa>
			if (button_press_count == 1)
			{   // 버튼을 처음 누른 경우
				timer_started = 1;
				display_zero = 1;
				timer_stopped = 0;
				button_timer = 0;
 264:	00 e0       	ldi	r16, 0x00	; 0
 266:	10 e0       	ldi	r17, 0x00	; 0
			button_press_count++;
			if (button_press_count == 1)
			{   // 버튼을 처음 누른 경우
				timer_started = 1;
				display_zero = 1;
				timer_stopped = 0;
 268:	a1 2c       	mov	r10, r1
 26a:	b1 2c       	mov	r11, r1
		{
			button_press_count++;
			if (button_press_count == 1)
			{   // 버튼을 처음 누른 경우
				timer_started = 1;
				display_zero = 1;
 26c:	88 24       	eor	r8, r8
 26e:	83 94       	inc	r8
 270:	91 2c       	mov	r9, r1
		if (button_state == 1 && prev_button_state == 0)
		{
			button_press_count++;
			if (button_press_count == 1)
			{   // 버튼을 처음 누른 경우
				timer_started = 1;
 272:	cc 24       	eor	r12, r12
 274:	c3 94       	inc	r12
 276:	d1 2c       	mov	r13, r1
 278:	0d c0       	rjmp	.+26     	; 0x294 <main+0xc4>
				timer_stopped = 0;
				button_timer = 0;
			}
			else if (button_press_count == 2)
			{   // 버튼을 두 번째 누른 경우 (타이머 정지)
				stopped_time = time_count;
 27a:	e9 82       	std	Y+1, r14	; 0x01
 27c:	fa 82       	std	Y+2, r15	; 0x02
				timer_started = 0;
				button_press_count = 0;
				display_zero = 0;
				timer_stopped = 1;
				button_timer = 0;
 27e:	00 e0       	ldi	r16, 0x00	; 0
 280:	10 e0       	ldi	r17, 0x00	; 0
			{   // 버튼을 두 번째 누른 경우 (타이머 정지)
				stopped_time = time_count;
				timer_started = 0;
				button_press_count = 0;
				display_zero = 0;
				timer_stopped = 1;
 282:	aa 24       	eor	r10, r10
 284:	a3 94       	inc	r10
 286:	b1 2c       	mov	r11, r1
			else if (button_press_count == 2)
			{   // 버튼을 두 번째 누른 경우 (타이머 정지)
				stopped_time = time_count;
				timer_started = 0;
				button_press_count = 0;
				display_zero = 0;
 288:	81 2c       	mov	r8, r1
 28a:	91 2c       	mov	r9, r1
				button_timer = 0;
			}
			else if (button_press_count == 2)
			{   // 버튼을 두 번째 누른 경우 (타이머 정지)
				stopped_time = time_count;
				timer_started = 0;
 28c:	c1 2c       	mov	r12, r1
 28e:	d1 2c       	mov	r13, r1
				button_press_count = 0;
 290:	61 2c       	mov	r6, r1
 292:	71 2c       	mov	r7, r1
				timer_stopped = 1;
				button_timer = 0;
			}
		}

		if (timer_started)
 294:	c1 14       	cp	r12, r1
 296:	d1 04       	cpc	r13, r1
 298:	a1 f0       	breq	.+40     	; 0x2c2 <main+0xf2>
		{
			button_timer++;
 29a:	0f 5f       	subi	r16, 0xFF	; 255
 29c:	1f 4f       	sbci	r17, 0xFF	; 255
			if (button_timer >= 500) // 0.5초마다
 29e:	04 3f       	cpi	r16, 0xF4	; 244
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	18 07       	cpc	r17, r24
 2a4:	34 f0       	brlt	.+12     	; 0x2b2 <main+0xe2>
			{
				time_count += 600; // 10분씩 증가
 2a6:	98 ea       	ldi	r25, 0xA8	; 168
 2a8:	e9 1a       	sub	r14, r25
 2aa:	9d ef       	ldi	r25, 0xFD	; 253
 2ac:	f9 0a       	sbc	r15, r25
				button_timer = 0;
 2ae:	00 e0       	ldi	r16, 0x00	; 0
			}

			FND_Timer(time_count);
 2b0:	10 e0       	ldi	r17, 0x00	; 0
 2b2:	c7 01       	movw	r24, r14
 2b4:	22 df       	rcall	.-444    	; 0xfa <FND_Timer>
			if (time_count >= 5400) // 90분 타이머 설정 (90 * 60 = 5400)
 2b6:	88 e1       	ldi	r24, 0x18	; 24
 2b8:	e8 16       	cp	r14, r24
 2ba:	85 e1       	ldi	r24, 0x15	; 21
 2bc:	f8 06       	cpc	r15, r24
 2be:	2c f4       	brge	.+10     	; 0x2ca <main+0xfa>
				timer_stopped = 1;
			}
		}
		else
		{
			FND_Timer(stopped_time);
 2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <main+0x104>
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	9a 81       	ldd	r25, Y+2	; 0x02
 2c6:	19 df       	rcall	.-462    	; 0xfa <FND_Timer>
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <main+0x104>

			FND_Timer(time_count);
			if (time_count >= 5400) // 90분 타이머 설정 (90 * 60 = 5400)
			{
				timer_started = 0;
				timer_stopped = 1;
 2ca:	aa 24       	eor	r10, r10
 2cc:	a3 94       	inc	r10
 2ce:	b1 2c       	mov	r11, r1
			}

			FND_Timer(time_count);
			if (time_count >= 5400) // 90분 타이머 설정 (90 * 60 = 5400)
			{
				timer_started = 0;
 2d0:	c1 2c       	mov	r12, r1
			FND_Timer(stopped_time);
		}

		prev_button_state = button_state;

		if (PushButtonDet(1) == 1 && timer_stopped)
 2d2:	d1 2c       	mov	r13, r1
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	6a df       	rcall	.-300    	; 0x1ae <PushButtonDet>
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	99 f4       	brne	.+38     	; 0x304 <main+0x134>
 2de:	a1 14       	cp	r10, r1
 2e0:	b1 04       	cpc	r11, r1
 2e2:	81 f0       	breq	.+32     	; 0x304 <main+0x134>
			timer_started = 0; // 타이머 시작 여부 변수
			prev_button_state = 0; // 이전 버튼 상태 저장 변수
			stopped_time = 0; // 타이머가 정지된 시간 저장 변수
			display_zero = 0; // FND에 0을 표시하는지 여부를 나타내는 변수
			timer_stopped = 0; // 타이머가 정지되었는지 여부를 나타내는 변수
			button_timer = 0; // 버튼을 누른 시간을 측정하는 타이머
 2e4:	00 e0       	ldi	r16, 0x00	; 0
 2e6:	10 e0       	ldi	r17, 0x00	; 0
			button_press_count = 0; // 버튼 누른 횟수 카운트 변수
			timer_started = 0; // 타이머 시작 여부 변수
			prev_button_state = 0; // 이전 버튼 상태 저장 변수
			stopped_time = 0; // 타이머가 정지된 시간 저장 변수
			display_zero = 0; // FND에 0을 표시하는지 여부를 나타내는 변수
			timer_stopped = 0; // 타이머가 정지되었는지 여부를 나타내는 변수
 2e8:	a1 2c       	mov	r10, r1
 2ea:	b1 2c       	mov	r11, r1
			time_count = 0; // 타이머 카운트 변수
			button_press_count = 0; // 버튼 누른 횟수 카운트 변수
			timer_started = 0; // 타이머 시작 여부 변수
			prev_button_state = 0; // 이전 버튼 상태 저장 변수
			stopped_time = 0; // 타이머가 정지된 시간 저장 변수
			display_zero = 0; // FND에 0을 표시하는지 여부를 나타내는 변수
 2ec:	81 2c       	mov	r8, r1
 2ee:	91 2c       	mov	r9, r1
		{   // 1번 버튼: 타이머 초기화
			time_count = 0; // 타이머 카운트 변수
			button_press_count = 0; // 버튼 누른 횟수 카운트 변수
			timer_started = 0; // 타이머 시작 여부 변수
			prev_button_state = 0; // 이전 버튼 상태 저장 변수
			stopped_time = 0; // 타이머가 정지된 시간 저장 변수
 2f0:	19 82       	std	Y+1, r1	; 0x01
 2f2:	1a 82       	std	Y+2, r1	; 0x02
		if (PushButtonDet(1) == 1 && timer_stopped)
		{   // 1번 버튼: 타이머 초기화
			time_count = 0; // 타이머 카운트 변수
			button_press_count = 0; // 버튼 누른 횟수 카운트 변수
			timer_started = 0; // 타이머 시작 여부 변수
			prev_button_state = 0; // 이전 버튼 상태 저장 변수
 2f4:	1c 82       	std	Y+4, r1	; 0x04
 2f6:	1b 82       	std	Y+3, r1	; 0x03

		if (PushButtonDet(1) == 1 && timer_stopped)
		{   // 1번 버튼: 타이머 초기화
			time_count = 0; // 타이머 카운트 변수
			button_press_count = 0; // 버튼 누른 횟수 카운트 변수
			timer_started = 0; // 타이머 시작 여부 변수
 2f8:	c1 2c       	mov	r12, r1
 2fa:	d1 2c       	mov	r13, r1
		prev_button_state = button_state;

		if (PushButtonDet(1) == 1 && timer_stopped)
		{   // 1번 버튼: 타이머 초기화
			time_count = 0; // 타이머 카운트 변수
			button_press_count = 0; // 버튼 누른 횟수 카운트 변수
 2fc:	61 2c       	mov	r6, r1
 2fe:	71 2c       	mov	r7, r1

		prev_button_state = button_state;

		if (PushButtonDet(1) == 1 && timer_stopped)
		{   // 1번 버튼: 타이머 초기화
			time_count = 0; // 타이머 카운트 변수
 300:	e1 2c       	mov	r14, r1
 302:	f1 2c       	mov	r15, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 304:	86 e6       	ldi	r24, 0x66	; 102
 306:	9e e0       	ldi	r25, 0x0E	; 14
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <main+0x138>
 30c:	00 00       	nop
 30e:	4b 80       	ldd	r4, Y+3	; 0x03
 310:	5c 80       	ldd	r5, Y+4	; 0x04
 312:	7a cf       	rjmp	.-268    	; 0x208 <main+0x38>

00000314 <__divmodhi4>:
 314:	97 fb       	bst	r25, 7
 316:	07 2e       	mov	r0, r23
 318:	16 f4       	brtc	.+4      	; 0x31e <__divmodhi4+0xa>
 31a:	00 94       	com	r0
 31c:	06 d0       	rcall	.+12     	; 0x32a <__divmodhi4_neg1>
 31e:	77 fd       	sbrc	r23, 7
 320:	08 d0       	rcall	.+16     	; 0x332 <__divmodhi4_neg2>
 322:	0b d0       	rcall	.+22     	; 0x33a <__udivmodhi4>
 324:	07 fc       	sbrc	r0, 7
 326:	05 d0       	rcall	.+10     	; 0x332 <__divmodhi4_neg2>
 328:	3e f4       	brtc	.+14     	; 0x338 <__divmodhi4_exit>

0000032a <__divmodhi4_neg1>:
 32a:	90 95       	com	r25
 32c:	81 95       	neg	r24
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	08 95       	ret

00000332 <__divmodhi4_neg2>:
 332:	70 95       	com	r23
 334:	61 95       	neg	r22
 336:	7f 4f       	sbci	r23, 0xFF	; 255

00000338 <__divmodhi4_exit>:
 338:	08 95       	ret

0000033a <__udivmodhi4>:
 33a:	aa 1b       	sub	r26, r26
 33c:	bb 1b       	sub	r27, r27
 33e:	51 e1       	ldi	r21, 0x11	; 17
 340:	07 c0       	rjmp	.+14     	; 0x350 <__udivmodhi4_ep>

00000342 <__udivmodhi4_loop>:
 342:	aa 1f       	adc	r26, r26
 344:	bb 1f       	adc	r27, r27
 346:	a6 17       	cp	r26, r22
 348:	b7 07       	cpc	r27, r23
 34a:	10 f0       	brcs	.+4      	; 0x350 <__udivmodhi4_ep>
 34c:	a6 1b       	sub	r26, r22
 34e:	b7 0b       	sbc	r27, r23

00000350 <__udivmodhi4_ep>:
 350:	88 1f       	adc	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	5a 95       	dec	r21
 356:	a9 f7       	brne	.-22     	; 0x342 <__udivmodhi4_loop>
 358:	80 95       	com	r24
 35a:	90 95       	com	r25
 35c:	bc 01       	movw	r22, r24
 35e:	cd 01       	movw	r24, r26
 360:	08 95       	ret

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
