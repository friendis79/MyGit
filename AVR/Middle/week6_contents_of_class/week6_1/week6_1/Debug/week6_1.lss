
week6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095c  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085f  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003aa  00000000  00000000  000013b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044d  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b9  00000000  00000000  00001bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001daa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	26 d0       	rcall	.+76     	; 0xe6 <main>
  9a:	34 c0       	rjmp	.+104    	; 0x104 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <row_scan>:
char row_scan(char row)
{
	char col = -1; // 0xff
	char pin_info;

	pin_info = PINC >> 4; // 5,6,7,8로 비트 연산자를 사용하여 자릿수를 바꿈
  9e:	93 b3       	in	r25, 0x13	; 19
  a0:	92 95       	swap	r25
  a2:	9f 70       	andi	r25, 0x0F	; 15
	
	if (row == 0)		PORTC = 0x0e;	// 1110
  a4:	81 11       	cpse	r24, r1
  a6:	03 c0       	rjmp	.+6      	; 0xae <row_scan+0x10>
  a8:	8e e0       	ldi	r24, 0x0E	; 14
  aa:	85 bb       	out	0x15, r24	; 21
  ac:	0e c0       	rjmp	.+28     	; 0xca <row_scan+0x2c>
	else if (row == 1)	PORTC = 0x0d;	// 1101
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	19 f4       	brne	.+6      	; 0xb8 <row_scan+0x1a>
  b2:	8d e0       	ldi	r24, 0x0D	; 13
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	09 c0       	rjmp	.+18     	; 0xca <row_scan+0x2c>
	else if (row == 2)	PORTC = 0x0b;	// 1011
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	19 f4       	brne	.+6      	; 0xc2 <row_scan+0x24>
  bc:	8b e0       	ldi	r24, 0x0B	; 11
  be:	85 bb       	out	0x15, r24	; 21
  c0:	04 c0       	rjmp	.+8      	; 0xca <row_scan+0x2c>
	else if (row == 3)	PORTC = 0x07;	// 0111
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	11 f4       	brne	.+4      	; 0xca <row_scan+0x2c>
  c6:	87 e0       	ldi	r24, 0x07	; 7
  c8:	85 bb       	out	0x15, r24	; 21
		
	if (pin_info == 0x1)		col = 0+col*4;	// 0001
  ca:	91 30       	cpi	r25, 0x01	; 1
  cc:	31 f0       	breq	.+12     	; 0xda <row_scan+0x3c>
	else if (pin_info == 0x2)	col = 1+col*4;	// 0010
  ce:	92 30       	cpi	r25, 0x02	; 2
  d0:	31 f0       	breq	.+12     	; 0xde <row_scan+0x40>
	else if (pin_info == 0x4)	col = 2+col*4;	// 0100
  d2:	94 30       	cpi	r25, 0x04	; 4
  d4:	31 f4       	brne	.+12     	; 0xe2 <row_scan+0x44>
  d6:	8e ef       	ldi	r24, 0xFE	; 254
  d8:	08 95       	ret
	if (row == 0)		PORTC = 0x0e;	// 1110
	else if (row == 1)	PORTC = 0x0d;	// 1101
	else if (row == 2)	PORTC = 0x0b;	// 1011
	else if (row == 3)	PORTC = 0x07;	// 0111
		
	if (pin_info == 0x1)		col = 0+col*4;	// 0001
  da:	8c ef       	ldi	r24, 0xFC	; 252
  dc:	08 95       	ret
	else if (pin_info == 0x2)	col = 1+col*4;	// 0010
  de:	8d ef       	ldi	r24, 0xFD	; 253
  e0:	08 95       	ret
    }
}

char row_scan(char row)
{
	char col = -1; // 0xff
  e2:	8f ef       	ldi	r24, 0xFF	; 255
	else if (pin_info == 0x2)	col = 1+col*4;	// 0010
	else if (pin_info == 0x4)	col = 2+col*4;	// 0100
	else if (pin_info == 0x8)	col = 3+col*4;	// 1000

	return (col);
}
  e4:	08 95       	ret

000000e6 <main>:

char row_scan(char row);

int main(void)
{
	DDRB = 0xff;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x0f;
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	84 bb       	out	0x14, r24	; 20
    {
		/*
		PORTC = 0x0d; // 1110 -> PC3 : 1, PC2 -> 1, PC1 -> 0, PC0 -> 1 => COL2
		PORTB = PINC;
		*/
		for (int i = 0; i <4; i++)		PORTB = row_scan(i);
  ee:	c0 e0       	ldi	r28, 0x00	; 0
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <main+0x16>
  f4:	8c 2f       	mov	r24, r28
  f6:	d3 df       	rcall	.-90     	; 0x9e <row_scan>
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	21 96       	adiw	r28, 0x01	; 1
  fc:	c4 30       	cpi	r28, 0x04	; 4
  fe:	d1 05       	cpc	r29, r1
 100:	cc f3       	brlt	.-14     	; 0xf4 <main+0xe>
 102:	f5 cf       	rjmp	.-22     	; 0xee <main+0x8>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
