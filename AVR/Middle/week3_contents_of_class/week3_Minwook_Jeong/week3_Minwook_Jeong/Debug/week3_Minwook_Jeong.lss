
week3_Minwook_Jeong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a35  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000884  00000000  00000000  00000cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000361  00000000  00000000  00001541  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000455  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000271  00000000  00000000  00001d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001fca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	61 d0       	rcall	.+194    	; 0x15c <main>
  9a:	78 c0       	rjmp	.+240    	; 0x18c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <PushButtonDet>:
	return 0;
}

int PushButtonDet(int number)
{
	if (((~PIND >> number) & 0x1) == 1) // 비트 연산자 (~) : 0000 0000 -> 1111 1111
  9e:	20 b3       	in	r18, 0x10	; 16
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	20 95       	com	r18
  a4:	30 95       	com	r19
  a6:	02 c0       	rjmp	.+4      	; 0xac <PushButtonDet+0xe>
  a8:	35 95       	asr	r19
  aa:	27 95       	ror	r18
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <PushButtonDet+0xa>
  b0:	c9 01       	movw	r24, r18
  b2:	81 70       	andi	r24, 0x01	; 1
  b4:	99 27       	eor	r25, r25
  b6:	20 ff       	sbrs	r18, 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <PushButtonDet+0x20>
	return 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
	
	else
	return 0;
}
  be:	08 95       	ret

000000c0 <LEDOnOff>:

void LEDOnOff (int number, int onoff)
{
	char led_state;
	led_state = ~PORTB;
  c0:	98 b3       	in	r25, 0x18	; 24
  c2:	90 95       	com	r25
	
	if (onoff == 1){
  c4:	61 30       	cpi	r22, 0x01	; 1
  c6:	71 05       	cpc	r23, r1
  c8:	59 f4       	brne	.+22     	; 0xe0 <LEDOnOff+0x20>
		led_state = led_state | (1 << number); // 지정된 위치에만 1을 추가 하고 싶을 때 사용
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <LEDOnOff+0x14>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <LEDOnOff+0x10>
  d8:	92 2b       	or	r25, r18
		PORTB = ~led_state;
  da:	90 95       	com	r25
  dc:	98 bb       	out	0x18, r25	; 24
  de:	08 95       	ret
	}
	
	else{
		led_state = led_state & ~(1 << number); // 원하는 자리의 LED 끄기
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <LEDOnOff+0x2a>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <LEDOnOff+0x26>
  ee:	20 95       	com	r18
  f0:	92 23       	and	r25, r18
		PORTB = ~led_state;
  f2:	90 95       	com	r25
  f4:	98 bb       	out	0x18, r25	; 24
  f6:	08 95       	ret

000000f8 <ClickDet>:
	}
}

int ClickDet (int number, int polarity)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	ec 01       	movw	r28, r24
	int button;
	
	if (polarity == 1){   // 버튼을 누를 때를 감지
  fe:	61 30       	cpi	r22, 0x01	; 1
 100:	71 05       	cpc	r23, r1
 102:	79 f4       	brne	.+30     	; 0x122 <ClickDet+0x2a>
		button = PushButtonDet(number);
 104:	cc df       	rcall	.-104    	; 0x9e <PushButtonDet>
		if (button == 0){
 106:	89 2b       	or	r24, r25
 108:	d9 f4       	brne	.+54     	; 0x140 <ClickDet+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	86 e6       	ldi	r24, 0x66	; 102
 10c:	9e e0       	ldi	r25, 0x0E	; 14
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <ClickDet+0x16>
 112:	00 00       	nop
			_delay_ms(1);
			button = PushButtonDet(number);
 114:	ce 01       	movw	r24, r28
 116:	c3 df       	rcall	.-122    	; 0x9e <PushButtonDet>
			if (button == 1)
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	a9 f4       	brne	.+42     	; 0x146 <ClickDet+0x4e>
			return 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	else {	// 버튼이 떨어질 때를 감지
		button = PushButtonDet(number);
 120:	1a c0       	rjmp	.+52     	; 0x156 <ClickDet+0x5e>
 122:	bd df       	rcall	.-134    	; 0x9e <PushButtonDet>
		if (button == 1){
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	91 f4       	brne	.+36     	; 0x14c <ClickDet+0x54>
 128:	86 e6       	ldi	r24, 0x66	; 102
 12a:	9e e0       	ldi	r25, 0x0E	; 14
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <ClickDet+0x34>
			_delay_ms(1);
			button = PushButtonDet(number);
 130:	00 00       	nop
 132:	ce 01       	movw	r24, r28
 134:	b4 df       	rcall	.-152    	; 0x9e <PushButtonDet>
			if (button == 0)
 136:	89 2b       	or	r24, r25
 138:	61 f4       	brne	.+24     	; 0x152 <ClickDet+0x5a>
			return 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0b c0       	rjmp	.+22     	; 0x156 <ClickDet+0x5e>
		}
	}
	return 0;
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	08 c0       	rjmp	.+16     	; 0x156 <ClickDet+0x5e>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	05 c0       	rjmp	.+10     	; 0x156 <ClickDet+0x5e>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <ClickDet+0x5e>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <main>:
void LEDOnOff (int number, int onoff);
int ClickDet (int number, int polarity);

int main(void)
{
	DDRB = 0xff;
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff; // 전원을 키고 난 후의 초깃값을 지정
 160:	88 bb       	out	0x18, r24	; 24
	
	DDRD = 0;
 162:	11 ba       	out	0x11, r1	; 17
	
	int led_OnOff = 0;
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1)
	{
		if (ClickDet(0, 0)){
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	c3 df       	rcall	.-122    	; 0xf8 <ClickDet>
 172:	89 2b       	or	r24, r25
 174:	c9 f3       	breq	.-14     	; 0x168 <main+0xc>
			led_OnOff = !led_OnOff; // 논리 연산자 (!) : 0000 0000 -> 0000 0001
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	cd 2b       	or	r28, r29
 17a:	09 f0       	breq	.+2      	; 0x17e <main+0x22>
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	c8 2f       	mov	r28, r24
 180:	d0 e0       	ldi	r29, 0x00	; 0
			LEDOnOff(0, led_OnOff);
 182:	be 01       	movw	r22, r28
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9b df       	rcall	.-202    	; 0xc0 <LEDOnOff>
 18a:	ee cf       	rjmp	.-36     	; 0x168 <main+0xc>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
